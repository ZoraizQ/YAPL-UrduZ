Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    MULTICOMMENT
    NEWL

Grammar

Rule 0     S' -> uz
Rule 1     uz -> line uz
Rule 2     line -> stmt SEMICOL
Rule 3     line -> error SEMICOL
Rule 4     line -> stmt error
Rule 5     uz -> <empty>
Rule 6     stmtblock -> LBRACE stmtS RBRACE
Rule 7     stmtblock -> error stmtS RBRACE
Rule 8     stmtblock -> LBRACE stmtS error
Rule 9     stmtblock -> LBRACE error RBRACE
Rule 10    stmtS -> stmt SEMICOL stmtS
Rule 11    stmtS -> stmt error stmtS
Rule 12    stmtS -> <empty>
Rule 13    optargs -> args
Rule 14    optargs -> <empty>
Rule 15    args -> exp COMMA args
Rule 16    args -> exp
Rule 17    exp -> NOT exp
Rule 18    exp -> DEC exp
Rule 19    exp -> INC exp
Rule 20    exp -> exp PLUS exp
Rule 21    exp -> exp MINUS exp
Rule 22    exp -> exp MULTIPLY exp
Rule 23    exp -> exp DIVIDE exp
Rule 24    exp -> exp POWER exp
Rule 25    exp -> exp MODULUS exp
Rule 26    exp -> exp AND exp
Rule 27    exp -> exp OR exp
Rule 28    exp -> exp GT exp
Rule 29    exp -> exp LT exp
Rule 30    exp -> exp GTE exp
Rule 31    exp -> exp LTE exp
Rule 32    exp -> exp EE exp
Rule 33    exp -> exp NE exp
Rule 34    exp -> NAME
Rule 35    exp -> NAME LPAREN optargs RPAREN
Rule 36    stmt -> CALL NAME LPAREN optargs RPAREN
Rule 37    stmt -> RETURN exp
Rule 38    stmt -> FUNCTION NAME LPAREN funcargs RPAREN stmtblock
Rule 39    funcargs -> funcexp COMMA funcargs
Rule 40    funcargs -> funcexp
Rule 41    funcargs -> <empty>
Rule 42    funcexp -> NAME
Rule 43    funcexp -> NAME EQUAL exp
Rule 44    exp -> list
Rule 45    list -> LBRACK optargs RBRACK
Rule 46    stmt -> NAME DOT POP LPAREN exp RPAREN
Rule 47    stmt -> NAME DOT PUSH LPAREN exp RPAREN
Rule 48    exp -> NAME DOT INDEX LPAREN exp RPAREN
Rule 49    exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN
Rule 50    stmt -> STRUCT NAME SEP structargs SEP
Rule 51    structargs -> structexp COMMA structargs
Rule 52    structargs -> structexp
Rule 53    structexp -> NAME
Rule 54    structexp -> NAME EQUAL exp
Rule 55    stmt -> MAKE NAME NAME
Rule 56    stmt -> NAME DOT NAME EQUAL exp
Rule 57    exp -> NAME DOT NAME
Rule 58    exp -> MINUS INT
Rule 59    exp -> MINUS FLOAT
Rule 60    exp -> INT
Rule 61    exp -> FLOAT
Rule 62    stmt -> exp DEC
Rule 63    stmt -> exp INC
Rule 64    exp -> TRUE
Rule 65    exp -> FALSE
Rule 66    exp -> STRING
Rule 67    exp -> CHAR
Rule 68    exp -> LPAREN exp RPAREN
Rule 69    exp -> error
Rule 70    stmt -> MAKE structargs
Rule 71    stmt -> NAME EQUAL exp
Rule 72    stmt -> NAME EQUAL error
Rule 73    stmt -> IF exp THEN stmtblock
Rule 74    stmt -> IF exp THEN stmtblock elsif ELSE THEN stmtblock
Rule 75    elsif -> ELIF exp THEN stmtblock elsif
Rule 76    elsif -> <empty>
Rule 77    stmt -> BREAK
Rule 78    stmt -> CONTINUE
Rule 79    stmt -> DO stmtblock WHILE exp
Rule 80    stmt -> FOR NAME EQUAL exp TO exp UNTIL step stmtblock
Rule 81    step -> exp
Rule 82    step -> <empty>
Rule 83    stmt -> PRINT LPAREN optargs RPAREN

Terminals, with rules where they appear

AND                  : 26
BREAK                : 77
CALL                 : 36
CHAR                 : 67
COMMA                : 15 39 49 51
COMMENT              : 
CONTINUE             : 78
DEC                  : 18 62
DIVIDE               : 23
DO                   : 79
DOT                  : 46 47 48 49 56 57
EE                   : 32
ELIF                 : 75
ELSE                 : 74
EQUAL                : 43 54 56 71 72 80
FALSE                : 65
FLOAT                : 59 61
FOR                  : 80
FUNCTION             : 38
GT                   : 28
GTE                  : 30
IF                   : 73 74
INC                  : 19 63
INDEX                : 48
INT                  : 58 60
LBRACE               : 6 8 9
LBRACK               : 45
LPAREN               : 35 36 38 46 47 48 49 68 83
LT                   : 29
LTE                  : 31
MAKE                 : 55 70
MINUS                : 21 58 59
MODULUS              : 25
MULTICOMMENT         : 
MULTIPLY             : 22
NAME                 : 34 35 36 38 42 43 46 47 48 49 50 53 54 55 55 56 56 57 57 71 72 80
NE                   : 33
NEWL                 : 
NOT                  : 17
OR                   : 27
PLUS                 : 20
POP                  : 46
POWER                : 24
PRINT                : 83
PUSH                 : 47
RBRACE               : 6 7 9
RBRACK               : 45
RETURN               : 37
RPAREN               : 35 36 38 46 47 48 49 68 83
SEMICOL              : 2 3 10
SEP                  : 50 50
SLICE                : 49
STRING               : 66
STRUCT               : 50
THEN                 : 73 74 74 75
TO                   : 80
TRUE                 : 64
UNTIL                : 80
WHILE                : 79
error                : 3 4 7 8 9 11 69 72

Nonterminals, with rules where they appear

args                 : 13 15
elsif                : 74 75
exp                  : 15 16 17 18 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 37 43 46 47 48 49 49 54 56 62 63 68 71 73 74 75 79 80 80 81
funcargs             : 38 39
funcexp              : 39 40
line                 : 1
list                 : 44
optargs              : 35 36 45 83
step                 : 80
stmt                 : 2 4 10 11
stmtS                : 6 7 8 10 11
stmtblock            : 38 73 74 74 75 79 80
structargs           : 50 51 70
structexp            : 51 52
uz                   : 1 0

Parsing method: LALR

state 0

    (0) S' -> . uz
    (1) uz -> . line uz
    (5) uz -> .
    (2) line -> . stmt SEMICOL
    (3) line -> . error SEMICOL
    (4) line -> . stmt error
    (36) stmt -> . CALL NAME LPAREN optargs RPAREN
    (37) stmt -> . RETURN exp
    (38) stmt -> . FUNCTION NAME LPAREN funcargs RPAREN stmtblock
    (46) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (47) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (50) stmt -> . STRUCT NAME SEP structargs SEP
    (55) stmt -> . MAKE NAME NAME
    (56) stmt -> . NAME DOT NAME EQUAL exp
    (62) stmt -> . exp DEC
    (63) stmt -> . exp INC
    (70) stmt -> . MAKE structargs
    (71) stmt -> . NAME EQUAL exp
    (72) stmt -> . NAME EQUAL error
    (73) stmt -> . IF exp THEN stmtblock
    (74) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (77) stmt -> . BREAK
    (78) stmt -> . CONTINUE
    (79) stmt -> . DO stmtblock WHILE exp
    (80) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (83) stmt -> . PRINT LPAREN optargs RPAREN
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    $end            reduce using rule 5 (uz -> .)
    error           shift and go to state 4
    CALL            shift and go to state 5
    RETURN          shift and go to state 8
    FUNCTION        shift and go to state 10
    NAME            shift and go to state 6
    STRUCT          shift and go to state 11
    MAKE            shift and go to state 12
    IF              shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PRINT           shift and go to state 20
    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    LBRACK          shift and go to state 30

    uz                             shift and go to state 1
    line                           shift and go to state 2
    stmt                           shift and go to state 3
    exp                            shift and go to state 9
    list                           shift and go to state 23

state 1

    (0) S' -> uz .



state 2

    (1) uz -> line . uz
    (1) uz -> . line uz
    (5) uz -> .
    (2) line -> . stmt SEMICOL
    (3) line -> . error SEMICOL
    (4) line -> . stmt error
    (36) stmt -> . CALL NAME LPAREN optargs RPAREN
    (37) stmt -> . RETURN exp
    (38) stmt -> . FUNCTION NAME LPAREN funcargs RPAREN stmtblock
    (46) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (47) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (50) stmt -> . STRUCT NAME SEP structargs SEP
    (55) stmt -> . MAKE NAME NAME
    (56) stmt -> . NAME DOT NAME EQUAL exp
    (62) stmt -> . exp DEC
    (63) stmt -> . exp INC
    (70) stmt -> . MAKE structargs
    (71) stmt -> . NAME EQUAL exp
    (72) stmt -> . NAME EQUAL error
    (73) stmt -> . IF exp THEN stmtblock
    (74) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (77) stmt -> . BREAK
    (78) stmt -> . CONTINUE
    (79) stmt -> . DO stmtblock WHILE exp
    (80) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (83) stmt -> . PRINT LPAREN optargs RPAREN
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    $end            reduce using rule 5 (uz -> .)
    error           shift and go to state 4
    CALL            shift and go to state 5
    RETURN          shift and go to state 8
    FUNCTION        shift and go to state 10
    NAME            shift and go to state 6
    STRUCT          shift and go to state 11
    MAKE            shift and go to state 12
    IF              shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PRINT           shift and go to state 20
    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    LBRACK          shift and go to state 30

    line                           shift and go to state 2
    uz                             shift and go to state 31
    stmt                           shift and go to state 3
    exp                            shift and go to state 9
    list                           shift and go to state 23

state 3

    (2) line -> stmt . SEMICOL
    (4) line -> stmt . error

    SEMICOL         shift and go to state 32
    error           shift and go to state 33


state 4

    (3) line -> error . SEMICOL
    (69) exp -> error .

    SEMICOL         shift and go to state 34
    DEC             reduce using rule 69 (exp -> error .)
    INC             reduce using rule 69 (exp -> error .)
    PLUS            reduce using rule 69 (exp -> error .)
    MINUS           reduce using rule 69 (exp -> error .)
    MULTIPLY        reduce using rule 69 (exp -> error .)
    DIVIDE          reduce using rule 69 (exp -> error .)
    POWER           reduce using rule 69 (exp -> error .)
    MODULUS         reduce using rule 69 (exp -> error .)
    AND             reduce using rule 69 (exp -> error .)
    OR              reduce using rule 69 (exp -> error .)
    GT              reduce using rule 69 (exp -> error .)
    LT              reduce using rule 69 (exp -> error .)
    GTE             reduce using rule 69 (exp -> error .)
    LTE             reduce using rule 69 (exp -> error .)
    EE              reduce using rule 69 (exp -> error .)
    NE              reduce using rule 69 (exp -> error .)


state 5

    (36) stmt -> CALL . NAME LPAREN optargs RPAREN

    NAME            shift and go to state 35


state 6

    (46) stmt -> NAME . DOT POP LPAREN exp RPAREN
    (47) stmt -> NAME . DOT PUSH LPAREN exp RPAREN
    (56) stmt -> NAME . DOT NAME EQUAL exp
    (71) stmt -> NAME . EQUAL exp
    (72) stmt -> NAME . EQUAL error
    (34) exp -> NAME .
    (35) exp -> NAME . LPAREN optargs RPAREN
    (48) exp -> NAME . DOT INDEX LPAREN exp RPAREN
    (49) exp -> NAME . DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> NAME . DOT NAME

    DOT             shift and go to state 36
    EQUAL           shift and go to state 38
    DEC             reduce using rule 34 (exp -> NAME .)
    INC             reduce using rule 34 (exp -> NAME .)
    PLUS            reduce using rule 34 (exp -> NAME .)
    MINUS           reduce using rule 34 (exp -> NAME .)
    MULTIPLY        reduce using rule 34 (exp -> NAME .)
    DIVIDE          reduce using rule 34 (exp -> NAME .)
    POWER           reduce using rule 34 (exp -> NAME .)
    MODULUS         reduce using rule 34 (exp -> NAME .)
    AND             reduce using rule 34 (exp -> NAME .)
    OR              reduce using rule 34 (exp -> NAME .)
    GT              reduce using rule 34 (exp -> NAME .)
    LT              reduce using rule 34 (exp -> NAME .)
    GTE             reduce using rule 34 (exp -> NAME .)
    LTE             reduce using rule 34 (exp -> NAME .)
    EE              reduce using rule 34 (exp -> NAME .)
    NE              reduce using rule 34 (exp -> NAME .)
    LPAREN          shift and go to state 37


state 7

    (68) exp -> LPAREN . exp RPAREN
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 39
    list                           shift and go to state 23

state 8

    (37) stmt -> RETURN . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 42
    list                           shift and go to state 23

state 9

    (62) stmt -> exp . DEC
    (63) stmt -> exp . INC
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    DEC             shift and go to state 43
    INC             shift and go to state 44
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 10

    (38) stmt -> FUNCTION . NAME LPAREN funcargs RPAREN stmtblock

    NAME            shift and go to state 59


state 11

    (50) stmt -> STRUCT . NAME SEP structargs SEP

    NAME            shift and go to state 60


state 12

    (55) stmt -> MAKE . NAME NAME
    (70) stmt -> MAKE . structargs
    (51) structargs -> . structexp COMMA structargs
    (52) structargs -> . structexp
    (53) structexp -> . NAME
    (54) structexp -> . NAME EQUAL exp

    NAME            shift and go to state 61

    structargs                     shift and go to state 62
    structexp                      shift and go to state 63

state 13

    (18) exp -> DEC . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 64
    list                           shift and go to state 23

state 14

    (19) exp -> INC . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 65
    list                           shift and go to state 23

state 15

    (73) stmt -> IF . exp THEN stmtblock
    (74) stmt -> IF . exp THEN stmtblock elsif ELSE THEN stmtblock
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 66
    list                           shift and go to state 23

state 16

    (77) stmt -> BREAK .

    SEMICOL         reduce using rule 77 (stmt -> BREAK .)
    error           reduce using rule 77 (stmt -> BREAK .)


state 17

    (78) stmt -> CONTINUE .

    SEMICOL         reduce using rule 78 (stmt -> CONTINUE .)
    error           reduce using rule 78 (stmt -> CONTINUE .)


state 18

    (79) stmt -> DO . stmtblock WHILE exp
    (6) stmtblock -> . LBRACE stmtS RBRACE
    (7) stmtblock -> . error stmtS RBRACE
    (8) stmtblock -> . LBRACE stmtS error
    (9) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 68
    error           shift and go to state 69

    stmtblock                      shift and go to state 67

state 19

    (80) stmt -> FOR . NAME EQUAL exp TO exp UNTIL step stmtblock

    NAME            shift and go to state 70


state 20

    (83) stmt -> PRINT . LPAREN optargs RPAREN

    LPAREN          shift and go to state 71


state 21

    (17) exp -> NOT . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 72
    list                           shift and go to state 23

state 22

    (58) exp -> MINUS . INT
    (59) exp -> MINUS . FLOAT

    INT             shift and go to state 73
    FLOAT           shift and go to state 74


state 23

    (44) exp -> list .

    DEC             reduce using rule 44 (exp -> list .)
    INC             reduce using rule 44 (exp -> list .)
    PLUS            reduce using rule 44 (exp -> list .)
    MINUS           reduce using rule 44 (exp -> list .)
    MULTIPLY        reduce using rule 44 (exp -> list .)
    DIVIDE          reduce using rule 44 (exp -> list .)
    POWER           reduce using rule 44 (exp -> list .)
    MODULUS         reduce using rule 44 (exp -> list .)
    AND             reduce using rule 44 (exp -> list .)
    OR              reduce using rule 44 (exp -> list .)
    GT              reduce using rule 44 (exp -> list .)
    LT              reduce using rule 44 (exp -> list .)
    GTE             reduce using rule 44 (exp -> list .)
    LTE             reduce using rule 44 (exp -> list .)
    EE              reduce using rule 44 (exp -> list .)
    NE              reduce using rule 44 (exp -> list .)
    RPAREN          reduce using rule 44 (exp -> list .)
    SEMICOL         reduce using rule 44 (exp -> list .)
    error           reduce using rule 44 (exp -> list .)
    THEN            reduce using rule 44 (exp -> list .)
    COMMA           reduce using rule 44 (exp -> list .)
    RBRACK          reduce using rule 44 (exp -> list .)
    SEP             reduce using rule 44 (exp -> list .)
    TO              reduce using rule 44 (exp -> list .)
    UNTIL           reduce using rule 44 (exp -> list .)
    LBRACE          reduce using rule 44 (exp -> list .)


state 24

    (60) exp -> INT .

    DEC             reduce using rule 60 (exp -> INT .)
    INC             reduce using rule 60 (exp -> INT .)
    PLUS            reduce using rule 60 (exp -> INT .)
    MINUS           reduce using rule 60 (exp -> INT .)
    MULTIPLY        reduce using rule 60 (exp -> INT .)
    DIVIDE          reduce using rule 60 (exp -> INT .)
    POWER           reduce using rule 60 (exp -> INT .)
    MODULUS         reduce using rule 60 (exp -> INT .)
    AND             reduce using rule 60 (exp -> INT .)
    OR              reduce using rule 60 (exp -> INT .)
    GT              reduce using rule 60 (exp -> INT .)
    LT              reduce using rule 60 (exp -> INT .)
    GTE             reduce using rule 60 (exp -> INT .)
    LTE             reduce using rule 60 (exp -> INT .)
    EE              reduce using rule 60 (exp -> INT .)
    NE              reduce using rule 60 (exp -> INT .)
    RPAREN          reduce using rule 60 (exp -> INT .)
    SEMICOL         reduce using rule 60 (exp -> INT .)
    error           reduce using rule 60 (exp -> INT .)
    THEN            reduce using rule 60 (exp -> INT .)
    COMMA           reduce using rule 60 (exp -> INT .)
    RBRACK          reduce using rule 60 (exp -> INT .)
    SEP             reduce using rule 60 (exp -> INT .)
    TO              reduce using rule 60 (exp -> INT .)
    UNTIL           reduce using rule 60 (exp -> INT .)
    LBRACE          reduce using rule 60 (exp -> INT .)


state 25

    (61) exp -> FLOAT .

    DEC             reduce using rule 61 (exp -> FLOAT .)
    INC             reduce using rule 61 (exp -> FLOAT .)
    PLUS            reduce using rule 61 (exp -> FLOAT .)
    MINUS           reduce using rule 61 (exp -> FLOAT .)
    MULTIPLY        reduce using rule 61 (exp -> FLOAT .)
    DIVIDE          reduce using rule 61 (exp -> FLOAT .)
    POWER           reduce using rule 61 (exp -> FLOAT .)
    MODULUS         reduce using rule 61 (exp -> FLOAT .)
    AND             reduce using rule 61 (exp -> FLOAT .)
    OR              reduce using rule 61 (exp -> FLOAT .)
    GT              reduce using rule 61 (exp -> FLOAT .)
    LT              reduce using rule 61 (exp -> FLOAT .)
    GTE             reduce using rule 61 (exp -> FLOAT .)
    LTE             reduce using rule 61 (exp -> FLOAT .)
    EE              reduce using rule 61 (exp -> FLOAT .)
    NE              reduce using rule 61 (exp -> FLOAT .)
    RPAREN          reduce using rule 61 (exp -> FLOAT .)
    SEMICOL         reduce using rule 61 (exp -> FLOAT .)
    error           reduce using rule 61 (exp -> FLOAT .)
    THEN            reduce using rule 61 (exp -> FLOAT .)
    COMMA           reduce using rule 61 (exp -> FLOAT .)
    RBRACK          reduce using rule 61 (exp -> FLOAT .)
    SEP             reduce using rule 61 (exp -> FLOAT .)
    TO              reduce using rule 61 (exp -> FLOAT .)
    UNTIL           reduce using rule 61 (exp -> FLOAT .)
    LBRACE          reduce using rule 61 (exp -> FLOAT .)


state 26

    (64) exp -> TRUE .

    DEC             reduce using rule 64 (exp -> TRUE .)
    INC             reduce using rule 64 (exp -> TRUE .)
    PLUS            reduce using rule 64 (exp -> TRUE .)
    MINUS           reduce using rule 64 (exp -> TRUE .)
    MULTIPLY        reduce using rule 64 (exp -> TRUE .)
    DIVIDE          reduce using rule 64 (exp -> TRUE .)
    POWER           reduce using rule 64 (exp -> TRUE .)
    MODULUS         reduce using rule 64 (exp -> TRUE .)
    AND             reduce using rule 64 (exp -> TRUE .)
    OR              reduce using rule 64 (exp -> TRUE .)
    GT              reduce using rule 64 (exp -> TRUE .)
    LT              reduce using rule 64 (exp -> TRUE .)
    GTE             reduce using rule 64 (exp -> TRUE .)
    LTE             reduce using rule 64 (exp -> TRUE .)
    EE              reduce using rule 64 (exp -> TRUE .)
    NE              reduce using rule 64 (exp -> TRUE .)
    RPAREN          reduce using rule 64 (exp -> TRUE .)
    SEMICOL         reduce using rule 64 (exp -> TRUE .)
    error           reduce using rule 64 (exp -> TRUE .)
    THEN            reduce using rule 64 (exp -> TRUE .)
    COMMA           reduce using rule 64 (exp -> TRUE .)
    RBRACK          reduce using rule 64 (exp -> TRUE .)
    SEP             reduce using rule 64 (exp -> TRUE .)
    TO              reduce using rule 64 (exp -> TRUE .)
    UNTIL           reduce using rule 64 (exp -> TRUE .)
    LBRACE          reduce using rule 64 (exp -> TRUE .)


state 27

    (65) exp -> FALSE .

    DEC             reduce using rule 65 (exp -> FALSE .)
    INC             reduce using rule 65 (exp -> FALSE .)
    PLUS            reduce using rule 65 (exp -> FALSE .)
    MINUS           reduce using rule 65 (exp -> FALSE .)
    MULTIPLY        reduce using rule 65 (exp -> FALSE .)
    DIVIDE          reduce using rule 65 (exp -> FALSE .)
    POWER           reduce using rule 65 (exp -> FALSE .)
    MODULUS         reduce using rule 65 (exp -> FALSE .)
    AND             reduce using rule 65 (exp -> FALSE .)
    OR              reduce using rule 65 (exp -> FALSE .)
    GT              reduce using rule 65 (exp -> FALSE .)
    LT              reduce using rule 65 (exp -> FALSE .)
    GTE             reduce using rule 65 (exp -> FALSE .)
    LTE             reduce using rule 65 (exp -> FALSE .)
    EE              reduce using rule 65 (exp -> FALSE .)
    NE              reduce using rule 65 (exp -> FALSE .)
    RPAREN          reduce using rule 65 (exp -> FALSE .)
    SEMICOL         reduce using rule 65 (exp -> FALSE .)
    error           reduce using rule 65 (exp -> FALSE .)
    THEN            reduce using rule 65 (exp -> FALSE .)
    COMMA           reduce using rule 65 (exp -> FALSE .)
    RBRACK          reduce using rule 65 (exp -> FALSE .)
    SEP             reduce using rule 65 (exp -> FALSE .)
    TO              reduce using rule 65 (exp -> FALSE .)
    UNTIL           reduce using rule 65 (exp -> FALSE .)
    LBRACE          reduce using rule 65 (exp -> FALSE .)


state 28

    (66) exp -> STRING .

    DEC             reduce using rule 66 (exp -> STRING .)
    INC             reduce using rule 66 (exp -> STRING .)
    PLUS            reduce using rule 66 (exp -> STRING .)
    MINUS           reduce using rule 66 (exp -> STRING .)
    MULTIPLY        reduce using rule 66 (exp -> STRING .)
    DIVIDE          reduce using rule 66 (exp -> STRING .)
    POWER           reduce using rule 66 (exp -> STRING .)
    MODULUS         reduce using rule 66 (exp -> STRING .)
    AND             reduce using rule 66 (exp -> STRING .)
    OR              reduce using rule 66 (exp -> STRING .)
    GT              reduce using rule 66 (exp -> STRING .)
    LT              reduce using rule 66 (exp -> STRING .)
    GTE             reduce using rule 66 (exp -> STRING .)
    LTE             reduce using rule 66 (exp -> STRING .)
    EE              reduce using rule 66 (exp -> STRING .)
    NE              reduce using rule 66 (exp -> STRING .)
    RPAREN          reduce using rule 66 (exp -> STRING .)
    SEMICOL         reduce using rule 66 (exp -> STRING .)
    error           reduce using rule 66 (exp -> STRING .)
    THEN            reduce using rule 66 (exp -> STRING .)
    COMMA           reduce using rule 66 (exp -> STRING .)
    RBRACK          reduce using rule 66 (exp -> STRING .)
    SEP             reduce using rule 66 (exp -> STRING .)
    TO              reduce using rule 66 (exp -> STRING .)
    UNTIL           reduce using rule 66 (exp -> STRING .)
    LBRACE          reduce using rule 66 (exp -> STRING .)


state 29

    (67) exp -> CHAR .

    DEC             reduce using rule 67 (exp -> CHAR .)
    INC             reduce using rule 67 (exp -> CHAR .)
    PLUS            reduce using rule 67 (exp -> CHAR .)
    MINUS           reduce using rule 67 (exp -> CHAR .)
    MULTIPLY        reduce using rule 67 (exp -> CHAR .)
    DIVIDE          reduce using rule 67 (exp -> CHAR .)
    POWER           reduce using rule 67 (exp -> CHAR .)
    MODULUS         reduce using rule 67 (exp -> CHAR .)
    AND             reduce using rule 67 (exp -> CHAR .)
    OR              reduce using rule 67 (exp -> CHAR .)
    GT              reduce using rule 67 (exp -> CHAR .)
    LT              reduce using rule 67 (exp -> CHAR .)
    GTE             reduce using rule 67 (exp -> CHAR .)
    LTE             reduce using rule 67 (exp -> CHAR .)
    EE              reduce using rule 67 (exp -> CHAR .)
    NE              reduce using rule 67 (exp -> CHAR .)
    RPAREN          reduce using rule 67 (exp -> CHAR .)
    SEMICOL         reduce using rule 67 (exp -> CHAR .)
    error           reduce using rule 67 (exp -> CHAR .)
    THEN            reduce using rule 67 (exp -> CHAR .)
    COMMA           reduce using rule 67 (exp -> CHAR .)
    RBRACK          reduce using rule 67 (exp -> CHAR .)
    SEP             reduce using rule 67 (exp -> CHAR .)
    TO              reduce using rule 67 (exp -> CHAR .)
    UNTIL           reduce using rule 67 (exp -> CHAR .)
    LBRACE          reduce using rule 67 (exp -> CHAR .)


state 30

    (45) list -> LBRACK . optargs RBRACK
    (13) optargs -> . args
    (14) optargs -> .
    (15) args -> . exp COMMA args
    (16) args -> . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    RBRACK          reduce using rule 14 (optargs -> .)
    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    optargs                        shift and go to state 75
    args                           shift and go to state 76
    exp                            shift and go to state 77
    list                           shift and go to state 23

state 31

    (1) uz -> line uz .

    $end            reduce using rule 1 (uz -> line uz .)


state 32

    (2) line -> stmt SEMICOL .

    error           reduce using rule 2 (line -> stmt SEMICOL .)
    CALL            reduce using rule 2 (line -> stmt SEMICOL .)
    RETURN          reduce using rule 2 (line -> stmt SEMICOL .)
    FUNCTION        reduce using rule 2 (line -> stmt SEMICOL .)
    NAME            reduce using rule 2 (line -> stmt SEMICOL .)
    STRUCT          reduce using rule 2 (line -> stmt SEMICOL .)
    MAKE            reduce using rule 2 (line -> stmt SEMICOL .)
    IF              reduce using rule 2 (line -> stmt SEMICOL .)
    BREAK           reduce using rule 2 (line -> stmt SEMICOL .)
    CONTINUE        reduce using rule 2 (line -> stmt SEMICOL .)
    DO              reduce using rule 2 (line -> stmt SEMICOL .)
    FOR             reduce using rule 2 (line -> stmt SEMICOL .)
    PRINT           reduce using rule 2 (line -> stmt SEMICOL .)
    NOT             reduce using rule 2 (line -> stmt SEMICOL .)
    DEC             reduce using rule 2 (line -> stmt SEMICOL .)
    INC             reduce using rule 2 (line -> stmt SEMICOL .)
    MINUS           reduce using rule 2 (line -> stmt SEMICOL .)
    INT             reduce using rule 2 (line -> stmt SEMICOL .)
    FLOAT           reduce using rule 2 (line -> stmt SEMICOL .)
    TRUE            reduce using rule 2 (line -> stmt SEMICOL .)
    FALSE           reduce using rule 2 (line -> stmt SEMICOL .)
    STRING          reduce using rule 2 (line -> stmt SEMICOL .)
    CHAR            reduce using rule 2 (line -> stmt SEMICOL .)
    LPAREN          reduce using rule 2 (line -> stmt SEMICOL .)
    LBRACK          reduce using rule 2 (line -> stmt SEMICOL .)
    $end            reduce using rule 2 (line -> stmt SEMICOL .)


state 33

    (4) line -> stmt error .

    error           reduce using rule 4 (line -> stmt error .)
    CALL            reduce using rule 4 (line -> stmt error .)
    RETURN          reduce using rule 4 (line -> stmt error .)
    FUNCTION        reduce using rule 4 (line -> stmt error .)
    NAME            reduce using rule 4 (line -> stmt error .)
    STRUCT          reduce using rule 4 (line -> stmt error .)
    MAKE            reduce using rule 4 (line -> stmt error .)
    IF              reduce using rule 4 (line -> stmt error .)
    BREAK           reduce using rule 4 (line -> stmt error .)
    CONTINUE        reduce using rule 4 (line -> stmt error .)
    DO              reduce using rule 4 (line -> stmt error .)
    FOR             reduce using rule 4 (line -> stmt error .)
    PRINT           reduce using rule 4 (line -> stmt error .)
    NOT             reduce using rule 4 (line -> stmt error .)
    DEC             reduce using rule 4 (line -> stmt error .)
    INC             reduce using rule 4 (line -> stmt error .)
    MINUS           reduce using rule 4 (line -> stmt error .)
    INT             reduce using rule 4 (line -> stmt error .)
    FLOAT           reduce using rule 4 (line -> stmt error .)
    TRUE            reduce using rule 4 (line -> stmt error .)
    FALSE           reduce using rule 4 (line -> stmt error .)
    STRING          reduce using rule 4 (line -> stmt error .)
    CHAR            reduce using rule 4 (line -> stmt error .)
    LPAREN          reduce using rule 4 (line -> stmt error .)
    LBRACK          reduce using rule 4 (line -> stmt error .)
    $end            reduce using rule 4 (line -> stmt error .)


state 34

    (3) line -> error SEMICOL .

    error           reduce using rule 3 (line -> error SEMICOL .)
    CALL            reduce using rule 3 (line -> error SEMICOL .)
    RETURN          reduce using rule 3 (line -> error SEMICOL .)
    FUNCTION        reduce using rule 3 (line -> error SEMICOL .)
    NAME            reduce using rule 3 (line -> error SEMICOL .)
    STRUCT          reduce using rule 3 (line -> error SEMICOL .)
    MAKE            reduce using rule 3 (line -> error SEMICOL .)
    IF              reduce using rule 3 (line -> error SEMICOL .)
    BREAK           reduce using rule 3 (line -> error SEMICOL .)
    CONTINUE        reduce using rule 3 (line -> error SEMICOL .)
    DO              reduce using rule 3 (line -> error SEMICOL .)
    FOR             reduce using rule 3 (line -> error SEMICOL .)
    PRINT           reduce using rule 3 (line -> error SEMICOL .)
    NOT             reduce using rule 3 (line -> error SEMICOL .)
    DEC             reduce using rule 3 (line -> error SEMICOL .)
    INC             reduce using rule 3 (line -> error SEMICOL .)
    MINUS           reduce using rule 3 (line -> error SEMICOL .)
    INT             reduce using rule 3 (line -> error SEMICOL .)
    FLOAT           reduce using rule 3 (line -> error SEMICOL .)
    TRUE            reduce using rule 3 (line -> error SEMICOL .)
    FALSE           reduce using rule 3 (line -> error SEMICOL .)
    STRING          reduce using rule 3 (line -> error SEMICOL .)
    CHAR            reduce using rule 3 (line -> error SEMICOL .)
    LPAREN          reduce using rule 3 (line -> error SEMICOL .)
    LBRACK          reduce using rule 3 (line -> error SEMICOL .)
    $end            reduce using rule 3 (line -> error SEMICOL .)


state 35

    (36) stmt -> CALL NAME . LPAREN optargs RPAREN

    LPAREN          shift and go to state 78


state 36

    (46) stmt -> NAME DOT . POP LPAREN exp RPAREN
    (47) stmt -> NAME DOT . PUSH LPAREN exp RPAREN
    (56) stmt -> NAME DOT . NAME EQUAL exp
    (48) exp -> NAME DOT . INDEX LPAREN exp RPAREN
    (49) exp -> NAME DOT . SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> NAME DOT . NAME

    POP             shift and go to state 80
    PUSH            shift and go to state 81
    NAME            shift and go to state 79
    INDEX           shift and go to state 82
    SLICE           shift and go to state 83


state 37

    (35) exp -> NAME LPAREN . optargs RPAREN
    (13) optargs -> . args
    (14) optargs -> .
    (15) args -> . exp COMMA args
    (16) args -> . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    RPAREN          reduce using rule 14 (optargs -> .)
    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    optargs                        shift and go to state 84
    args                           shift and go to state 76
    exp                            shift and go to state 77
    list                           shift and go to state 23

state 38

    (71) stmt -> NAME EQUAL . exp
    (72) stmt -> NAME EQUAL . error
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    error           shift and go to state 86
    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    LBRACK          shift and go to state 30

    exp                            shift and go to state 85
    list                           shift and go to state 23

state 39

    (68) exp -> LPAREN exp . RPAREN
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    RPAREN          shift and go to state 87
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 40

    (34) exp -> NAME .
    (35) exp -> NAME . LPAREN optargs RPAREN
    (48) exp -> NAME . DOT INDEX LPAREN exp RPAREN
    (49) exp -> NAME . DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> NAME . DOT NAME

    RPAREN          reduce using rule 34 (exp -> NAME .)
    PLUS            reduce using rule 34 (exp -> NAME .)
    MINUS           reduce using rule 34 (exp -> NAME .)
    MULTIPLY        reduce using rule 34 (exp -> NAME .)
    DIVIDE          reduce using rule 34 (exp -> NAME .)
    POWER           reduce using rule 34 (exp -> NAME .)
    MODULUS         reduce using rule 34 (exp -> NAME .)
    AND             reduce using rule 34 (exp -> NAME .)
    OR              reduce using rule 34 (exp -> NAME .)
    GT              reduce using rule 34 (exp -> NAME .)
    LT              reduce using rule 34 (exp -> NAME .)
    GTE             reduce using rule 34 (exp -> NAME .)
    LTE             reduce using rule 34 (exp -> NAME .)
    EE              reduce using rule 34 (exp -> NAME .)
    NE              reduce using rule 34 (exp -> NAME .)
    SEMICOL         reduce using rule 34 (exp -> NAME .)
    error           reduce using rule 34 (exp -> NAME .)
    DEC             reduce using rule 34 (exp -> NAME .)
    INC             reduce using rule 34 (exp -> NAME .)
    THEN            reduce using rule 34 (exp -> NAME .)
    COMMA           reduce using rule 34 (exp -> NAME .)
    RBRACK          reduce using rule 34 (exp -> NAME .)
    SEP             reduce using rule 34 (exp -> NAME .)
    TO              reduce using rule 34 (exp -> NAME .)
    UNTIL           reduce using rule 34 (exp -> NAME .)
    LBRACE          reduce using rule 34 (exp -> NAME .)
    LPAREN          shift and go to state 37
    DOT             shift and go to state 88


state 41

    (69) exp -> error .

    RPAREN          reduce using rule 69 (exp -> error .)
    PLUS            reduce using rule 69 (exp -> error .)
    MINUS           reduce using rule 69 (exp -> error .)
    MULTIPLY        reduce using rule 69 (exp -> error .)
    DIVIDE          reduce using rule 69 (exp -> error .)
    POWER           reduce using rule 69 (exp -> error .)
    MODULUS         reduce using rule 69 (exp -> error .)
    AND             reduce using rule 69 (exp -> error .)
    OR              reduce using rule 69 (exp -> error .)
    GT              reduce using rule 69 (exp -> error .)
    LT              reduce using rule 69 (exp -> error .)
    GTE             reduce using rule 69 (exp -> error .)
    LTE             reduce using rule 69 (exp -> error .)
    EE              reduce using rule 69 (exp -> error .)
    NE              reduce using rule 69 (exp -> error .)
    SEMICOL         reduce using rule 69 (exp -> error .)
    error           reduce using rule 69 (exp -> error .)
    DEC             reduce using rule 69 (exp -> error .)
    INC             reduce using rule 69 (exp -> error .)
    THEN            reduce using rule 69 (exp -> error .)
    COMMA           reduce using rule 69 (exp -> error .)
    RBRACK          reduce using rule 69 (exp -> error .)
    SEP             reduce using rule 69 (exp -> error .)
    TO              reduce using rule 69 (exp -> error .)
    UNTIL           reduce using rule 69 (exp -> error .)
    LBRACE          reduce using rule 69 (exp -> error .)


state 42

    (37) stmt -> RETURN exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    SEMICOL         reduce using rule 37 (stmt -> RETURN exp .)
    error           reduce using rule 37 (stmt -> RETURN exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 43

    (62) stmt -> exp DEC .

    SEMICOL         reduce using rule 62 (stmt -> exp DEC .)
    error           reduce using rule 62 (stmt -> exp DEC .)


state 44

    (63) stmt -> exp INC .

    SEMICOL         reduce using rule 63 (stmt -> exp INC .)
    error           reduce using rule 63 (stmt -> exp INC .)


state 45

    (20) exp -> exp PLUS . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 89
    list                           shift and go to state 23

state 46

    (21) exp -> exp MINUS . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 90
    list                           shift and go to state 23

state 47

    (22) exp -> exp MULTIPLY . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 91
    list                           shift and go to state 23

state 48

    (23) exp -> exp DIVIDE . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 92
    list                           shift and go to state 23

state 49

    (24) exp -> exp POWER . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 93
    list                           shift and go to state 23

state 50

    (25) exp -> exp MODULUS . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 94
    list                           shift and go to state 23

state 51

    (26) exp -> exp AND . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 95
    list                           shift and go to state 23

state 52

    (27) exp -> exp OR . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 96
    list                           shift and go to state 23

state 53

    (28) exp -> exp GT . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 97
    list                           shift and go to state 23

state 54

    (29) exp -> exp LT . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 98
    list                           shift and go to state 23

state 55

    (30) exp -> exp GTE . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 99
    list                           shift and go to state 23

state 56

    (31) exp -> exp LTE . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 100
    list                           shift and go to state 23

state 57

    (32) exp -> exp EE . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 101
    list                           shift and go to state 23

state 58

    (33) exp -> exp NE . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 102
    list                           shift and go to state 23

state 59

    (38) stmt -> FUNCTION NAME . LPAREN funcargs RPAREN stmtblock

    LPAREN          shift and go to state 103


state 60

    (50) stmt -> STRUCT NAME . SEP structargs SEP

    SEP             shift and go to state 104


state 61

    (55) stmt -> MAKE NAME . NAME
    (53) structexp -> NAME .
    (54) structexp -> NAME . EQUAL exp

    NAME            shift and go to state 105
    COMMA           reduce using rule 53 (structexp -> NAME .)
    SEMICOL         reduce using rule 53 (structexp -> NAME .)
    error           reduce using rule 53 (structexp -> NAME .)
    EQUAL           shift and go to state 106


state 62

    (70) stmt -> MAKE structargs .

    SEMICOL         reduce using rule 70 (stmt -> MAKE structargs .)
    error           reduce using rule 70 (stmt -> MAKE structargs .)


state 63

    (51) structargs -> structexp . COMMA structargs
    (52) structargs -> structexp .

    COMMA           shift and go to state 107
    SEMICOL         reduce using rule 52 (structargs -> structexp .)
    error           reduce using rule 52 (structargs -> structexp .)
    SEP             reduce using rule 52 (structargs -> structexp .)


state 64

    (18) exp -> DEC exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    DEC             reduce using rule 18 (exp -> DEC exp .)
    INC             reduce using rule 18 (exp -> DEC exp .)
    POWER           reduce using rule 18 (exp -> DEC exp .)
    MODULUS         reduce using rule 18 (exp -> DEC exp .)
    RPAREN          reduce using rule 18 (exp -> DEC exp .)
    SEMICOL         reduce using rule 18 (exp -> DEC exp .)
    error           reduce using rule 18 (exp -> DEC exp .)
    THEN            reduce using rule 18 (exp -> DEC exp .)
    COMMA           reduce using rule 18 (exp -> DEC exp .)
    RBRACK          reduce using rule 18 (exp -> DEC exp .)
    SEP             reduce using rule 18 (exp -> DEC exp .)
    TO              reduce using rule 18 (exp -> DEC exp .)
    UNTIL           reduce using rule 18 (exp -> DEC exp .)
    LBRACE          reduce using rule 18 (exp -> DEC exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58

  ! PLUS            [ reduce using rule 18 (exp -> DEC exp .) ]
  ! MINUS           [ reduce using rule 18 (exp -> DEC exp .) ]
  ! MULTIPLY        [ reduce using rule 18 (exp -> DEC exp .) ]
  ! DIVIDE          [ reduce using rule 18 (exp -> DEC exp .) ]
  ! AND             [ reduce using rule 18 (exp -> DEC exp .) ]
  ! OR              [ reduce using rule 18 (exp -> DEC exp .) ]
  ! GT              [ reduce using rule 18 (exp -> DEC exp .) ]
  ! LT              [ reduce using rule 18 (exp -> DEC exp .) ]
  ! GTE             [ reduce using rule 18 (exp -> DEC exp .) ]
  ! LTE             [ reduce using rule 18 (exp -> DEC exp .) ]
  ! EE              [ reduce using rule 18 (exp -> DEC exp .) ]
  ! NE              [ reduce using rule 18 (exp -> DEC exp .) ]
  ! POWER           [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 50 ]


state 65

    (19) exp -> INC exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    DEC             reduce using rule 19 (exp -> INC exp .)
    INC             reduce using rule 19 (exp -> INC exp .)
    POWER           reduce using rule 19 (exp -> INC exp .)
    MODULUS         reduce using rule 19 (exp -> INC exp .)
    RPAREN          reduce using rule 19 (exp -> INC exp .)
    SEMICOL         reduce using rule 19 (exp -> INC exp .)
    error           reduce using rule 19 (exp -> INC exp .)
    THEN            reduce using rule 19 (exp -> INC exp .)
    COMMA           reduce using rule 19 (exp -> INC exp .)
    RBRACK          reduce using rule 19 (exp -> INC exp .)
    SEP             reduce using rule 19 (exp -> INC exp .)
    TO              reduce using rule 19 (exp -> INC exp .)
    UNTIL           reduce using rule 19 (exp -> INC exp .)
    LBRACE          reduce using rule 19 (exp -> INC exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58

  ! PLUS            [ reduce using rule 19 (exp -> INC exp .) ]
  ! MINUS           [ reduce using rule 19 (exp -> INC exp .) ]
  ! MULTIPLY        [ reduce using rule 19 (exp -> INC exp .) ]
  ! DIVIDE          [ reduce using rule 19 (exp -> INC exp .) ]
  ! AND             [ reduce using rule 19 (exp -> INC exp .) ]
  ! OR              [ reduce using rule 19 (exp -> INC exp .) ]
  ! GT              [ reduce using rule 19 (exp -> INC exp .) ]
  ! LT              [ reduce using rule 19 (exp -> INC exp .) ]
  ! GTE             [ reduce using rule 19 (exp -> INC exp .) ]
  ! LTE             [ reduce using rule 19 (exp -> INC exp .) ]
  ! EE              [ reduce using rule 19 (exp -> INC exp .) ]
  ! NE              [ reduce using rule 19 (exp -> INC exp .) ]
  ! POWER           [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 50 ]


state 66

    (73) stmt -> IF exp . THEN stmtblock
    (74) stmt -> IF exp . THEN stmtblock elsif ELSE THEN stmtblock
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    THEN            shift and go to state 108
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 67

    (79) stmt -> DO stmtblock . WHILE exp

    WHILE           shift and go to state 109


state 68

    (6) stmtblock -> LBRACE . stmtS RBRACE
    (8) stmtblock -> LBRACE . stmtS error
    (9) stmtblock -> LBRACE . error RBRACE
    (10) stmtS -> . stmt SEMICOL stmtS
    (11) stmtS -> . stmt error stmtS
    (12) stmtS -> .
    (36) stmt -> . CALL NAME LPAREN optargs RPAREN
    (37) stmt -> . RETURN exp
    (38) stmt -> . FUNCTION NAME LPAREN funcargs RPAREN stmtblock
    (46) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (47) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (50) stmt -> . STRUCT NAME SEP structargs SEP
    (55) stmt -> . MAKE NAME NAME
    (56) stmt -> . NAME DOT NAME EQUAL exp
    (62) stmt -> . exp DEC
    (63) stmt -> . exp INC
    (70) stmt -> . MAKE structargs
    (71) stmt -> . NAME EQUAL exp
    (72) stmt -> . NAME EQUAL error
    (73) stmt -> . IF exp THEN stmtblock
    (74) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (77) stmt -> . BREAK
    (78) stmt -> . CONTINUE
    (79) stmt -> . DO stmtblock WHILE exp
    (80) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (83) stmt -> . PRINT LPAREN optargs RPAREN
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

  ! shift/reduce conflict for error resolved as shift
    error           shift and go to state 111
    RBRACE          reduce using rule 12 (stmtS -> .)
    CALL            shift and go to state 5
    RETURN          shift and go to state 8
    FUNCTION        shift and go to state 10
    NAME            shift and go to state 6
    STRUCT          shift and go to state 11
    MAKE            shift and go to state 12
    IF              shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PRINT           shift and go to state 20
    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    LBRACK          shift and go to state 30

  ! error           [ reduce using rule 12 (stmtS -> .) ]

    stmtS                          shift and go to state 110
    stmt                           shift and go to state 112
    exp                            shift and go to state 9
    list                           shift and go to state 23

state 69

    (7) stmtblock -> error . stmtS RBRACE
    (10) stmtS -> . stmt SEMICOL stmtS
    (11) stmtS -> . stmt error stmtS
    (12) stmtS -> .
    (36) stmt -> . CALL NAME LPAREN optargs RPAREN
    (37) stmt -> . RETURN exp
    (38) stmt -> . FUNCTION NAME LPAREN funcargs RPAREN stmtblock
    (46) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (47) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (50) stmt -> . STRUCT NAME SEP structargs SEP
    (55) stmt -> . MAKE NAME NAME
    (56) stmt -> . NAME DOT NAME EQUAL exp
    (62) stmt -> . exp DEC
    (63) stmt -> . exp INC
    (70) stmt -> . MAKE structargs
    (71) stmt -> . NAME EQUAL exp
    (72) stmt -> . NAME EQUAL error
    (73) stmt -> . IF exp THEN stmtblock
    (74) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (77) stmt -> . BREAK
    (78) stmt -> . CONTINUE
    (79) stmt -> . DO stmtblock WHILE exp
    (80) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (83) stmt -> . PRINT LPAREN optargs RPAREN
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    RBRACE          reduce using rule 12 (stmtS -> .)
    CALL            shift and go to state 5
    RETURN          shift and go to state 8
    FUNCTION        shift and go to state 10
    NAME            shift and go to state 6
    STRUCT          shift and go to state 11
    MAKE            shift and go to state 12
    IF              shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PRINT           shift and go to state 20
    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    stmtS                          shift and go to state 113
    stmt                           shift and go to state 112
    exp                            shift and go to state 9
    list                           shift and go to state 23

state 70

    (80) stmt -> FOR NAME . EQUAL exp TO exp UNTIL step stmtblock

    EQUAL           shift and go to state 114


state 71

    (83) stmt -> PRINT LPAREN . optargs RPAREN
    (13) optargs -> . args
    (14) optargs -> .
    (15) args -> . exp COMMA args
    (16) args -> . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    RPAREN          reduce using rule 14 (optargs -> .)
    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    optargs                        shift and go to state 115
    args                           shift and go to state 76
    exp                            shift and go to state 77
    list                           shift and go to state 23

state 72

    (17) exp -> NOT exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    DEC             reduce using rule 17 (exp -> NOT exp .)
    INC             reduce using rule 17 (exp -> NOT exp .)
    PLUS            reduce using rule 17 (exp -> NOT exp .)
    MINUS           reduce using rule 17 (exp -> NOT exp .)
    MULTIPLY        reduce using rule 17 (exp -> NOT exp .)
    DIVIDE          reduce using rule 17 (exp -> NOT exp .)
    POWER           reduce using rule 17 (exp -> NOT exp .)
    MODULUS         reduce using rule 17 (exp -> NOT exp .)
    AND             reduce using rule 17 (exp -> NOT exp .)
    OR              reduce using rule 17 (exp -> NOT exp .)
    GT              reduce using rule 17 (exp -> NOT exp .)
    LT              reduce using rule 17 (exp -> NOT exp .)
    GTE             reduce using rule 17 (exp -> NOT exp .)
    LTE             reduce using rule 17 (exp -> NOT exp .)
    EE              reduce using rule 17 (exp -> NOT exp .)
    NE              reduce using rule 17 (exp -> NOT exp .)
    RPAREN          reduce using rule 17 (exp -> NOT exp .)
    SEMICOL         reduce using rule 17 (exp -> NOT exp .)
    error           reduce using rule 17 (exp -> NOT exp .)
    THEN            reduce using rule 17 (exp -> NOT exp .)
    COMMA           reduce using rule 17 (exp -> NOT exp .)
    RBRACK          reduce using rule 17 (exp -> NOT exp .)
    SEP             reduce using rule 17 (exp -> NOT exp .)
    TO              reduce using rule 17 (exp -> NOT exp .)
    UNTIL           reduce using rule 17 (exp -> NOT exp .)
    LBRACE          reduce using rule 17 (exp -> NOT exp .)

  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]
  ! MULTIPLY        [ shift and go to state 47 ]
  ! DIVIDE          [ shift and go to state 48 ]
  ! POWER           [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GTE             [ shift and go to state 55 ]
  ! LTE             [ shift and go to state 56 ]
  ! EE              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 73

    (58) exp -> MINUS INT .

    DEC             reduce using rule 58 (exp -> MINUS INT .)
    INC             reduce using rule 58 (exp -> MINUS INT .)
    PLUS            reduce using rule 58 (exp -> MINUS INT .)
    MINUS           reduce using rule 58 (exp -> MINUS INT .)
    MULTIPLY        reduce using rule 58 (exp -> MINUS INT .)
    DIVIDE          reduce using rule 58 (exp -> MINUS INT .)
    POWER           reduce using rule 58 (exp -> MINUS INT .)
    MODULUS         reduce using rule 58 (exp -> MINUS INT .)
    AND             reduce using rule 58 (exp -> MINUS INT .)
    OR              reduce using rule 58 (exp -> MINUS INT .)
    GT              reduce using rule 58 (exp -> MINUS INT .)
    LT              reduce using rule 58 (exp -> MINUS INT .)
    GTE             reduce using rule 58 (exp -> MINUS INT .)
    LTE             reduce using rule 58 (exp -> MINUS INT .)
    EE              reduce using rule 58 (exp -> MINUS INT .)
    NE              reduce using rule 58 (exp -> MINUS INT .)
    RPAREN          reduce using rule 58 (exp -> MINUS INT .)
    SEMICOL         reduce using rule 58 (exp -> MINUS INT .)
    error           reduce using rule 58 (exp -> MINUS INT .)
    THEN            reduce using rule 58 (exp -> MINUS INT .)
    COMMA           reduce using rule 58 (exp -> MINUS INT .)
    RBRACK          reduce using rule 58 (exp -> MINUS INT .)
    SEP             reduce using rule 58 (exp -> MINUS INT .)
    TO              reduce using rule 58 (exp -> MINUS INT .)
    UNTIL           reduce using rule 58 (exp -> MINUS INT .)
    LBRACE          reduce using rule 58 (exp -> MINUS INT .)


state 74

    (59) exp -> MINUS FLOAT .

    DEC             reduce using rule 59 (exp -> MINUS FLOAT .)
    INC             reduce using rule 59 (exp -> MINUS FLOAT .)
    PLUS            reduce using rule 59 (exp -> MINUS FLOAT .)
    MINUS           reduce using rule 59 (exp -> MINUS FLOAT .)
    MULTIPLY        reduce using rule 59 (exp -> MINUS FLOAT .)
    DIVIDE          reduce using rule 59 (exp -> MINUS FLOAT .)
    POWER           reduce using rule 59 (exp -> MINUS FLOAT .)
    MODULUS         reduce using rule 59 (exp -> MINUS FLOAT .)
    AND             reduce using rule 59 (exp -> MINUS FLOAT .)
    OR              reduce using rule 59 (exp -> MINUS FLOAT .)
    GT              reduce using rule 59 (exp -> MINUS FLOAT .)
    LT              reduce using rule 59 (exp -> MINUS FLOAT .)
    GTE             reduce using rule 59 (exp -> MINUS FLOAT .)
    LTE             reduce using rule 59 (exp -> MINUS FLOAT .)
    EE              reduce using rule 59 (exp -> MINUS FLOAT .)
    NE              reduce using rule 59 (exp -> MINUS FLOAT .)
    RPAREN          reduce using rule 59 (exp -> MINUS FLOAT .)
    SEMICOL         reduce using rule 59 (exp -> MINUS FLOAT .)
    error           reduce using rule 59 (exp -> MINUS FLOAT .)
    THEN            reduce using rule 59 (exp -> MINUS FLOAT .)
    COMMA           reduce using rule 59 (exp -> MINUS FLOAT .)
    RBRACK          reduce using rule 59 (exp -> MINUS FLOAT .)
    SEP             reduce using rule 59 (exp -> MINUS FLOAT .)
    TO              reduce using rule 59 (exp -> MINUS FLOAT .)
    UNTIL           reduce using rule 59 (exp -> MINUS FLOAT .)
    LBRACE          reduce using rule 59 (exp -> MINUS FLOAT .)


state 75

    (45) list -> LBRACK optargs . RBRACK

    RBRACK          shift and go to state 116


state 76

    (13) optargs -> args .

    RBRACK          reduce using rule 13 (optargs -> args .)
    RPAREN          reduce using rule 13 (optargs -> args .)


state 77

    (15) args -> exp . COMMA args
    (16) args -> exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    COMMA           shift and go to state 117
    RBRACK          reduce using rule 16 (args -> exp .)
    RPAREN          reduce using rule 16 (args -> exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 78

    (36) stmt -> CALL NAME LPAREN . optargs RPAREN
    (13) optargs -> . args
    (14) optargs -> .
    (15) args -> . exp COMMA args
    (16) args -> . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    RPAREN          reduce using rule 14 (optargs -> .)
    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    optargs                        shift and go to state 118
    args                           shift and go to state 76
    exp                            shift and go to state 77
    list                           shift and go to state 23

state 79

    (56) stmt -> NAME DOT NAME . EQUAL exp
    (57) exp -> NAME DOT NAME .

    EQUAL           shift and go to state 119
    DEC             reduce using rule 57 (exp -> NAME DOT NAME .)
    INC             reduce using rule 57 (exp -> NAME DOT NAME .)
    PLUS            reduce using rule 57 (exp -> NAME DOT NAME .)
    MINUS           reduce using rule 57 (exp -> NAME DOT NAME .)
    MULTIPLY        reduce using rule 57 (exp -> NAME DOT NAME .)
    DIVIDE          reduce using rule 57 (exp -> NAME DOT NAME .)
    POWER           reduce using rule 57 (exp -> NAME DOT NAME .)
    MODULUS         reduce using rule 57 (exp -> NAME DOT NAME .)
    AND             reduce using rule 57 (exp -> NAME DOT NAME .)
    OR              reduce using rule 57 (exp -> NAME DOT NAME .)
    GT              reduce using rule 57 (exp -> NAME DOT NAME .)
    LT              reduce using rule 57 (exp -> NAME DOT NAME .)
    GTE             reduce using rule 57 (exp -> NAME DOT NAME .)
    LTE             reduce using rule 57 (exp -> NAME DOT NAME .)
    EE              reduce using rule 57 (exp -> NAME DOT NAME .)
    NE              reduce using rule 57 (exp -> NAME DOT NAME .)


state 80

    (46) stmt -> NAME DOT POP . LPAREN exp RPAREN

    LPAREN          shift and go to state 120


state 81

    (47) stmt -> NAME DOT PUSH . LPAREN exp RPAREN

    LPAREN          shift and go to state 121


state 82

    (48) exp -> NAME DOT INDEX . LPAREN exp RPAREN

    LPAREN          shift and go to state 122


state 83

    (49) exp -> NAME DOT SLICE . LPAREN exp COMMA exp RPAREN

    LPAREN          shift and go to state 123


state 84

    (35) exp -> NAME LPAREN optargs . RPAREN

    RPAREN          shift and go to state 124


state 85

    (71) stmt -> NAME EQUAL exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    SEMICOL         reduce using rule 71 (stmt -> NAME EQUAL exp .)
    error           reduce using rule 71 (stmt -> NAME EQUAL exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 86

    (72) stmt -> NAME EQUAL error .
    (69) exp -> error .

  ! reduce/reduce conflict for SEMICOL resolved using rule 69 (exp -> error .)
  ! reduce/reduce conflict for error resolved using rule 69 (exp -> error .)
    PLUS            reduce using rule 69 (exp -> error .)
    MINUS           reduce using rule 69 (exp -> error .)
    MULTIPLY        reduce using rule 69 (exp -> error .)
    DIVIDE          reduce using rule 69 (exp -> error .)
    POWER           reduce using rule 69 (exp -> error .)
    MODULUS         reduce using rule 69 (exp -> error .)
    AND             reduce using rule 69 (exp -> error .)
    OR              reduce using rule 69 (exp -> error .)
    GT              reduce using rule 69 (exp -> error .)
    LT              reduce using rule 69 (exp -> error .)
    GTE             reduce using rule 69 (exp -> error .)
    LTE             reduce using rule 69 (exp -> error .)
    EE              reduce using rule 69 (exp -> error .)
    NE              reduce using rule 69 (exp -> error .)
    SEMICOL         reduce using rule 69 (exp -> error .)
    error           reduce using rule 69 (exp -> error .)

  ! SEMICOL         [ reduce using rule 72 (stmt -> NAME EQUAL error .) ]
  ! error           [ reduce using rule 72 (stmt -> NAME EQUAL error .) ]


state 87

    (68) exp -> LPAREN exp RPAREN .

    DEC             reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    INC             reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    MULTIPLY        reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    POWER           reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    MODULUS         reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    GT              reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    LT              reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    EE              reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    NE              reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    SEMICOL         reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    error           reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    THEN            reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    RBRACK          reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    SEP             reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    TO              reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    UNTIL           reduce using rule 68 (exp -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 68 (exp -> LPAREN exp RPAREN .)


state 88

    (48) exp -> NAME DOT . INDEX LPAREN exp RPAREN
    (49) exp -> NAME DOT . SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> NAME DOT . NAME

    INDEX           shift and go to state 82
    SLICE           shift and go to state 83
    NAME            shift and go to state 125


state 89

    (20) exp -> exp PLUS exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    DEC             reduce using rule 20 (exp -> exp PLUS exp .)
    INC             reduce using rule 20 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 20 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 20 (exp -> exp PLUS exp .)
    POWER           reduce using rule 20 (exp -> exp PLUS exp .)
    MODULUS         reduce using rule 20 (exp -> exp PLUS exp .)
    AND             reduce using rule 20 (exp -> exp PLUS exp .)
    OR              reduce using rule 20 (exp -> exp PLUS exp .)
    GT              reduce using rule 20 (exp -> exp PLUS exp .)
    LT              reduce using rule 20 (exp -> exp PLUS exp .)
    GTE             reduce using rule 20 (exp -> exp PLUS exp .)
    LTE             reduce using rule 20 (exp -> exp PLUS exp .)
    EE              reduce using rule 20 (exp -> exp PLUS exp .)
    NE              reduce using rule 20 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 20 (exp -> exp PLUS exp .)
    SEMICOL         reduce using rule 20 (exp -> exp PLUS exp .)
    error           reduce using rule 20 (exp -> exp PLUS exp .)
    THEN            reduce using rule 20 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 20 (exp -> exp PLUS exp .)
    RBRACK          reduce using rule 20 (exp -> exp PLUS exp .)
    SEP             reduce using rule 20 (exp -> exp PLUS exp .)
    TO              reduce using rule 20 (exp -> exp PLUS exp .)
    UNTIL           reduce using rule 20 (exp -> exp PLUS exp .)
    LBRACE          reduce using rule 20 (exp -> exp PLUS exp .)
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48

  ! MULTIPLY        [ reduce using rule 20 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 20 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]
  ! POWER           [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GTE             [ shift and go to state 55 ]
  ! LTE             [ shift and go to state 56 ]
  ! EE              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 90

    (21) exp -> exp MINUS exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    DEC             reduce using rule 21 (exp -> exp MINUS exp .)
    INC             reduce using rule 21 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 21 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 21 (exp -> exp MINUS exp .)
    POWER           reduce using rule 21 (exp -> exp MINUS exp .)
    MODULUS         reduce using rule 21 (exp -> exp MINUS exp .)
    AND             reduce using rule 21 (exp -> exp MINUS exp .)
    OR              reduce using rule 21 (exp -> exp MINUS exp .)
    GT              reduce using rule 21 (exp -> exp MINUS exp .)
    LT              reduce using rule 21 (exp -> exp MINUS exp .)
    GTE             reduce using rule 21 (exp -> exp MINUS exp .)
    LTE             reduce using rule 21 (exp -> exp MINUS exp .)
    EE              reduce using rule 21 (exp -> exp MINUS exp .)
    NE              reduce using rule 21 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 21 (exp -> exp MINUS exp .)
    SEMICOL         reduce using rule 21 (exp -> exp MINUS exp .)
    error           reduce using rule 21 (exp -> exp MINUS exp .)
    THEN            reduce using rule 21 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 21 (exp -> exp MINUS exp .)
    RBRACK          reduce using rule 21 (exp -> exp MINUS exp .)
    SEP             reduce using rule 21 (exp -> exp MINUS exp .)
    TO              reduce using rule 21 (exp -> exp MINUS exp .)
    UNTIL           reduce using rule 21 (exp -> exp MINUS exp .)
    LBRACE          reduce using rule 21 (exp -> exp MINUS exp .)
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48

  ! MULTIPLY        [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 21 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]
  ! POWER           [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GTE             [ shift and go to state 55 ]
  ! LTE             [ shift and go to state 56 ]
  ! EE              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 91

    (22) exp -> exp MULTIPLY exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    DEC             reduce using rule 22 (exp -> exp MULTIPLY exp .)
    INC             reduce using rule 22 (exp -> exp MULTIPLY exp .)
    PLUS            reduce using rule 22 (exp -> exp MULTIPLY exp .)
    MINUS           reduce using rule 22 (exp -> exp MULTIPLY exp .)
    MULTIPLY        reduce using rule 22 (exp -> exp MULTIPLY exp .)
    DIVIDE          reduce using rule 22 (exp -> exp MULTIPLY exp .)
    POWER           reduce using rule 22 (exp -> exp MULTIPLY exp .)
    MODULUS         reduce using rule 22 (exp -> exp MULTIPLY exp .)
    AND             reduce using rule 22 (exp -> exp MULTIPLY exp .)
    OR              reduce using rule 22 (exp -> exp MULTIPLY exp .)
    GT              reduce using rule 22 (exp -> exp MULTIPLY exp .)
    LT              reduce using rule 22 (exp -> exp MULTIPLY exp .)
    GTE             reduce using rule 22 (exp -> exp MULTIPLY exp .)
    LTE             reduce using rule 22 (exp -> exp MULTIPLY exp .)
    EE              reduce using rule 22 (exp -> exp MULTIPLY exp .)
    NE              reduce using rule 22 (exp -> exp MULTIPLY exp .)
    RPAREN          reduce using rule 22 (exp -> exp MULTIPLY exp .)
    SEMICOL         reduce using rule 22 (exp -> exp MULTIPLY exp .)
    error           reduce using rule 22 (exp -> exp MULTIPLY exp .)
    THEN            reduce using rule 22 (exp -> exp MULTIPLY exp .)
    COMMA           reduce using rule 22 (exp -> exp MULTIPLY exp .)
    RBRACK          reduce using rule 22 (exp -> exp MULTIPLY exp .)
    SEP             reduce using rule 22 (exp -> exp MULTIPLY exp .)
    TO              reduce using rule 22 (exp -> exp MULTIPLY exp .)
    UNTIL           reduce using rule 22 (exp -> exp MULTIPLY exp .)
    LBRACE          reduce using rule 22 (exp -> exp MULTIPLY exp .)

  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]
  ! MULTIPLY        [ shift and go to state 47 ]
  ! DIVIDE          [ shift and go to state 48 ]
  ! POWER           [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GTE             [ shift and go to state 55 ]
  ! LTE             [ shift and go to state 56 ]
  ! EE              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 92

    (23) exp -> exp DIVIDE exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    DEC             reduce using rule 23 (exp -> exp DIVIDE exp .)
    INC             reduce using rule 23 (exp -> exp DIVIDE exp .)
    PLUS            reduce using rule 23 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 23 (exp -> exp DIVIDE exp .)
    MULTIPLY        reduce using rule 23 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 23 (exp -> exp DIVIDE exp .)
    POWER           reduce using rule 23 (exp -> exp DIVIDE exp .)
    MODULUS         reduce using rule 23 (exp -> exp DIVIDE exp .)
    AND             reduce using rule 23 (exp -> exp DIVIDE exp .)
    OR              reduce using rule 23 (exp -> exp DIVIDE exp .)
    GT              reduce using rule 23 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 23 (exp -> exp DIVIDE exp .)
    GTE             reduce using rule 23 (exp -> exp DIVIDE exp .)
    LTE             reduce using rule 23 (exp -> exp DIVIDE exp .)
    EE              reduce using rule 23 (exp -> exp DIVIDE exp .)
    NE              reduce using rule 23 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 23 (exp -> exp DIVIDE exp .)
    SEMICOL         reduce using rule 23 (exp -> exp DIVIDE exp .)
    error           reduce using rule 23 (exp -> exp DIVIDE exp .)
    THEN            reduce using rule 23 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 23 (exp -> exp DIVIDE exp .)
    RBRACK          reduce using rule 23 (exp -> exp DIVIDE exp .)
    SEP             reduce using rule 23 (exp -> exp DIVIDE exp .)
    TO              reduce using rule 23 (exp -> exp DIVIDE exp .)
    UNTIL           reduce using rule 23 (exp -> exp DIVIDE exp .)
    LBRACE          reduce using rule 23 (exp -> exp DIVIDE exp .)

  ! PLUS            [ shift and go to state 45 ]
  ! MINUS           [ shift and go to state 46 ]
  ! MULTIPLY        [ shift and go to state 47 ]
  ! DIVIDE          [ shift and go to state 48 ]
  ! POWER           [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GTE             [ shift and go to state 55 ]
  ! LTE             [ shift and go to state 56 ]
  ! EE              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 93

    (24) exp -> exp POWER exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    DEC             reduce using rule 24 (exp -> exp POWER exp .)
    INC             reduce using rule 24 (exp -> exp POWER exp .)
    RPAREN          reduce using rule 24 (exp -> exp POWER exp .)
    SEMICOL         reduce using rule 24 (exp -> exp POWER exp .)
    error           reduce using rule 24 (exp -> exp POWER exp .)
    THEN            reduce using rule 24 (exp -> exp POWER exp .)
    COMMA           reduce using rule 24 (exp -> exp POWER exp .)
    RBRACK          reduce using rule 24 (exp -> exp POWER exp .)
    SEP             reduce using rule 24 (exp -> exp POWER exp .)
    TO              reduce using rule 24 (exp -> exp POWER exp .)
    UNTIL           reduce using rule 24 (exp -> exp POWER exp .)
    LBRACE          reduce using rule 24 (exp -> exp POWER exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58

  ! PLUS            [ reduce using rule 24 (exp -> exp POWER exp .) ]
  ! MINUS           [ reduce using rule 24 (exp -> exp POWER exp .) ]
  ! MULTIPLY        [ reduce using rule 24 (exp -> exp POWER exp .) ]
  ! DIVIDE          [ reduce using rule 24 (exp -> exp POWER exp .) ]
  ! POWER           [ reduce using rule 24 (exp -> exp POWER exp .) ]
  ! MODULUS         [ reduce using rule 24 (exp -> exp POWER exp .) ]
  ! AND             [ reduce using rule 24 (exp -> exp POWER exp .) ]
  ! OR              [ reduce using rule 24 (exp -> exp POWER exp .) ]
  ! GT              [ reduce using rule 24 (exp -> exp POWER exp .) ]
  ! LT              [ reduce using rule 24 (exp -> exp POWER exp .) ]
  ! GTE             [ reduce using rule 24 (exp -> exp POWER exp .) ]
  ! LTE             [ reduce using rule 24 (exp -> exp POWER exp .) ]
  ! EE              [ reduce using rule 24 (exp -> exp POWER exp .) ]
  ! NE              [ reduce using rule 24 (exp -> exp POWER exp .) ]


state 94

    (25) exp -> exp MODULUS exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    DEC             reduce using rule 25 (exp -> exp MODULUS exp .)
    INC             reduce using rule 25 (exp -> exp MODULUS exp .)
    RPAREN          reduce using rule 25 (exp -> exp MODULUS exp .)
    SEMICOL         reduce using rule 25 (exp -> exp MODULUS exp .)
    error           reduce using rule 25 (exp -> exp MODULUS exp .)
    THEN            reduce using rule 25 (exp -> exp MODULUS exp .)
    COMMA           reduce using rule 25 (exp -> exp MODULUS exp .)
    RBRACK          reduce using rule 25 (exp -> exp MODULUS exp .)
    SEP             reduce using rule 25 (exp -> exp MODULUS exp .)
    TO              reduce using rule 25 (exp -> exp MODULUS exp .)
    UNTIL           reduce using rule 25 (exp -> exp MODULUS exp .)
    LBRACE          reduce using rule 25 (exp -> exp MODULUS exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58

  ! PLUS            [ reduce using rule 25 (exp -> exp MODULUS exp .) ]
  ! MINUS           [ reduce using rule 25 (exp -> exp MODULUS exp .) ]
  ! MULTIPLY        [ reduce using rule 25 (exp -> exp MODULUS exp .) ]
  ! DIVIDE          [ reduce using rule 25 (exp -> exp MODULUS exp .) ]
  ! POWER           [ reduce using rule 25 (exp -> exp MODULUS exp .) ]
  ! MODULUS         [ reduce using rule 25 (exp -> exp MODULUS exp .) ]
  ! AND             [ reduce using rule 25 (exp -> exp MODULUS exp .) ]
  ! OR              [ reduce using rule 25 (exp -> exp MODULUS exp .) ]
  ! GT              [ reduce using rule 25 (exp -> exp MODULUS exp .) ]
  ! LT              [ reduce using rule 25 (exp -> exp MODULUS exp .) ]
  ! GTE             [ reduce using rule 25 (exp -> exp MODULUS exp .) ]
  ! LTE             [ reduce using rule 25 (exp -> exp MODULUS exp .) ]
  ! EE              [ reduce using rule 25 (exp -> exp MODULUS exp .) ]
  ! NE              [ reduce using rule 25 (exp -> exp MODULUS exp .) ]


state 95

    (26) exp -> exp AND exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    DEC             reduce using rule 26 (exp -> exp AND exp .)
    INC             reduce using rule 26 (exp -> exp AND exp .)
    POWER           reduce using rule 26 (exp -> exp AND exp .)
    MODULUS         reduce using rule 26 (exp -> exp AND exp .)
    AND             reduce using rule 26 (exp -> exp AND exp .)
    OR              reduce using rule 26 (exp -> exp AND exp .)
    RPAREN          reduce using rule 26 (exp -> exp AND exp .)
    SEMICOL         reduce using rule 26 (exp -> exp AND exp .)
    error           reduce using rule 26 (exp -> exp AND exp .)
    THEN            reduce using rule 26 (exp -> exp AND exp .)
    COMMA           reduce using rule 26 (exp -> exp AND exp .)
    RBRACK          reduce using rule 26 (exp -> exp AND exp .)
    SEP             reduce using rule 26 (exp -> exp AND exp .)
    TO              reduce using rule 26 (exp -> exp AND exp .)
    UNTIL           reduce using rule 26 (exp -> exp AND exp .)
    LBRACE          reduce using rule 26 (exp -> exp AND exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58

  ! PLUS            [ reduce using rule 26 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 26 (exp -> exp AND exp .) ]
  ! MULTIPLY        [ reduce using rule 26 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 26 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 26 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 26 (exp -> exp AND exp .) ]
  ! GTE             [ reduce using rule 26 (exp -> exp AND exp .) ]
  ! LTE             [ reduce using rule 26 (exp -> exp AND exp .) ]
  ! EE              [ reduce using rule 26 (exp -> exp AND exp .) ]
  ! NE              [ reduce using rule 26 (exp -> exp AND exp .) ]
  ! POWER           [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]


state 96

    (27) exp -> exp OR exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    DEC             reduce using rule 27 (exp -> exp OR exp .)
    INC             reduce using rule 27 (exp -> exp OR exp .)
    POWER           reduce using rule 27 (exp -> exp OR exp .)
    MODULUS         reduce using rule 27 (exp -> exp OR exp .)
    OR              reduce using rule 27 (exp -> exp OR exp .)
    RPAREN          reduce using rule 27 (exp -> exp OR exp .)
    SEMICOL         reduce using rule 27 (exp -> exp OR exp .)
    error           reduce using rule 27 (exp -> exp OR exp .)
    THEN            reduce using rule 27 (exp -> exp OR exp .)
    COMMA           reduce using rule 27 (exp -> exp OR exp .)
    RBRACK          reduce using rule 27 (exp -> exp OR exp .)
    SEP             reduce using rule 27 (exp -> exp OR exp .)
    TO              reduce using rule 27 (exp -> exp OR exp .)
    UNTIL           reduce using rule 27 (exp -> exp OR exp .)
    LBRACE          reduce using rule 27 (exp -> exp OR exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    AND             shift and go to state 51
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58

  ! PLUS            [ reduce using rule 27 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 27 (exp -> exp OR exp .) ]
  ! MULTIPLY        [ reduce using rule 27 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 27 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 27 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 27 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 27 (exp -> exp OR exp .) ]
  ! GTE             [ reduce using rule 27 (exp -> exp OR exp .) ]
  ! LTE             [ reduce using rule 27 (exp -> exp OR exp .) ]
  ! EE              [ reduce using rule 27 (exp -> exp OR exp .) ]
  ! NE              [ reduce using rule 27 (exp -> exp OR exp .) ]
  ! POWER           [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 50 ]
  ! OR              [ shift and go to state 52 ]


state 97

    (28) exp -> exp GT exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    DEC             reduce using rule 28 (exp -> exp GT exp .)
    INC             reduce using rule 28 (exp -> exp GT exp .)
    POWER           reduce using rule 28 (exp -> exp GT exp .)
    MODULUS         reduce using rule 28 (exp -> exp GT exp .)
    AND             reduce using rule 28 (exp -> exp GT exp .)
    OR              reduce using rule 28 (exp -> exp GT exp .)
    GT              reduce using rule 28 (exp -> exp GT exp .)
    LT              reduce using rule 28 (exp -> exp GT exp .)
    GTE             reduce using rule 28 (exp -> exp GT exp .)
    LTE             reduce using rule 28 (exp -> exp GT exp .)
    EE              reduce using rule 28 (exp -> exp GT exp .)
    NE              reduce using rule 28 (exp -> exp GT exp .)
    RPAREN          reduce using rule 28 (exp -> exp GT exp .)
    SEMICOL         reduce using rule 28 (exp -> exp GT exp .)
    error           reduce using rule 28 (exp -> exp GT exp .)
    THEN            reduce using rule 28 (exp -> exp GT exp .)
    COMMA           reduce using rule 28 (exp -> exp GT exp .)
    RBRACK          reduce using rule 28 (exp -> exp GT exp .)
    SEP             reduce using rule 28 (exp -> exp GT exp .)
    TO              reduce using rule 28 (exp -> exp GT exp .)
    UNTIL           reduce using rule 28 (exp -> exp GT exp .)
    LBRACE          reduce using rule 28 (exp -> exp GT exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48

  ! PLUS            [ reduce using rule 28 (exp -> exp GT exp .) ]
  ! MINUS           [ reduce using rule 28 (exp -> exp GT exp .) ]
  ! MULTIPLY        [ reduce using rule 28 (exp -> exp GT exp .) ]
  ! DIVIDE          [ reduce using rule 28 (exp -> exp GT exp .) ]
  ! POWER           [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GTE             [ shift and go to state 55 ]
  ! LTE             [ shift and go to state 56 ]
  ! EE              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 98

    (29) exp -> exp LT exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    DEC             reduce using rule 29 (exp -> exp LT exp .)
    INC             reduce using rule 29 (exp -> exp LT exp .)
    POWER           reduce using rule 29 (exp -> exp LT exp .)
    MODULUS         reduce using rule 29 (exp -> exp LT exp .)
    AND             reduce using rule 29 (exp -> exp LT exp .)
    OR              reduce using rule 29 (exp -> exp LT exp .)
    GT              reduce using rule 29 (exp -> exp LT exp .)
    LT              reduce using rule 29 (exp -> exp LT exp .)
    GTE             reduce using rule 29 (exp -> exp LT exp .)
    LTE             reduce using rule 29 (exp -> exp LT exp .)
    EE              reduce using rule 29 (exp -> exp LT exp .)
    NE              reduce using rule 29 (exp -> exp LT exp .)
    RPAREN          reduce using rule 29 (exp -> exp LT exp .)
    SEMICOL         reduce using rule 29 (exp -> exp LT exp .)
    error           reduce using rule 29 (exp -> exp LT exp .)
    THEN            reduce using rule 29 (exp -> exp LT exp .)
    COMMA           reduce using rule 29 (exp -> exp LT exp .)
    RBRACK          reduce using rule 29 (exp -> exp LT exp .)
    SEP             reduce using rule 29 (exp -> exp LT exp .)
    TO              reduce using rule 29 (exp -> exp LT exp .)
    UNTIL           reduce using rule 29 (exp -> exp LT exp .)
    LBRACE          reduce using rule 29 (exp -> exp LT exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48

  ! PLUS            [ reduce using rule 29 (exp -> exp LT exp .) ]
  ! MINUS           [ reduce using rule 29 (exp -> exp LT exp .) ]
  ! MULTIPLY        [ reduce using rule 29 (exp -> exp LT exp .) ]
  ! DIVIDE          [ reduce using rule 29 (exp -> exp LT exp .) ]
  ! POWER           [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GTE             [ shift and go to state 55 ]
  ! LTE             [ shift and go to state 56 ]
  ! EE              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 99

    (30) exp -> exp GTE exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    DEC             reduce using rule 30 (exp -> exp GTE exp .)
    INC             reduce using rule 30 (exp -> exp GTE exp .)
    POWER           reduce using rule 30 (exp -> exp GTE exp .)
    MODULUS         reduce using rule 30 (exp -> exp GTE exp .)
    AND             reduce using rule 30 (exp -> exp GTE exp .)
    OR              reduce using rule 30 (exp -> exp GTE exp .)
    GT              reduce using rule 30 (exp -> exp GTE exp .)
    LT              reduce using rule 30 (exp -> exp GTE exp .)
    GTE             reduce using rule 30 (exp -> exp GTE exp .)
    LTE             reduce using rule 30 (exp -> exp GTE exp .)
    EE              reduce using rule 30 (exp -> exp GTE exp .)
    NE              reduce using rule 30 (exp -> exp GTE exp .)
    RPAREN          reduce using rule 30 (exp -> exp GTE exp .)
    SEMICOL         reduce using rule 30 (exp -> exp GTE exp .)
    error           reduce using rule 30 (exp -> exp GTE exp .)
    THEN            reduce using rule 30 (exp -> exp GTE exp .)
    COMMA           reduce using rule 30 (exp -> exp GTE exp .)
    RBRACK          reduce using rule 30 (exp -> exp GTE exp .)
    SEP             reduce using rule 30 (exp -> exp GTE exp .)
    TO              reduce using rule 30 (exp -> exp GTE exp .)
    UNTIL           reduce using rule 30 (exp -> exp GTE exp .)
    LBRACE          reduce using rule 30 (exp -> exp GTE exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48

  ! PLUS            [ reduce using rule 30 (exp -> exp GTE exp .) ]
  ! MINUS           [ reduce using rule 30 (exp -> exp GTE exp .) ]
  ! MULTIPLY        [ reduce using rule 30 (exp -> exp GTE exp .) ]
  ! DIVIDE          [ reduce using rule 30 (exp -> exp GTE exp .) ]
  ! POWER           [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GTE             [ shift and go to state 55 ]
  ! LTE             [ shift and go to state 56 ]
  ! EE              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 100

    (31) exp -> exp LTE exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    DEC             reduce using rule 31 (exp -> exp LTE exp .)
    INC             reduce using rule 31 (exp -> exp LTE exp .)
    POWER           reduce using rule 31 (exp -> exp LTE exp .)
    MODULUS         reduce using rule 31 (exp -> exp LTE exp .)
    AND             reduce using rule 31 (exp -> exp LTE exp .)
    OR              reduce using rule 31 (exp -> exp LTE exp .)
    GT              reduce using rule 31 (exp -> exp LTE exp .)
    LT              reduce using rule 31 (exp -> exp LTE exp .)
    GTE             reduce using rule 31 (exp -> exp LTE exp .)
    LTE             reduce using rule 31 (exp -> exp LTE exp .)
    EE              reduce using rule 31 (exp -> exp LTE exp .)
    NE              reduce using rule 31 (exp -> exp LTE exp .)
    RPAREN          reduce using rule 31 (exp -> exp LTE exp .)
    SEMICOL         reduce using rule 31 (exp -> exp LTE exp .)
    error           reduce using rule 31 (exp -> exp LTE exp .)
    THEN            reduce using rule 31 (exp -> exp LTE exp .)
    COMMA           reduce using rule 31 (exp -> exp LTE exp .)
    RBRACK          reduce using rule 31 (exp -> exp LTE exp .)
    SEP             reduce using rule 31 (exp -> exp LTE exp .)
    TO              reduce using rule 31 (exp -> exp LTE exp .)
    UNTIL           reduce using rule 31 (exp -> exp LTE exp .)
    LBRACE          reduce using rule 31 (exp -> exp LTE exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48

  ! PLUS            [ reduce using rule 31 (exp -> exp LTE exp .) ]
  ! MINUS           [ reduce using rule 31 (exp -> exp LTE exp .) ]
  ! MULTIPLY        [ reduce using rule 31 (exp -> exp LTE exp .) ]
  ! DIVIDE          [ reduce using rule 31 (exp -> exp LTE exp .) ]
  ! POWER           [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! GTE             [ shift and go to state 55 ]
  ! LTE             [ shift and go to state 56 ]
  ! EE              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 101

    (32) exp -> exp EE exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    DEC             reduce using rule 32 (exp -> exp EE exp .)
    INC             reduce using rule 32 (exp -> exp EE exp .)
    POWER           reduce using rule 32 (exp -> exp EE exp .)
    MODULUS         reduce using rule 32 (exp -> exp EE exp .)
    AND             reduce using rule 32 (exp -> exp EE exp .)
    OR              reduce using rule 32 (exp -> exp EE exp .)
    EE              reduce using rule 32 (exp -> exp EE exp .)
    NE              reduce using rule 32 (exp -> exp EE exp .)
    RPAREN          reduce using rule 32 (exp -> exp EE exp .)
    SEMICOL         reduce using rule 32 (exp -> exp EE exp .)
    error           reduce using rule 32 (exp -> exp EE exp .)
    THEN            reduce using rule 32 (exp -> exp EE exp .)
    COMMA           reduce using rule 32 (exp -> exp EE exp .)
    RBRACK          reduce using rule 32 (exp -> exp EE exp .)
    SEP             reduce using rule 32 (exp -> exp EE exp .)
    TO              reduce using rule 32 (exp -> exp EE exp .)
    UNTIL           reduce using rule 32 (exp -> exp EE exp .)
    LBRACE          reduce using rule 32 (exp -> exp EE exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56

  ! PLUS            [ reduce using rule 32 (exp -> exp EE exp .) ]
  ! MINUS           [ reduce using rule 32 (exp -> exp EE exp .) ]
  ! MULTIPLY        [ reduce using rule 32 (exp -> exp EE exp .) ]
  ! DIVIDE          [ reduce using rule 32 (exp -> exp EE exp .) ]
  ! GT              [ reduce using rule 32 (exp -> exp EE exp .) ]
  ! LT              [ reduce using rule 32 (exp -> exp EE exp .) ]
  ! GTE             [ reduce using rule 32 (exp -> exp EE exp .) ]
  ! LTE             [ reduce using rule 32 (exp -> exp EE exp .) ]
  ! POWER           [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! EE              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 102

    (33) exp -> exp NE exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    DEC             reduce using rule 33 (exp -> exp NE exp .)
    INC             reduce using rule 33 (exp -> exp NE exp .)
    POWER           reduce using rule 33 (exp -> exp NE exp .)
    MODULUS         reduce using rule 33 (exp -> exp NE exp .)
    AND             reduce using rule 33 (exp -> exp NE exp .)
    OR              reduce using rule 33 (exp -> exp NE exp .)
    EE              reduce using rule 33 (exp -> exp NE exp .)
    NE              reduce using rule 33 (exp -> exp NE exp .)
    RPAREN          reduce using rule 33 (exp -> exp NE exp .)
    SEMICOL         reduce using rule 33 (exp -> exp NE exp .)
    error           reduce using rule 33 (exp -> exp NE exp .)
    THEN            reduce using rule 33 (exp -> exp NE exp .)
    COMMA           reduce using rule 33 (exp -> exp NE exp .)
    RBRACK          reduce using rule 33 (exp -> exp NE exp .)
    SEP             reduce using rule 33 (exp -> exp NE exp .)
    TO              reduce using rule 33 (exp -> exp NE exp .)
    UNTIL           reduce using rule 33 (exp -> exp NE exp .)
    LBRACE          reduce using rule 33 (exp -> exp NE exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56

  ! PLUS            [ reduce using rule 33 (exp -> exp NE exp .) ]
  ! MINUS           [ reduce using rule 33 (exp -> exp NE exp .) ]
  ! MULTIPLY        [ reduce using rule 33 (exp -> exp NE exp .) ]
  ! DIVIDE          [ reduce using rule 33 (exp -> exp NE exp .) ]
  ! GT              [ reduce using rule 33 (exp -> exp NE exp .) ]
  ! LT              [ reduce using rule 33 (exp -> exp NE exp .) ]
  ! GTE             [ reduce using rule 33 (exp -> exp NE exp .) ]
  ! LTE             [ reduce using rule 33 (exp -> exp NE exp .) ]
  ! POWER           [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 50 ]
  ! AND             [ shift and go to state 51 ]
  ! OR              [ shift and go to state 52 ]
  ! EE              [ shift and go to state 57 ]
  ! NE              [ shift and go to state 58 ]


state 103

    (38) stmt -> FUNCTION NAME LPAREN . funcargs RPAREN stmtblock
    (39) funcargs -> . funcexp COMMA funcargs
    (40) funcargs -> . funcexp
    (41) funcargs -> .
    (42) funcexp -> . NAME
    (43) funcexp -> . NAME EQUAL exp

    RPAREN          reduce using rule 41 (funcargs -> .)
    NAME            shift and go to state 126

    funcargs                       shift and go to state 127
    funcexp                        shift and go to state 128

state 104

    (50) stmt -> STRUCT NAME SEP . structargs SEP
    (51) structargs -> . structexp COMMA structargs
    (52) structargs -> . structexp
    (53) structexp -> . NAME
    (54) structexp -> . NAME EQUAL exp

    NAME            shift and go to state 129

    structargs                     shift and go to state 130
    structexp                      shift and go to state 63

state 105

    (55) stmt -> MAKE NAME NAME .

    SEMICOL         reduce using rule 55 (stmt -> MAKE NAME NAME .)
    error           reduce using rule 55 (stmt -> MAKE NAME NAME .)


state 106

    (54) structexp -> NAME EQUAL . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 131
    list                           shift and go to state 23

state 107

    (51) structargs -> structexp COMMA . structargs
    (51) structargs -> . structexp COMMA structargs
    (52) structargs -> . structexp
    (53) structexp -> . NAME
    (54) structexp -> . NAME EQUAL exp

    NAME            shift and go to state 129

    structexp                      shift and go to state 63
    structargs                     shift and go to state 132

state 108

    (73) stmt -> IF exp THEN . stmtblock
    (74) stmt -> IF exp THEN . stmtblock elsif ELSE THEN stmtblock
    (6) stmtblock -> . LBRACE stmtS RBRACE
    (7) stmtblock -> . error stmtS RBRACE
    (8) stmtblock -> . LBRACE stmtS error
    (9) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 68
    error           shift and go to state 69

    stmtblock                      shift and go to state 133

state 109

    (79) stmt -> DO stmtblock WHILE . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 134
    list                           shift and go to state 23

state 110

    (6) stmtblock -> LBRACE stmtS . RBRACE
    (8) stmtblock -> LBRACE stmtS . error

    RBRACE          shift and go to state 135
    error           shift and go to state 136


state 111

    (9) stmtblock -> LBRACE error . RBRACE
    (69) exp -> error .

    RBRACE          shift and go to state 137
    DEC             reduce using rule 69 (exp -> error .)
    INC             reduce using rule 69 (exp -> error .)
    PLUS            reduce using rule 69 (exp -> error .)
    MINUS           reduce using rule 69 (exp -> error .)
    MULTIPLY        reduce using rule 69 (exp -> error .)
    DIVIDE          reduce using rule 69 (exp -> error .)
    POWER           reduce using rule 69 (exp -> error .)
    MODULUS         reduce using rule 69 (exp -> error .)
    AND             reduce using rule 69 (exp -> error .)
    OR              reduce using rule 69 (exp -> error .)
    GT              reduce using rule 69 (exp -> error .)
    LT              reduce using rule 69 (exp -> error .)
    GTE             reduce using rule 69 (exp -> error .)
    LTE             reduce using rule 69 (exp -> error .)
    EE              reduce using rule 69 (exp -> error .)
    NE              reduce using rule 69 (exp -> error .)


state 112

    (10) stmtS -> stmt . SEMICOL stmtS
    (11) stmtS -> stmt . error stmtS

    SEMICOL         shift and go to state 138
    error           shift and go to state 139


state 113

    (7) stmtblock -> error stmtS . RBRACE

    RBRACE          shift and go to state 140


state 114

    (80) stmt -> FOR NAME EQUAL . exp TO exp UNTIL step stmtblock
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 141
    list                           shift and go to state 23

state 115

    (83) stmt -> PRINT LPAREN optargs . RPAREN

    RPAREN          shift and go to state 142


state 116

    (45) list -> LBRACK optargs RBRACK .

    DEC             reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    INC             reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    PLUS            reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    MINUS           reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    MULTIPLY        reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    DIVIDE          reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    POWER           reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    MODULUS         reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    AND             reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    OR              reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    GT              reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    LT              reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    GTE             reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    LTE             reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    EE              reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    NE              reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    RPAREN          reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    SEMICOL         reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    error           reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    THEN            reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    COMMA           reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    RBRACK          reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    SEP             reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    TO              reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    UNTIL           reduce using rule 45 (list -> LBRACK optargs RBRACK .)
    LBRACE          reduce using rule 45 (list -> LBRACK optargs RBRACK .)


state 117

    (15) args -> exp COMMA . args
    (15) args -> . exp COMMA args
    (16) args -> . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 77
    args                           shift and go to state 143
    list                           shift and go to state 23

state 118

    (36) stmt -> CALL NAME LPAREN optargs . RPAREN

    RPAREN          shift and go to state 144


state 119

    (56) stmt -> NAME DOT NAME EQUAL . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 145
    list                           shift and go to state 23

state 120

    (46) stmt -> NAME DOT POP LPAREN . exp RPAREN
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 146
    list                           shift and go to state 23

state 121

    (47) stmt -> NAME DOT PUSH LPAREN . exp RPAREN
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 147
    list                           shift and go to state 23

state 122

    (48) exp -> NAME DOT INDEX LPAREN . exp RPAREN
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 148
    list                           shift and go to state 23

state 123

    (49) exp -> NAME DOT SLICE LPAREN . exp COMMA exp RPAREN
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 149
    list                           shift and go to state 23

state 124

    (35) exp -> NAME LPAREN optargs RPAREN .

    DEC             reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    INC             reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    PLUS            reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    MINUS           reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    MULTIPLY        reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    DIVIDE          reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    POWER           reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    MODULUS         reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    AND             reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    OR              reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    GT              reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    LT              reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    GTE             reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    LTE             reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    EE              reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    NE              reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    RPAREN          reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    SEMICOL         reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    error           reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    THEN            reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    COMMA           reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    RBRACK          reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    SEP             reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    TO              reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    UNTIL           reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)
    LBRACE          reduce using rule 35 (exp -> NAME LPAREN optargs RPAREN .)


state 125

    (57) exp -> NAME DOT NAME .

    RPAREN          reduce using rule 57 (exp -> NAME DOT NAME .)
    PLUS            reduce using rule 57 (exp -> NAME DOT NAME .)
    MINUS           reduce using rule 57 (exp -> NAME DOT NAME .)
    MULTIPLY        reduce using rule 57 (exp -> NAME DOT NAME .)
    DIVIDE          reduce using rule 57 (exp -> NAME DOT NAME .)
    POWER           reduce using rule 57 (exp -> NAME DOT NAME .)
    MODULUS         reduce using rule 57 (exp -> NAME DOT NAME .)
    AND             reduce using rule 57 (exp -> NAME DOT NAME .)
    OR              reduce using rule 57 (exp -> NAME DOT NAME .)
    GT              reduce using rule 57 (exp -> NAME DOT NAME .)
    LT              reduce using rule 57 (exp -> NAME DOT NAME .)
    GTE             reduce using rule 57 (exp -> NAME DOT NAME .)
    LTE             reduce using rule 57 (exp -> NAME DOT NAME .)
    EE              reduce using rule 57 (exp -> NAME DOT NAME .)
    NE              reduce using rule 57 (exp -> NAME DOT NAME .)
    SEMICOL         reduce using rule 57 (exp -> NAME DOT NAME .)
    error           reduce using rule 57 (exp -> NAME DOT NAME .)
    DEC             reduce using rule 57 (exp -> NAME DOT NAME .)
    INC             reduce using rule 57 (exp -> NAME DOT NAME .)
    THEN            reduce using rule 57 (exp -> NAME DOT NAME .)
    COMMA           reduce using rule 57 (exp -> NAME DOT NAME .)
    RBRACK          reduce using rule 57 (exp -> NAME DOT NAME .)
    SEP             reduce using rule 57 (exp -> NAME DOT NAME .)
    TO              reduce using rule 57 (exp -> NAME DOT NAME .)
    UNTIL           reduce using rule 57 (exp -> NAME DOT NAME .)
    LBRACE          reduce using rule 57 (exp -> NAME DOT NAME .)


state 126

    (42) funcexp -> NAME .
    (43) funcexp -> NAME . EQUAL exp

    COMMA           reduce using rule 42 (funcexp -> NAME .)
    RPAREN          reduce using rule 42 (funcexp -> NAME .)
    EQUAL           shift and go to state 150


state 127

    (38) stmt -> FUNCTION NAME LPAREN funcargs . RPAREN stmtblock

    RPAREN          shift and go to state 151


state 128

    (39) funcargs -> funcexp . COMMA funcargs
    (40) funcargs -> funcexp .

    COMMA           shift and go to state 152
    RPAREN          reduce using rule 40 (funcargs -> funcexp .)


state 129

    (53) structexp -> NAME .
    (54) structexp -> NAME . EQUAL exp

    COMMA           reduce using rule 53 (structexp -> NAME .)
    SEP             reduce using rule 53 (structexp -> NAME .)
    SEMICOL         reduce using rule 53 (structexp -> NAME .)
    error           reduce using rule 53 (structexp -> NAME .)
    EQUAL           shift and go to state 106


state 130

    (50) stmt -> STRUCT NAME SEP structargs . SEP

    SEP             shift and go to state 153


state 131

    (54) structexp -> NAME EQUAL exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    COMMA           reduce using rule 54 (structexp -> NAME EQUAL exp .)
    SEMICOL         reduce using rule 54 (structexp -> NAME EQUAL exp .)
    error           reduce using rule 54 (structexp -> NAME EQUAL exp .)
    SEP             reduce using rule 54 (structexp -> NAME EQUAL exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 132

    (51) structargs -> structexp COMMA structargs .

    SEMICOL         reduce using rule 51 (structargs -> structexp COMMA structargs .)
    error           reduce using rule 51 (structargs -> structexp COMMA structargs .)
    SEP             reduce using rule 51 (structargs -> structexp COMMA structargs .)


state 133

    (73) stmt -> IF exp THEN stmtblock .
    (74) stmt -> IF exp THEN stmtblock . elsif ELSE THEN stmtblock
    (75) elsif -> . ELIF exp THEN stmtblock elsif
    (76) elsif -> .

    SEMICOL         reduce using rule 73 (stmt -> IF exp THEN stmtblock .)
    error           reduce using rule 73 (stmt -> IF exp THEN stmtblock .)
    ELIF            shift and go to state 155
    ELSE            reduce using rule 76 (elsif -> .)

    elsif                          shift and go to state 154

state 134

    (79) stmt -> DO stmtblock WHILE exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    SEMICOL         reduce using rule 79 (stmt -> DO stmtblock WHILE exp .)
    error           reduce using rule 79 (stmt -> DO stmtblock WHILE exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 135

    (6) stmtblock -> LBRACE stmtS RBRACE .

    WHILE           reduce using rule 6 (stmtblock -> LBRACE stmtS RBRACE .)
    ELIF            reduce using rule 6 (stmtblock -> LBRACE stmtS RBRACE .)
    ELSE            reduce using rule 6 (stmtblock -> LBRACE stmtS RBRACE .)
    SEMICOL         reduce using rule 6 (stmtblock -> LBRACE stmtS RBRACE .)
    error           reduce using rule 6 (stmtblock -> LBRACE stmtS RBRACE .)


state 136

    (8) stmtblock -> LBRACE stmtS error .

    WHILE           reduce using rule 8 (stmtblock -> LBRACE stmtS error .)
    ELIF            reduce using rule 8 (stmtblock -> LBRACE stmtS error .)
    ELSE            reduce using rule 8 (stmtblock -> LBRACE stmtS error .)
    SEMICOL         reduce using rule 8 (stmtblock -> LBRACE stmtS error .)
    error           reduce using rule 8 (stmtblock -> LBRACE stmtS error .)


state 137

    (9) stmtblock -> LBRACE error RBRACE .

    WHILE           reduce using rule 9 (stmtblock -> LBRACE error RBRACE .)
    ELIF            reduce using rule 9 (stmtblock -> LBRACE error RBRACE .)
    ELSE            reduce using rule 9 (stmtblock -> LBRACE error RBRACE .)
    SEMICOL         reduce using rule 9 (stmtblock -> LBRACE error RBRACE .)
    error           reduce using rule 9 (stmtblock -> LBRACE error RBRACE .)


state 138

    (10) stmtS -> stmt SEMICOL . stmtS
    (10) stmtS -> . stmt SEMICOL stmtS
    (11) stmtS -> . stmt error stmtS
    (12) stmtS -> .
    (36) stmt -> . CALL NAME LPAREN optargs RPAREN
    (37) stmt -> . RETURN exp
    (38) stmt -> . FUNCTION NAME LPAREN funcargs RPAREN stmtblock
    (46) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (47) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (50) stmt -> . STRUCT NAME SEP structargs SEP
    (55) stmt -> . MAKE NAME NAME
    (56) stmt -> . NAME DOT NAME EQUAL exp
    (62) stmt -> . exp DEC
    (63) stmt -> . exp INC
    (70) stmt -> . MAKE structargs
    (71) stmt -> . NAME EQUAL exp
    (72) stmt -> . NAME EQUAL error
    (73) stmt -> . IF exp THEN stmtblock
    (74) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (77) stmt -> . BREAK
    (78) stmt -> . CONTINUE
    (79) stmt -> . DO stmtblock WHILE exp
    (80) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (83) stmt -> . PRINT LPAREN optargs RPAREN
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

  ! shift/reduce conflict for error resolved as shift
    RBRACE          reduce using rule 12 (stmtS -> .)
    CALL            shift and go to state 5
    RETURN          shift and go to state 8
    FUNCTION        shift and go to state 10
    NAME            shift and go to state 6
    STRUCT          shift and go to state 11
    MAKE            shift and go to state 12
    IF              shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PRINT           shift and go to state 20
    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

  ! error           [ reduce using rule 12 (stmtS -> .) ]

    stmt                           shift and go to state 112
    stmtS                          shift and go to state 156
    exp                            shift and go to state 9
    list                           shift and go to state 23

state 139

    (11) stmtS -> stmt error . stmtS
    (10) stmtS -> . stmt SEMICOL stmtS
    (11) stmtS -> . stmt error stmtS
    (12) stmtS -> .
    (36) stmt -> . CALL NAME LPAREN optargs RPAREN
    (37) stmt -> . RETURN exp
    (38) stmt -> . FUNCTION NAME LPAREN funcargs RPAREN stmtblock
    (46) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (47) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (50) stmt -> . STRUCT NAME SEP structargs SEP
    (55) stmt -> . MAKE NAME NAME
    (56) stmt -> . NAME DOT NAME EQUAL exp
    (62) stmt -> . exp DEC
    (63) stmt -> . exp INC
    (70) stmt -> . MAKE structargs
    (71) stmt -> . NAME EQUAL exp
    (72) stmt -> . NAME EQUAL error
    (73) stmt -> . IF exp THEN stmtblock
    (74) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (77) stmt -> . BREAK
    (78) stmt -> . CONTINUE
    (79) stmt -> . DO stmtblock WHILE exp
    (80) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (83) stmt -> . PRINT LPAREN optargs RPAREN
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

  ! shift/reduce conflict for error resolved as shift
    RBRACE          reduce using rule 12 (stmtS -> .)
    CALL            shift and go to state 5
    RETURN          shift and go to state 8
    FUNCTION        shift and go to state 10
    NAME            shift and go to state 6
    STRUCT          shift and go to state 11
    MAKE            shift and go to state 12
    IF              shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PRINT           shift and go to state 20
    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

  ! error           [ reduce using rule 12 (stmtS -> .) ]

    stmt                           shift and go to state 112
    stmtS                          shift and go to state 157
    exp                            shift and go to state 9
    list                           shift and go to state 23

state 140

    (7) stmtblock -> error stmtS RBRACE .

    WHILE           reduce using rule 7 (stmtblock -> error stmtS RBRACE .)
    ELIF            reduce using rule 7 (stmtblock -> error stmtS RBRACE .)
    ELSE            reduce using rule 7 (stmtblock -> error stmtS RBRACE .)
    SEMICOL         reduce using rule 7 (stmtblock -> error stmtS RBRACE .)
    error           reduce using rule 7 (stmtblock -> error stmtS RBRACE .)


state 141

    (80) stmt -> FOR NAME EQUAL exp . TO exp UNTIL step stmtblock
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    TO              shift and go to state 158
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 142

    (83) stmt -> PRINT LPAREN optargs RPAREN .

    SEMICOL         reduce using rule 83 (stmt -> PRINT LPAREN optargs RPAREN .)
    error           reduce using rule 83 (stmt -> PRINT LPAREN optargs RPAREN .)


state 143

    (15) args -> exp COMMA args .

    RBRACK          reduce using rule 15 (args -> exp COMMA args .)
    RPAREN          reduce using rule 15 (args -> exp COMMA args .)


state 144

    (36) stmt -> CALL NAME LPAREN optargs RPAREN .

    SEMICOL         reduce using rule 36 (stmt -> CALL NAME LPAREN optargs RPAREN .)
    error           reduce using rule 36 (stmt -> CALL NAME LPAREN optargs RPAREN .)


state 145

    (56) stmt -> NAME DOT NAME EQUAL exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    SEMICOL         reduce using rule 56 (stmt -> NAME DOT NAME EQUAL exp .)
    error           reduce using rule 56 (stmt -> NAME DOT NAME EQUAL exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 146

    (46) stmt -> NAME DOT POP LPAREN exp . RPAREN
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    RPAREN          shift and go to state 159
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 147

    (47) stmt -> NAME DOT PUSH LPAREN exp . RPAREN
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    RPAREN          shift and go to state 160
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 148

    (48) exp -> NAME DOT INDEX LPAREN exp . RPAREN
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    RPAREN          shift and go to state 161
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 149

    (49) exp -> NAME DOT SLICE LPAREN exp . COMMA exp RPAREN
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    COMMA           shift and go to state 162
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 150

    (43) funcexp -> NAME EQUAL . exp
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 163
    list                           shift and go to state 23

state 151

    (38) stmt -> FUNCTION NAME LPAREN funcargs RPAREN . stmtblock
    (6) stmtblock -> . LBRACE stmtS RBRACE
    (7) stmtblock -> . error stmtS RBRACE
    (8) stmtblock -> . LBRACE stmtS error
    (9) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 68
    error           shift and go to state 69

    stmtblock                      shift and go to state 164

state 152

    (39) funcargs -> funcexp COMMA . funcargs
    (39) funcargs -> . funcexp COMMA funcargs
    (40) funcargs -> . funcexp
    (41) funcargs -> .
    (42) funcexp -> . NAME
    (43) funcexp -> . NAME EQUAL exp

    RPAREN          reduce using rule 41 (funcargs -> .)
    NAME            shift and go to state 126

    funcexp                        shift and go to state 128
    funcargs                       shift and go to state 165

state 153

    (50) stmt -> STRUCT NAME SEP structargs SEP .

    SEMICOL         reduce using rule 50 (stmt -> STRUCT NAME SEP structargs SEP .)
    error           reduce using rule 50 (stmt -> STRUCT NAME SEP structargs SEP .)


state 154

    (74) stmt -> IF exp THEN stmtblock elsif . ELSE THEN stmtblock

    ELSE            shift and go to state 166


state 155

    (75) elsif -> ELIF . exp THEN stmtblock elsif
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 167
    list                           shift and go to state 23

state 156

    (10) stmtS -> stmt SEMICOL stmtS .

    RBRACE          reduce using rule 10 (stmtS -> stmt SEMICOL stmtS .)
    error           reduce using rule 10 (stmtS -> stmt SEMICOL stmtS .)


state 157

    (11) stmtS -> stmt error stmtS .

    RBRACE          reduce using rule 11 (stmtS -> stmt error stmtS .)
    error           reduce using rule 11 (stmtS -> stmt error stmtS .)


state 158

    (80) stmt -> FOR NAME EQUAL exp TO . exp UNTIL step stmtblock
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 168
    list                           shift and go to state 23

state 159

    (46) stmt -> NAME DOT POP LPAREN exp RPAREN .

    SEMICOL         reduce using rule 46 (stmt -> NAME DOT POP LPAREN exp RPAREN .)
    error           reduce using rule 46 (stmt -> NAME DOT POP LPAREN exp RPAREN .)


state 160

    (47) stmt -> NAME DOT PUSH LPAREN exp RPAREN .

    SEMICOL         reduce using rule 47 (stmt -> NAME DOT PUSH LPAREN exp RPAREN .)
    error           reduce using rule 47 (stmt -> NAME DOT PUSH LPAREN exp RPAREN .)


state 161

    (48) exp -> NAME DOT INDEX LPAREN exp RPAREN .

    DEC             reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    INC             reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    PLUS            reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    MINUS           reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    MULTIPLY        reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    POWER           reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    MODULUS         reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    AND             reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    OR              reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    GT              reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    LT              reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    GTE             reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    LTE             reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    EE              reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    NE              reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    RPAREN          reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    SEMICOL         reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    error           reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    THEN            reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    COMMA           reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    RBRACK          reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    SEP             reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    TO              reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    UNTIL           reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    LBRACE          reduce using rule 48 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)


state 162

    (49) exp -> NAME DOT SLICE LPAREN exp COMMA . exp RPAREN
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

    exp                            shift and go to state 169
    list                           shift and go to state 23

state 163

    (43) funcexp -> NAME EQUAL exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    COMMA           reduce using rule 43 (funcexp -> NAME EQUAL exp .)
    RPAREN          reduce using rule 43 (funcexp -> NAME EQUAL exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 164

    (38) stmt -> FUNCTION NAME LPAREN funcargs RPAREN stmtblock .

    SEMICOL         reduce using rule 38 (stmt -> FUNCTION NAME LPAREN funcargs RPAREN stmtblock .)
    error           reduce using rule 38 (stmt -> FUNCTION NAME LPAREN funcargs RPAREN stmtblock .)


state 165

    (39) funcargs -> funcexp COMMA funcargs .

    RPAREN          reduce using rule 39 (funcargs -> funcexp COMMA funcargs .)


state 166

    (74) stmt -> IF exp THEN stmtblock elsif ELSE . THEN stmtblock

    THEN            shift and go to state 170


state 167

    (75) elsif -> ELIF exp . THEN stmtblock elsif
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    THEN            shift and go to state 171
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 168

    (80) stmt -> FOR NAME EQUAL exp TO exp . UNTIL step stmtblock
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    UNTIL           shift and go to state 172
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 169

    (49) exp -> NAME DOT SLICE LPAREN exp COMMA exp . RPAREN
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    RPAREN          shift and go to state 173
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 170

    (74) stmt -> IF exp THEN stmtblock elsif ELSE THEN . stmtblock
    (6) stmtblock -> . LBRACE stmtS RBRACE
    (7) stmtblock -> . error stmtS RBRACE
    (8) stmtblock -> . LBRACE stmtS error
    (9) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 68
    error           shift and go to state 69

    stmtblock                      shift and go to state 174

state 171

    (75) elsif -> ELIF exp THEN . stmtblock elsif
    (6) stmtblock -> . LBRACE stmtS RBRACE
    (7) stmtblock -> . error stmtS RBRACE
    (8) stmtblock -> . LBRACE stmtS error
    (9) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 68
    error           shift and go to state 69

    stmtblock                      shift and go to state 175

state 172

    (80) stmt -> FOR NAME EQUAL exp TO exp UNTIL . step stmtblock
    (81) step -> . exp
    (82) step -> .
    (17) exp -> . NOT exp
    (18) exp -> . DEC exp
    (19) exp -> . INC exp
    (20) exp -> . exp PLUS exp
    (21) exp -> . exp MINUS exp
    (22) exp -> . exp MULTIPLY exp
    (23) exp -> . exp DIVIDE exp
    (24) exp -> . exp POWER exp
    (25) exp -> . exp MODULUS exp
    (26) exp -> . exp AND exp
    (27) exp -> . exp OR exp
    (28) exp -> . exp GT exp
    (29) exp -> . exp LT exp
    (30) exp -> . exp GTE exp
    (31) exp -> . exp LTE exp
    (32) exp -> . exp EE exp
    (33) exp -> . exp NE exp
    (34) exp -> . NAME
    (35) exp -> . NAME LPAREN optargs RPAREN
    (44) exp -> . list
    (48) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (49) exp -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (57) exp -> . NAME DOT NAME
    (58) exp -> . MINUS INT
    (59) exp -> . MINUS FLOAT
    (60) exp -> . INT
    (61) exp -> . FLOAT
    (64) exp -> . TRUE
    (65) exp -> . FALSE
    (66) exp -> . STRING
    (67) exp -> . CHAR
    (68) exp -> . LPAREN exp RPAREN
    (69) exp -> . error
    (45) list -> . LBRACK optargs RBRACK

  ! shift/reduce conflict for error resolved as shift
    LBRACE          reduce using rule 82 (step -> .)
    NOT             shift and go to state 21
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NAME            shift and go to state 40
    MINUS           shift and go to state 22
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    TRUE            shift and go to state 26
    FALSE           shift and go to state 27
    STRING          shift and go to state 28
    CHAR            shift and go to state 29
    LPAREN          shift and go to state 7
    error           shift and go to state 41
    LBRACK          shift and go to state 30

  ! error           [ reduce using rule 82 (step -> .) ]

    exp                            shift and go to state 176
    step                           shift and go to state 177
    list                           shift and go to state 23

state 173

    (49) exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .

    DEC             reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    INC             reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    PLUS            reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    MINUS           reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    MULTIPLY        reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    DIVIDE          reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    POWER           reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    MODULUS         reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    AND             reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    OR              reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    GT              reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    LT              reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    GTE             reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    LTE             reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    EE              reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    NE              reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    RPAREN          reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    SEMICOL         reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    error           reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    THEN            reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    COMMA           reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    RBRACK          reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    SEP             reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    TO              reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    UNTIL           reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)
    LBRACE          reduce using rule 49 (exp -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)


state 174

    (74) stmt -> IF exp THEN stmtblock elsif ELSE THEN stmtblock .

    SEMICOL         reduce using rule 74 (stmt -> IF exp THEN stmtblock elsif ELSE THEN stmtblock .)
    error           reduce using rule 74 (stmt -> IF exp THEN stmtblock elsif ELSE THEN stmtblock .)


state 175

    (75) elsif -> ELIF exp THEN stmtblock . elsif
    (75) elsif -> . ELIF exp THEN stmtblock elsif
    (76) elsif -> .

    ELIF            shift and go to state 155
    ELSE            reduce using rule 76 (elsif -> .)

    elsif                          shift and go to state 178

state 176

    (81) step -> exp .
    (20) exp -> exp . PLUS exp
    (21) exp -> exp . MINUS exp
    (22) exp -> exp . MULTIPLY exp
    (23) exp -> exp . DIVIDE exp
    (24) exp -> exp . POWER exp
    (25) exp -> exp . MODULUS exp
    (26) exp -> exp . AND exp
    (27) exp -> exp . OR exp
    (28) exp -> exp . GT exp
    (29) exp -> exp . LT exp
    (30) exp -> exp . GTE exp
    (31) exp -> exp . LTE exp
    (32) exp -> exp . EE exp
    (33) exp -> exp . NE exp

    LBRACE          reduce using rule 81 (step -> exp .)
    error           reduce using rule 81 (step -> exp .)
    PLUS            shift and go to state 45
    MINUS           shift and go to state 46
    MULTIPLY        shift and go to state 47
    DIVIDE          shift and go to state 48
    POWER           shift and go to state 49
    MODULUS         shift and go to state 50
    AND             shift and go to state 51
    OR              shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    GTE             shift and go to state 55
    LTE             shift and go to state 56
    EE              shift and go to state 57
    NE              shift and go to state 58


state 177

    (80) stmt -> FOR NAME EQUAL exp TO exp UNTIL step . stmtblock
    (6) stmtblock -> . LBRACE stmtS RBRACE
    (7) stmtblock -> . error stmtS RBRACE
    (8) stmtblock -> . LBRACE stmtS error
    (9) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 68
    error           shift and go to state 69

    stmtblock                      shift and go to state 179

state 178

    (75) elsif -> ELIF exp THEN stmtblock elsif .

    ELSE            reduce using rule 75 (elsif -> ELIF exp THEN stmtblock elsif .)


state 179

    (80) stmt -> FOR NAME EQUAL exp TO exp UNTIL step stmtblock .

    SEMICOL         reduce using rule 80 (stmt -> FOR NAME EQUAL exp TO exp UNTIL step stmtblock .)
    error           reduce using rule 80 (stmt -> FOR NAME EQUAL exp TO exp UNTIL step stmtblock .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for error in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 93 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 93 resolved as shift
WARNING: shift/reduce conflict for POWER in state 93 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 93 resolved as shift
WARNING: shift/reduce conflict for AND in state 93 resolved as shift
WARNING: shift/reduce conflict for OR in state 93 resolved as shift
WARNING: shift/reduce conflict for GT in state 93 resolved as shift
WARNING: shift/reduce conflict for LT in state 93 resolved as shift
WARNING: shift/reduce conflict for GTE in state 93 resolved as shift
WARNING: shift/reduce conflict for LTE in state 93 resolved as shift
WARNING: shift/reduce conflict for EE in state 93 resolved as shift
WARNING: shift/reduce conflict for NE in state 93 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 94 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 94 resolved as shift
WARNING: shift/reduce conflict for POWER in state 94 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 94 resolved as shift
WARNING: shift/reduce conflict for AND in state 94 resolved as shift
WARNING: shift/reduce conflict for OR in state 94 resolved as shift
WARNING: shift/reduce conflict for GT in state 94 resolved as shift
WARNING: shift/reduce conflict for LT in state 94 resolved as shift
WARNING: shift/reduce conflict for GTE in state 94 resolved as shift
WARNING: shift/reduce conflict for LTE in state 94 resolved as shift
WARNING: shift/reduce conflict for EE in state 94 resolved as shift
WARNING: shift/reduce conflict for NE in state 94 resolved as shift
WARNING: shift/reduce conflict for error in state 138 resolved as shift
WARNING: shift/reduce conflict for error in state 139 resolved as shift
WARNING: shift/reduce conflict for error in state 172 resolved as shift
WARNING: reduce/reduce conflict in state 86 resolved using rule (exp -> error)
WARNING: rejected rule (stmt -> NAME EQUAL error) in state 86
WARNING: Rule (stmt -> NAME EQUAL error) is never reduced
