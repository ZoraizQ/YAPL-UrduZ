Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    FUNCTION
    MULTICOMMENT
    NEWL

Grammar

Rule 0     S' -> uz
Rule 1     uz -> line uz
Rule 2     line -> stmt SEMICOL
Rule 3     uz -> error SEMICOL
Rule 4     uz -> <empty>
Rule 5     stmtblock -> LBRACE stmtS RBRACE
Rule 6     stmtblock -> LBRACE error RBRACE
Rule 7     stmtS -> stmt SEMICOL stmtS
Rule 8     stmtS -> error SEMICOL stmtS
Rule 9     stmtS -> <empty>
Rule 10    exp -> CALL NAME LPAREN optargs RPAREN
Rule 11    optargs -> args
Rule 12    optargs -> <empty>
Rule 13    args -> exp COMMA args
Rule 14    args -> exp
Rule 15    exp -> exp PLUS exp
Rule 16    exp -> exp MINUS exp
Rule 17    exp -> exp MULTIPLY exp
Rule 18    exp -> exp DIVIDE exp
Rule 19    exp -> exp POWER exp
Rule 20    exp -> exp MODULUS exp
Rule 21    exp -> exp AND exp
Rule 22    exp -> exp OR exp
Rule 23    exp -> exp GT exp
Rule 24    exp -> exp LT exp
Rule 25    exp -> exp GTE exp
Rule 26    exp -> exp LTE exp
Rule 27    exp -> exp EE exp
Rule 28    exp -> exp NE exp
Rule 29    exp -> NAME
Rule 30    list -> LBRACK optargs RBRACK
Rule 31    stmt -> NAME DOT POP LPAREN exp RPAREN
Rule 32    stmt -> NAME DOT PUSH LPAREN exp RPAREN
Rule 33    stmt -> NAME DOT INDEX LPAREN exp RPAREN
Rule 34    stmt -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN
Rule 35    exp -> MINUS INT
Rule 36    exp -> MINUS FLOAT
Rule 37    exp -> INT
Rule 38    exp -> FLOAT
Rule 39    exp -> DEC exp
Rule 40    exp -> INC exp
Rule 41    stmt -> exp DEC
Rule 42    stmt -> exp INC
Rule 43    exp -> NOT exp
Rule 44    exp -> TRUE
Rule 45    exp -> FALSE
Rule 46    exp -> STRING
Rule 47    exp -> CHAR
Rule 48    exp -> LPAREN exp RPAREN
Rule 49    stmt -> MAKE NAME
Rule 50    stmt -> MAKE NAME EQUAL exp
Rule 51    stmt -> MAKE NAME EQUAL list
Rule 52    stmt -> NAME EQUAL exp
Rule 53    stmt -> IF exp THEN stmtblock
Rule 54    stmt -> IF exp THEN stmtblock elsif ELSE THEN stmtblock
Rule 55    elsif -> ELIF exp THEN stmtblock elsif
Rule 56    elsif -> <empty>
Rule 57    stmt -> DO stmtblock WHILE exp
Rule 58    stmt -> FOR NAME EQUAL exp TO exp UNTIL step stmtblock
Rule 59    step -> exp
Rule 60    step -> <empty>
Rule 61    stmt -> PRINT LPAREN exp RPAREN
Rule 62    stmt -> RETURN exp

Terminals, with rules where they appear

AND                  : 21
CALL                 : 10
CHAR                 : 47
COMMA                : 13 34
COMMENT              : 
DEC                  : 39 41
DIVIDE               : 18
DO                   : 57
DOT                  : 31 32 33 34
EE                   : 27
ELIF                 : 55
ELSE                 : 54
EQUAL                : 50 51 52 58
FALSE                : 45
FLOAT                : 36 38
FOR                  : 58
FUNCTION             : 
GT                   : 23
GTE                  : 25
IF                   : 53 54
INC                  : 40 42
INDEX                : 33
INT                  : 35 37
LBRACE               : 5 6
LBRACK               : 30
LPAREN               : 10 31 32 33 34 48 61
LT                   : 24
LTE                  : 26
MAKE                 : 49 50 51
MINUS                : 16 35 36
MODULUS              : 20
MULTICOMMENT         : 
MULTIPLY             : 17
NAME                 : 10 29 31 32 33 34 49 50 51 52 58
NE                   : 28
NEWL                 : 
NOT                  : 43
OR                   : 22
PLUS                 : 15
POP                  : 31
POWER                : 19
PRINT                : 61
PUSH                 : 32
RBRACE               : 5 6
RBRACK               : 30
RETURN               : 62
RPAREN               : 10 31 32 33 34 48 61
SEMICOL              : 2 3 7 8
SLICE                : 34
STRING               : 46
THEN                 : 53 54 54 55
TO                   : 58
TRUE                 : 44
UNTIL                : 58
WHILE                : 57
error                : 3 6 8

Nonterminals, with rules where they appear

args                 : 11 13
elsif                : 54 55
exp                  : 13 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 31 32 33 34 34 39 40 41 42 43 48 50 52 53 54 55 57 58 58 59 61 62
line                 : 1
list                 : 51
optargs              : 10 30
step                 : 58
stmt                 : 2 7
stmtS                : 5 7 8
stmtblock            : 53 54 54 55 57 58
uz                   : 1 0

Parsing method: LALR

state 0

    (0) S' -> . uz
    (1) uz -> . line uz
    (3) uz -> . error SEMICOL
    (4) uz -> .
    (2) line -> . stmt SEMICOL
    (31) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (32) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (33) stmt -> . NAME DOT INDEX LPAREN exp RPAREN
    (34) stmt -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (41) stmt -> . exp DEC
    (42) stmt -> . exp INC
    (49) stmt -> . MAKE NAME
    (50) stmt -> . MAKE NAME EQUAL exp
    (51) stmt -> . MAKE NAME EQUAL list
    (52) stmt -> . NAME EQUAL exp
    (53) stmt -> . IF exp THEN stmtblock
    (54) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (57) stmt -> . DO stmtblock WHILE exp
    (58) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (61) stmt -> . PRINT LPAREN exp RPAREN
    (62) stmt -> . RETURN exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    error           shift and go to state 3
    $end            reduce using rule 4 (uz -> .)
    NAME            shift and go to state 5
    MAKE            shift and go to state 10
    IF              shift and go to state 11
    DO              shift and go to state 12
    FOR             shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CALL            shift and go to state 16
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    uz                             shift and go to state 1
    line                           shift and go to state 2
    stmt                           shift and go to state 4
    exp                            shift and go to state 7

state 1

    (0) S' -> uz .



state 2

    (1) uz -> line . uz
    (1) uz -> . line uz
    (3) uz -> . error SEMICOL
    (4) uz -> .
    (2) line -> . stmt SEMICOL
    (31) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (32) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (33) stmt -> . NAME DOT INDEX LPAREN exp RPAREN
    (34) stmt -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (41) stmt -> . exp DEC
    (42) stmt -> . exp INC
    (49) stmt -> . MAKE NAME
    (50) stmt -> . MAKE NAME EQUAL exp
    (51) stmt -> . MAKE NAME EQUAL list
    (52) stmt -> . NAME EQUAL exp
    (53) stmt -> . IF exp THEN stmtblock
    (54) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (57) stmt -> . DO stmtblock WHILE exp
    (58) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (61) stmt -> . PRINT LPAREN exp RPAREN
    (62) stmt -> . RETURN exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    error           shift and go to state 3
    $end            reduce using rule 4 (uz -> .)
    NAME            shift and go to state 5
    MAKE            shift and go to state 10
    IF              shift and go to state 11
    DO              shift and go to state 12
    FOR             shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CALL            shift and go to state 16
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    line                           shift and go to state 2
    uz                             shift and go to state 25
    stmt                           shift and go to state 4
    exp                            shift and go to state 7

state 3

    (3) uz -> error . SEMICOL

    SEMICOL         shift and go to state 26


state 4

    (2) line -> stmt . SEMICOL

    SEMICOL         shift and go to state 27


state 5

    (31) stmt -> NAME . DOT POP LPAREN exp RPAREN
    (32) stmt -> NAME . DOT PUSH LPAREN exp RPAREN
    (33) stmt -> NAME . DOT INDEX LPAREN exp RPAREN
    (34) stmt -> NAME . DOT SLICE LPAREN exp COMMA exp RPAREN
    (52) stmt -> NAME . EQUAL exp
    (29) exp -> NAME .

    DOT             shift and go to state 28
    EQUAL           shift and go to state 29
    DEC             reduce using rule 29 (exp -> NAME .)
    INC             reduce using rule 29 (exp -> NAME .)
    PLUS            reduce using rule 29 (exp -> NAME .)
    MINUS           reduce using rule 29 (exp -> NAME .)
    MULTIPLY        reduce using rule 29 (exp -> NAME .)
    DIVIDE          reduce using rule 29 (exp -> NAME .)
    POWER           reduce using rule 29 (exp -> NAME .)
    MODULUS         reduce using rule 29 (exp -> NAME .)
    AND             reduce using rule 29 (exp -> NAME .)
    OR              reduce using rule 29 (exp -> NAME .)
    GT              reduce using rule 29 (exp -> NAME .)
    LT              reduce using rule 29 (exp -> NAME .)
    GTE             reduce using rule 29 (exp -> NAME .)
    LTE             reduce using rule 29 (exp -> NAME .)
    EE              reduce using rule 29 (exp -> NAME .)
    NE              reduce using rule 29 (exp -> NAME .)


state 6

    (48) exp -> LPAREN . exp RPAREN
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 30

state 7

    (41) stmt -> exp . DEC
    (42) stmt -> exp . INC
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             shift and go to state 32
    INC             shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 8

    (39) exp -> DEC . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 48

state 9

    (40) exp -> INC . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 49

state 10

    (49) stmt -> MAKE . NAME
    (50) stmt -> MAKE . NAME EQUAL exp
    (51) stmt -> MAKE . NAME EQUAL list

    NAME            shift and go to state 50


state 11

    (53) stmt -> IF . exp THEN stmtblock
    (54) stmt -> IF . exp THEN stmtblock elsif ELSE THEN stmtblock
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 51

state 12

    (57) stmt -> DO . stmtblock WHILE exp
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 53

    stmtblock                      shift and go to state 52

state 13

    (58) stmt -> FOR . NAME EQUAL exp TO exp UNTIL step stmtblock

    NAME            shift and go to state 54


state 14

    (61) stmt -> PRINT . LPAREN exp RPAREN

    LPAREN          shift and go to state 55


state 15

    (62) stmt -> RETURN . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 56

state 16

    (10) exp -> CALL . NAME LPAREN optargs RPAREN

    NAME            shift and go to state 57


state 17

    (35) exp -> MINUS . INT
    (36) exp -> MINUS . FLOAT

    INT             shift and go to state 58
    FLOAT           shift and go to state 59


state 18

    (37) exp -> INT .

    DEC             reduce using rule 37 (exp -> INT .)
    INC             reduce using rule 37 (exp -> INT .)
    PLUS            reduce using rule 37 (exp -> INT .)
    MINUS           reduce using rule 37 (exp -> INT .)
    MULTIPLY        reduce using rule 37 (exp -> INT .)
    DIVIDE          reduce using rule 37 (exp -> INT .)
    POWER           reduce using rule 37 (exp -> INT .)
    MODULUS         reduce using rule 37 (exp -> INT .)
    AND             reduce using rule 37 (exp -> INT .)
    OR              reduce using rule 37 (exp -> INT .)
    GT              reduce using rule 37 (exp -> INT .)
    LT              reduce using rule 37 (exp -> INT .)
    GTE             reduce using rule 37 (exp -> INT .)
    LTE             reduce using rule 37 (exp -> INT .)
    EE              reduce using rule 37 (exp -> INT .)
    NE              reduce using rule 37 (exp -> INT .)
    RPAREN          reduce using rule 37 (exp -> INT .)
    THEN            reduce using rule 37 (exp -> INT .)
    SEMICOL         reduce using rule 37 (exp -> INT .)
    TO              reduce using rule 37 (exp -> INT .)
    COMMA           reduce using rule 37 (exp -> INT .)
    RBRACK          reduce using rule 37 (exp -> INT .)
    UNTIL           reduce using rule 37 (exp -> INT .)
    LBRACE          reduce using rule 37 (exp -> INT .)


state 19

    (38) exp -> FLOAT .

    DEC             reduce using rule 38 (exp -> FLOAT .)
    INC             reduce using rule 38 (exp -> FLOAT .)
    PLUS            reduce using rule 38 (exp -> FLOAT .)
    MINUS           reduce using rule 38 (exp -> FLOAT .)
    MULTIPLY        reduce using rule 38 (exp -> FLOAT .)
    DIVIDE          reduce using rule 38 (exp -> FLOAT .)
    POWER           reduce using rule 38 (exp -> FLOAT .)
    MODULUS         reduce using rule 38 (exp -> FLOAT .)
    AND             reduce using rule 38 (exp -> FLOAT .)
    OR              reduce using rule 38 (exp -> FLOAT .)
    GT              reduce using rule 38 (exp -> FLOAT .)
    LT              reduce using rule 38 (exp -> FLOAT .)
    GTE             reduce using rule 38 (exp -> FLOAT .)
    LTE             reduce using rule 38 (exp -> FLOAT .)
    EE              reduce using rule 38 (exp -> FLOAT .)
    NE              reduce using rule 38 (exp -> FLOAT .)
    RPAREN          reduce using rule 38 (exp -> FLOAT .)
    THEN            reduce using rule 38 (exp -> FLOAT .)
    SEMICOL         reduce using rule 38 (exp -> FLOAT .)
    TO              reduce using rule 38 (exp -> FLOAT .)
    COMMA           reduce using rule 38 (exp -> FLOAT .)
    RBRACK          reduce using rule 38 (exp -> FLOAT .)
    UNTIL           reduce using rule 38 (exp -> FLOAT .)
    LBRACE          reduce using rule 38 (exp -> FLOAT .)


state 20

    (43) exp -> NOT . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 60

state 21

    (44) exp -> TRUE .

    DEC             reduce using rule 44 (exp -> TRUE .)
    INC             reduce using rule 44 (exp -> TRUE .)
    PLUS            reduce using rule 44 (exp -> TRUE .)
    MINUS           reduce using rule 44 (exp -> TRUE .)
    MULTIPLY        reduce using rule 44 (exp -> TRUE .)
    DIVIDE          reduce using rule 44 (exp -> TRUE .)
    POWER           reduce using rule 44 (exp -> TRUE .)
    MODULUS         reduce using rule 44 (exp -> TRUE .)
    AND             reduce using rule 44 (exp -> TRUE .)
    OR              reduce using rule 44 (exp -> TRUE .)
    GT              reduce using rule 44 (exp -> TRUE .)
    LT              reduce using rule 44 (exp -> TRUE .)
    GTE             reduce using rule 44 (exp -> TRUE .)
    LTE             reduce using rule 44 (exp -> TRUE .)
    EE              reduce using rule 44 (exp -> TRUE .)
    NE              reduce using rule 44 (exp -> TRUE .)
    RPAREN          reduce using rule 44 (exp -> TRUE .)
    THEN            reduce using rule 44 (exp -> TRUE .)
    SEMICOL         reduce using rule 44 (exp -> TRUE .)
    TO              reduce using rule 44 (exp -> TRUE .)
    COMMA           reduce using rule 44 (exp -> TRUE .)
    RBRACK          reduce using rule 44 (exp -> TRUE .)
    UNTIL           reduce using rule 44 (exp -> TRUE .)
    LBRACE          reduce using rule 44 (exp -> TRUE .)


state 22

    (45) exp -> FALSE .

    DEC             reduce using rule 45 (exp -> FALSE .)
    INC             reduce using rule 45 (exp -> FALSE .)
    PLUS            reduce using rule 45 (exp -> FALSE .)
    MINUS           reduce using rule 45 (exp -> FALSE .)
    MULTIPLY        reduce using rule 45 (exp -> FALSE .)
    DIVIDE          reduce using rule 45 (exp -> FALSE .)
    POWER           reduce using rule 45 (exp -> FALSE .)
    MODULUS         reduce using rule 45 (exp -> FALSE .)
    AND             reduce using rule 45 (exp -> FALSE .)
    OR              reduce using rule 45 (exp -> FALSE .)
    GT              reduce using rule 45 (exp -> FALSE .)
    LT              reduce using rule 45 (exp -> FALSE .)
    GTE             reduce using rule 45 (exp -> FALSE .)
    LTE             reduce using rule 45 (exp -> FALSE .)
    EE              reduce using rule 45 (exp -> FALSE .)
    NE              reduce using rule 45 (exp -> FALSE .)
    RPAREN          reduce using rule 45 (exp -> FALSE .)
    THEN            reduce using rule 45 (exp -> FALSE .)
    SEMICOL         reduce using rule 45 (exp -> FALSE .)
    TO              reduce using rule 45 (exp -> FALSE .)
    COMMA           reduce using rule 45 (exp -> FALSE .)
    RBRACK          reduce using rule 45 (exp -> FALSE .)
    UNTIL           reduce using rule 45 (exp -> FALSE .)
    LBRACE          reduce using rule 45 (exp -> FALSE .)


state 23

    (46) exp -> STRING .

    DEC             reduce using rule 46 (exp -> STRING .)
    INC             reduce using rule 46 (exp -> STRING .)
    PLUS            reduce using rule 46 (exp -> STRING .)
    MINUS           reduce using rule 46 (exp -> STRING .)
    MULTIPLY        reduce using rule 46 (exp -> STRING .)
    DIVIDE          reduce using rule 46 (exp -> STRING .)
    POWER           reduce using rule 46 (exp -> STRING .)
    MODULUS         reduce using rule 46 (exp -> STRING .)
    AND             reduce using rule 46 (exp -> STRING .)
    OR              reduce using rule 46 (exp -> STRING .)
    GT              reduce using rule 46 (exp -> STRING .)
    LT              reduce using rule 46 (exp -> STRING .)
    GTE             reduce using rule 46 (exp -> STRING .)
    LTE             reduce using rule 46 (exp -> STRING .)
    EE              reduce using rule 46 (exp -> STRING .)
    NE              reduce using rule 46 (exp -> STRING .)
    RPAREN          reduce using rule 46 (exp -> STRING .)
    THEN            reduce using rule 46 (exp -> STRING .)
    SEMICOL         reduce using rule 46 (exp -> STRING .)
    TO              reduce using rule 46 (exp -> STRING .)
    COMMA           reduce using rule 46 (exp -> STRING .)
    RBRACK          reduce using rule 46 (exp -> STRING .)
    UNTIL           reduce using rule 46 (exp -> STRING .)
    LBRACE          reduce using rule 46 (exp -> STRING .)


state 24

    (47) exp -> CHAR .

    DEC             reduce using rule 47 (exp -> CHAR .)
    INC             reduce using rule 47 (exp -> CHAR .)
    PLUS            reduce using rule 47 (exp -> CHAR .)
    MINUS           reduce using rule 47 (exp -> CHAR .)
    MULTIPLY        reduce using rule 47 (exp -> CHAR .)
    DIVIDE          reduce using rule 47 (exp -> CHAR .)
    POWER           reduce using rule 47 (exp -> CHAR .)
    MODULUS         reduce using rule 47 (exp -> CHAR .)
    AND             reduce using rule 47 (exp -> CHAR .)
    OR              reduce using rule 47 (exp -> CHAR .)
    GT              reduce using rule 47 (exp -> CHAR .)
    LT              reduce using rule 47 (exp -> CHAR .)
    GTE             reduce using rule 47 (exp -> CHAR .)
    LTE             reduce using rule 47 (exp -> CHAR .)
    EE              reduce using rule 47 (exp -> CHAR .)
    NE              reduce using rule 47 (exp -> CHAR .)
    RPAREN          reduce using rule 47 (exp -> CHAR .)
    THEN            reduce using rule 47 (exp -> CHAR .)
    SEMICOL         reduce using rule 47 (exp -> CHAR .)
    TO              reduce using rule 47 (exp -> CHAR .)
    COMMA           reduce using rule 47 (exp -> CHAR .)
    RBRACK          reduce using rule 47 (exp -> CHAR .)
    UNTIL           reduce using rule 47 (exp -> CHAR .)
    LBRACE          reduce using rule 47 (exp -> CHAR .)


state 25

    (1) uz -> line uz .

    $end            reduce using rule 1 (uz -> line uz .)


state 26

    (3) uz -> error SEMICOL .

    $end            reduce using rule 3 (uz -> error SEMICOL .)


state 27

    (2) line -> stmt SEMICOL .

    error           reduce using rule 2 (line -> stmt SEMICOL .)
    NAME            reduce using rule 2 (line -> stmt SEMICOL .)
    MAKE            reduce using rule 2 (line -> stmt SEMICOL .)
    IF              reduce using rule 2 (line -> stmt SEMICOL .)
    DO              reduce using rule 2 (line -> stmt SEMICOL .)
    FOR             reduce using rule 2 (line -> stmt SEMICOL .)
    PRINT           reduce using rule 2 (line -> stmt SEMICOL .)
    RETURN          reduce using rule 2 (line -> stmt SEMICOL .)
    CALL            reduce using rule 2 (line -> stmt SEMICOL .)
    MINUS           reduce using rule 2 (line -> stmt SEMICOL .)
    INT             reduce using rule 2 (line -> stmt SEMICOL .)
    FLOAT           reduce using rule 2 (line -> stmt SEMICOL .)
    DEC             reduce using rule 2 (line -> stmt SEMICOL .)
    INC             reduce using rule 2 (line -> stmt SEMICOL .)
    NOT             reduce using rule 2 (line -> stmt SEMICOL .)
    TRUE            reduce using rule 2 (line -> stmt SEMICOL .)
    FALSE           reduce using rule 2 (line -> stmt SEMICOL .)
    STRING          reduce using rule 2 (line -> stmt SEMICOL .)
    CHAR            reduce using rule 2 (line -> stmt SEMICOL .)
    LPAREN          reduce using rule 2 (line -> stmt SEMICOL .)
    $end            reduce using rule 2 (line -> stmt SEMICOL .)


state 28

    (31) stmt -> NAME DOT . POP LPAREN exp RPAREN
    (32) stmt -> NAME DOT . PUSH LPAREN exp RPAREN
    (33) stmt -> NAME DOT . INDEX LPAREN exp RPAREN
    (34) stmt -> NAME DOT . SLICE LPAREN exp COMMA exp RPAREN

    POP             shift and go to state 61
    PUSH            shift and go to state 62
    INDEX           shift and go to state 63
    SLICE           shift and go to state 64


state 29

    (52) stmt -> NAME EQUAL . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 65

state 30

    (48) exp -> LPAREN exp . RPAREN
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    RPAREN          shift and go to state 66
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 31

    (29) exp -> NAME .

    RPAREN          reduce using rule 29 (exp -> NAME .)
    PLUS            reduce using rule 29 (exp -> NAME .)
    MINUS           reduce using rule 29 (exp -> NAME .)
    MULTIPLY        reduce using rule 29 (exp -> NAME .)
    DIVIDE          reduce using rule 29 (exp -> NAME .)
    POWER           reduce using rule 29 (exp -> NAME .)
    MODULUS         reduce using rule 29 (exp -> NAME .)
    AND             reduce using rule 29 (exp -> NAME .)
    OR              reduce using rule 29 (exp -> NAME .)
    GT              reduce using rule 29 (exp -> NAME .)
    LT              reduce using rule 29 (exp -> NAME .)
    GTE             reduce using rule 29 (exp -> NAME .)
    LTE             reduce using rule 29 (exp -> NAME .)
    EE              reduce using rule 29 (exp -> NAME .)
    NE              reduce using rule 29 (exp -> NAME .)
    DEC             reduce using rule 29 (exp -> NAME .)
    INC             reduce using rule 29 (exp -> NAME .)
    THEN            reduce using rule 29 (exp -> NAME .)
    SEMICOL         reduce using rule 29 (exp -> NAME .)
    TO              reduce using rule 29 (exp -> NAME .)
    COMMA           reduce using rule 29 (exp -> NAME .)
    RBRACK          reduce using rule 29 (exp -> NAME .)
    UNTIL           reduce using rule 29 (exp -> NAME .)
    LBRACE          reduce using rule 29 (exp -> NAME .)


state 32

    (41) stmt -> exp DEC .

    SEMICOL         reduce using rule 41 (stmt -> exp DEC .)


state 33

    (42) stmt -> exp INC .

    SEMICOL         reduce using rule 42 (stmt -> exp INC .)


state 34

    (15) exp -> exp PLUS . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 67

state 35

    (16) exp -> exp MINUS . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 68

state 36

    (17) exp -> exp MULTIPLY . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 69

state 37

    (18) exp -> exp DIVIDE . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 70

state 38

    (19) exp -> exp POWER . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 71

state 39

    (20) exp -> exp MODULUS . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 72

state 40

    (21) exp -> exp AND . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 73

state 41

    (22) exp -> exp OR . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 74

state 42

    (23) exp -> exp GT . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 75

state 43

    (24) exp -> exp LT . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 76

state 44

    (25) exp -> exp GTE . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 77

state 45

    (26) exp -> exp LTE . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 78

state 46

    (27) exp -> exp EE . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 79

state 47

    (28) exp -> exp NE . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 80

state 48

    (39) exp -> DEC exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 39 (exp -> DEC exp .)
    INC             reduce using rule 39 (exp -> DEC exp .)
    POWER           reduce using rule 39 (exp -> DEC exp .)
    MODULUS         reduce using rule 39 (exp -> DEC exp .)
    RPAREN          reduce using rule 39 (exp -> DEC exp .)
    THEN            reduce using rule 39 (exp -> DEC exp .)
    SEMICOL         reduce using rule 39 (exp -> DEC exp .)
    TO              reduce using rule 39 (exp -> DEC exp .)
    COMMA           reduce using rule 39 (exp -> DEC exp .)
    RBRACK          reduce using rule 39 (exp -> DEC exp .)
    UNTIL           reduce using rule 39 (exp -> DEC exp .)
    LBRACE          reduce using rule 39 (exp -> DEC exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47

  ! PLUS            [ reduce using rule 39 (exp -> DEC exp .) ]
  ! MINUS           [ reduce using rule 39 (exp -> DEC exp .) ]
  ! MULTIPLY        [ reduce using rule 39 (exp -> DEC exp .) ]
  ! DIVIDE          [ reduce using rule 39 (exp -> DEC exp .) ]
  ! AND             [ reduce using rule 39 (exp -> DEC exp .) ]
  ! OR              [ reduce using rule 39 (exp -> DEC exp .) ]
  ! GT              [ reduce using rule 39 (exp -> DEC exp .) ]
  ! LT              [ reduce using rule 39 (exp -> DEC exp .) ]
  ! GTE             [ reduce using rule 39 (exp -> DEC exp .) ]
  ! LTE             [ reduce using rule 39 (exp -> DEC exp .) ]
  ! EE              [ reduce using rule 39 (exp -> DEC exp .) ]
  ! NE              [ reduce using rule 39 (exp -> DEC exp .) ]
  ! POWER           [ shift and go to state 38 ]
  ! MODULUS         [ shift and go to state 39 ]


state 49

    (40) exp -> INC exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 40 (exp -> INC exp .)
    INC             reduce using rule 40 (exp -> INC exp .)
    POWER           reduce using rule 40 (exp -> INC exp .)
    MODULUS         reduce using rule 40 (exp -> INC exp .)
    RPAREN          reduce using rule 40 (exp -> INC exp .)
    THEN            reduce using rule 40 (exp -> INC exp .)
    SEMICOL         reduce using rule 40 (exp -> INC exp .)
    TO              reduce using rule 40 (exp -> INC exp .)
    COMMA           reduce using rule 40 (exp -> INC exp .)
    RBRACK          reduce using rule 40 (exp -> INC exp .)
    UNTIL           reduce using rule 40 (exp -> INC exp .)
    LBRACE          reduce using rule 40 (exp -> INC exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47

  ! PLUS            [ reduce using rule 40 (exp -> INC exp .) ]
  ! MINUS           [ reduce using rule 40 (exp -> INC exp .) ]
  ! MULTIPLY        [ reduce using rule 40 (exp -> INC exp .) ]
  ! DIVIDE          [ reduce using rule 40 (exp -> INC exp .) ]
  ! AND             [ reduce using rule 40 (exp -> INC exp .) ]
  ! OR              [ reduce using rule 40 (exp -> INC exp .) ]
  ! GT              [ reduce using rule 40 (exp -> INC exp .) ]
  ! LT              [ reduce using rule 40 (exp -> INC exp .) ]
  ! GTE             [ reduce using rule 40 (exp -> INC exp .) ]
  ! LTE             [ reduce using rule 40 (exp -> INC exp .) ]
  ! EE              [ reduce using rule 40 (exp -> INC exp .) ]
  ! NE              [ reduce using rule 40 (exp -> INC exp .) ]
  ! POWER           [ shift and go to state 38 ]
  ! MODULUS         [ shift and go to state 39 ]


state 50

    (49) stmt -> MAKE NAME .
    (50) stmt -> MAKE NAME . EQUAL exp
    (51) stmt -> MAKE NAME . EQUAL list

    SEMICOL         reduce using rule 49 (stmt -> MAKE NAME .)
    EQUAL           shift and go to state 81


state 51

    (53) stmt -> IF exp . THEN stmtblock
    (54) stmt -> IF exp . THEN stmtblock elsif ELSE THEN stmtblock
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    THEN            shift and go to state 82
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 52

    (57) stmt -> DO stmtblock . WHILE exp

    WHILE           shift and go to state 83


state 53

    (5) stmtblock -> LBRACE . stmtS RBRACE
    (6) stmtblock -> LBRACE . error RBRACE
    (7) stmtS -> . stmt SEMICOL stmtS
    (8) stmtS -> . error SEMICOL stmtS
    (9) stmtS -> .
    (31) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (32) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (33) stmt -> . NAME DOT INDEX LPAREN exp RPAREN
    (34) stmt -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (41) stmt -> . exp DEC
    (42) stmt -> . exp INC
    (49) stmt -> . MAKE NAME
    (50) stmt -> . MAKE NAME EQUAL exp
    (51) stmt -> . MAKE NAME EQUAL list
    (52) stmt -> . NAME EQUAL exp
    (53) stmt -> . IF exp THEN stmtblock
    (54) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (57) stmt -> . DO stmtblock WHILE exp
    (58) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (61) stmt -> . PRINT LPAREN exp RPAREN
    (62) stmt -> . RETURN exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    error           shift and go to state 85
    RBRACE          reduce using rule 9 (stmtS -> .)
    NAME            shift and go to state 5
    MAKE            shift and go to state 10
    IF              shift and go to state 11
    DO              shift and go to state 12
    FOR             shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CALL            shift and go to state 16
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    stmtS                          shift and go to state 84
    stmt                           shift and go to state 86
    exp                            shift and go to state 7

state 54

    (58) stmt -> FOR NAME . EQUAL exp TO exp UNTIL step stmtblock

    EQUAL           shift and go to state 87


state 55

    (61) stmt -> PRINT LPAREN . exp RPAREN
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 88

state 56

    (62) stmt -> RETURN exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    SEMICOL         reduce using rule 62 (stmt -> RETURN exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 57

    (10) exp -> CALL NAME . LPAREN optargs RPAREN

    LPAREN          shift and go to state 89


state 58

    (35) exp -> MINUS INT .

    DEC             reduce using rule 35 (exp -> MINUS INT .)
    INC             reduce using rule 35 (exp -> MINUS INT .)
    PLUS            reduce using rule 35 (exp -> MINUS INT .)
    MINUS           reduce using rule 35 (exp -> MINUS INT .)
    MULTIPLY        reduce using rule 35 (exp -> MINUS INT .)
    DIVIDE          reduce using rule 35 (exp -> MINUS INT .)
    POWER           reduce using rule 35 (exp -> MINUS INT .)
    MODULUS         reduce using rule 35 (exp -> MINUS INT .)
    AND             reduce using rule 35 (exp -> MINUS INT .)
    OR              reduce using rule 35 (exp -> MINUS INT .)
    GT              reduce using rule 35 (exp -> MINUS INT .)
    LT              reduce using rule 35 (exp -> MINUS INT .)
    GTE             reduce using rule 35 (exp -> MINUS INT .)
    LTE             reduce using rule 35 (exp -> MINUS INT .)
    EE              reduce using rule 35 (exp -> MINUS INT .)
    NE              reduce using rule 35 (exp -> MINUS INT .)
    RPAREN          reduce using rule 35 (exp -> MINUS INT .)
    THEN            reduce using rule 35 (exp -> MINUS INT .)
    SEMICOL         reduce using rule 35 (exp -> MINUS INT .)
    TO              reduce using rule 35 (exp -> MINUS INT .)
    COMMA           reduce using rule 35 (exp -> MINUS INT .)
    RBRACK          reduce using rule 35 (exp -> MINUS INT .)
    UNTIL           reduce using rule 35 (exp -> MINUS INT .)
    LBRACE          reduce using rule 35 (exp -> MINUS INT .)


state 59

    (36) exp -> MINUS FLOAT .

    DEC             reduce using rule 36 (exp -> MINUS FLOAT .)
    INC             reduce using rule 36 (exp -> MINUS FLOAT .)
    PLUS            reduce using rule 36 (exp -> MINUS FLOAT .)
    MINUS           reduce using rule 36 (exp -> MINUS FLOAT .)
    MULTIPLY        reduce using rule 36 (exp -> MINUS FLOAT .)
    DIVIDE          reduce using rule 36 (exp -> MINUS FLOAT .)
    POWER           reduce using rule 36 (exp -> MINUS FLOAT .)
    MODULUS         reduce using rule 36 (exp -> MINUS FLOAT .)
    AND             reduce using rule 36 (exp -> MINUS FLOAT .)
    OR              reduce using rule 36 (exp -> MINUS FLOAT .)
    GT              reduce using rule 36 (exp -> MINUS FLOAT .)
    LT              reduce using rule 36 (exp -> MINUS FLOAT .)
    GTE             reduce using rule 36 (exp -> MINUS FLOAT .)
    LTE             reduce using rule 36 (exp -> MINUS FLOAT .)
    EE              reduce using rule 36 (exp -> MINUS FLOAT .)
    NE              reduce using rule 36 (exp -> MINUS FLOAT .)
    RPAREN          reduce using rule 36 (exp -> MINUS FLOAT .)
    THEN            reduce using rule 36 (exp -> MINUS FLOAT .)
    SEMICOL         reduce using rule 36 (exp -> MINUS FLOAT .)
    TO              reduce using rule 36 (exp -> MINUS FLOAT .)
    COMMA           reduce using rule 36 (exp -> MINUS FLOAT .)
    RBRACK          reduce using rule 36 (exp -> MINUS FLOAT .)
    UNTIL           reduce using rule 36 (exp -> MINUS FLOAT .)
    LBRACE          reduce using rule 36 (exp -> MINUS FLOAT .)


state 60

    (43) exp -> NOT exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 43 (exp -> NOT exp .)
    INC             reduce using rule 43 (exp -> NOT exp .)
    PLUS            reduce using rule 43 (exp -> NOT exp .)
    MINUS           reduce using rule 43 (exp -> NOT exp .)
    MULTIPLY        reduce using rule 43 (exp -> NOT exp .)
    DIVIDE          reduce using rule 43 (exp -> NOT exp .)
    POWER           reduce using rule 43 (exp -> NOT exp .)
    MODULUS         reduce using rule 43 (exp -> NOT exp .)
    AND             reduce using rule 43 (exp -> NOT exp .)
    OR              reduce using rule 43 (exp -> NOT exp .)
    GT              reduce using rule 43 (exp -> NOT exp .)
    LT              reduce using rule 43 (exp -> NOT exp .)
    GTE             reduce using rule 43 (exp -> NOT exp .)
    LTE             reduce using rule 43 (exp -> NOT exp .)
    EE              reduce using rule 43 (exp -> NOT exp .)
    NE              reduce using rule 43 (exp -> NOT exp .)
    RPAREN          reduce using rule 43 (exp -> NOT exp .)
    THEN            reduce using rule 43 (exp -> NOT exp .)
    SEMICOL         reduce using rule 43 (exp -> NOT exp .)
    TO              reduce using rule 43 (exp -> NOT exp .)
    COMMA           reduce using rule 43 (exp -> NOT exp .)
    RBRACK          reduce using rule 43 (exp -> NOT exp .)
    UNTIL           reduce using rule 43 (exp -> NOT exp .)
    LBRACE          reduce using rule 43 (exp -> NOT exp .)

  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! MULTIPLY        [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 37 ]
  ! POWER           [ shift and go to state 38 ]
  ! MODULUS         [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! GT              [ shift and go to state 42 ]
  ! LT              [ shift and go to state 43 ]
  ! GTE             [ shift and go to state 44 ]
  ! LTE             [ shift and go to state 45 ]
  ! EE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]


state 61

    (31) stmt -> NAME DOT POP . LPAREN exp RPAREN

    LPAREN          shift and go to state 90


state 62

    (32) stmt -> NAME DOT PUSH . LPAREN exp RPAREN

    LPAREN          shift and go to state 91


state 63

    (33) stmt -> NAME DOT INDEX . LPAREN exp RPAREN

    LPAREN          shift and go to state 92


state 64

    (34) stmt -> NAME DOT SLICE . LPAREN exp COMMA exp RPAREN

    LPAREN          shift and go to state 93


state 65

    (52) stmt -> NAME EQUAL exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    SEMICOL         reduce using rule 52 (stmt -> NAME EQUAL exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 66

    (48) exp -> LPAREN exp RPAREN .

    DEC             reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    INC             reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    MULTIPLY        reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    POWER           reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    MODULUS         reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    GT              reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    LT              reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    EE              reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    NE              reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    THEN            reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    SEMICOL         reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    TO              reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    RBRACK          reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    UNTIL           reduce using rule 48 (exp -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 48 (exp -> LPAREN exp RPAREN .)


state 67

    (15) exp -> exp PLUS exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 15 (exp -> exp PLUS exp .)
    INC             reduce using rule 15 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 15 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 15 (exp -> exp PLUS exp .)
    POWER           reduce using rule 15 (exp -> exp PLUS exp .)
    MODULUS         reduce using rule 15 (exp -> exp PLUS exp .)
    AND             reduce using rule 15 (exp -> exp PLUS exp .)
    OR              reduce using rule 15 (exp -> exp PLUS exp .)
    GT              reduce using rule 15 (exp -> exp PLUS exp .)
    LT              reduce using rule 15 (exp -> exp PLUS exp .)
    GTE             reduce using rule 15 (exp -> exp PLUS exp .)
    LTE             reduce using rule 15 (exp -> exp PLUS exp .)
    EE              reduce using rule 15 (exp -> exp PLUS exp .)
    NE              reduce using rule 15 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 15 (exp -> exp PLUS exp .)
    THEN            reduce using rule 15 (exp -> exp PLUS exp .)
    SEMICOL         reduce using rule 15 (exp -> exp PLUS exp .)
    TO              reduce using rule 15 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 15 (exp -> exp PLUS exp .)
    RBRACK          reduce using rule 15 (exp -> exp PLUS exp .)
    UNTIL           reduce using rule 15 (exp -> exp PLUS exp .)
    LBRACE          reduce using rule 15 (exp -> exp PLUS exp .)
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37

  ! MULTIPLY        [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! POWER           [ shift and go to state 38 ]
  ! MODULUS         [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! GT              [ shift and go to state 42 ]
  ! LT              [ shift and go to state 43 ]
  ! GTE             [ shift and go to state 44 ]
  ! LTE             [ shift and go to state 45 ]
  ! EE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]


state 68

    (16) exp -> exp MINUS exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 16 (exp -> exp MINUS exp .)
    INC             reduce using rule 16 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 16 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 16 (exp -> exp MINUS exp .)
    POWER           reduce using rule 16 (exp -> exp MINUS exp .)
    MODULUS         reduce using rule 16 (exp -> exp MINUS exp .)
    AND             reduce using rule 16 (exp -> exp MINUS exp .)
    OR              reduce using rule 16 (exp -> exp MINUS exp .)
    GT              reduce using rule 16 (exp -> exp MINUS exp .)
    LT              reduce using rule 16 (exp -> exp MINUS exp .)
    GTE             reduce using rule 16 (exp -> exp MINUS exp .)
    LTE             reduce using rule 16 (exp -> exp MINUS exp .)
    EE              reduce using rule 16 (exp -> exp MINUS exp .)
    NE              reduce using rule 16 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 16 (exp -> exp MINUS exp .)
    THEN            reduce using rule 16 (exp -> exp MINUS exp .)
    SEMICOL         reduce using rule 16 (exp -> exp MINUS exp .)
    TO              reduce using rule 16 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 16 (exp -> exp MINUS exp .)
    RBRACK          reduce using rule 16 (exp -> exp MINUS exp .)
    UNTIL           reduce using rule 16 (exp -> exp MINUS exp .)
    LBRACE          reduce using rule 16 (exp -> exp MINUS exp .)
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37

  ! MULTIPLY        [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! POWER           [ shift and go to state 38 ]
  ! MODULUS         [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! GT              [ shift and go to state 42 ]
  ! LT              [ shift and go to state 43 ]
  ! GTE             [ shift and go to state 44 ]
  ! LTE             [ shift and go to state 45 ]
  ! EE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]


state 69

    (17) exp -> exp MULTIPLY exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 17 (exp -> exp MULTIPLY exp .)
    INC             reduce using rule 17 (exp -> exp MULTIPLY exp .)
    PLUS            reduce using rule 17 (exp -> exp MULTIPLY exp .)
    MINUS           reduce using rule 17 (exp -> exp MULTIPLY exp .)
    MULTIPLY        reduce using rule 17 (exp -> exp MULTIPLY exp .)
    DIVIDE          reduce using rule 17 (exp -> exp MULTIPLY exp .)
    POWER           reduce using rule 17 (exp -> exp MULTIPLY exp .)
    MODULUS         reduce using rule 17 (exp -> exp MULTIPLY exp .)
    AND             reduce using rule 17 (exp -> exp MULTIPLY exp .)
    OR              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    GT              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    LT              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    GTE             reduce using rule 17 (exp -> exp MULTIPLY exp .)
    LTE             reduce using rule 17 (exp -> exp MULTIPLY exp .)
    EE              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    NE              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    RPAREN          reduce using rule 17 (exp -> exp MULTIPLY exp .)
    THEN            reduce using rule 17 (exp -> exp MULTIPLY exp .)
    SEMICOL         reduce using rule 17 (exp -> exp MULTIPLY exp .)
    TO              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    COMMA           reduce using rule 17 (exp -> exp MULTIPLY exp .)
    RBRACK          reduce using rule 17 (exp -> exp MULTIPLY exp .)
    UNTIL           reduce using rule 17 (exp -> exp MULTIPLY exp .)
    LBRACE          reduce using rule 17 (exp -> exp MULTIPLY exp .)

  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! MULTIPLY        [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 37 ]
  ! POWER           [ shift and go to state 38 ]
  ! MODULUS         [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! GT              [ shift and go to state 42 ]
  ! LT              [ shift and go to state 43 ]
  ! GTE             [ shift and go to state 44 ]
  ! LTE             [ shift and go to state 45 ]
  ! EE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]


state 70

    (18) exp -> exp DIVIDE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 18 (exp -> exp DIVIDE exp .)
    INC             reduce using rule 18 (exp -> exp DIVIDE exp .)
    PLUS            reduce using rule 18 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 18 (exp -> exp DIVIDE exp .)
    MULTIPLY        reduce using rule 18 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 18 (exp -> exp DIVIDE exp .)
    POWER           reduce using rule 18 (exp -> exp DIVIDE exp .)
    MODULUS         reduce using rule 18 (exp -> exp DIVIDE exp .)
    AND             reduce using rule 18 (exp -> exp DIVIDE exp .)
    OR              reduce using rule 18 (exp -> exp DIVIDE exp .)
    GT              reduce using rule 18 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 18 (exp -> exp DIVIDE exp .)
    GTE             reduce using rule 18 (exp -> exp DIVIDE exp .)
    LTE             reduce using rule 18 (exp -> exp DIVIDE exp .)
    EE              reduce using rule 18 (exp -> exp DIVIDE exp .)
    NE              reduce using rule 18 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 18 (exp -> exp DIVIDE exp .)
    THEN            reduce using rule 18 (exp -> exp DIVIDE exp .)
    SEMICOL         reduce using rule 18 (exp -> exp DIVIDE exp .)
    TO              reduce using rule 18 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 18 (exp -> exp DIVIDE exp .)
    RBRACK          reduce using rule 18 (exp -> exp DIVIDE exp .)
    UNTIL           reduce using rule 18 (exp -> exp DIVIDE exp .)
    LBRACE          reduce using rule 18 (exp -> exp DIVIDE exp .)

  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! MULTIPLY        [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 37 ]
  ! POWER           [ shift and go to state 38 ]
  ! MODULUS         [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! GT              [ shift and go to state 42 ]
  ! LT              [ shift and go to state 43 ]
  ! GTE             [ shift and go to state 44 ]
  ! LTE             [ shift and go to state 45 ]
  ! EE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]


state 71

    (19) exp -> exp POWER exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    DEC             reduce using rule 19 (exp -> exp POWER exp .)
    INC             reduce using rule 19 (exp -> exp POWER exp .)
    RPAREN          reduce using rule 19 (exp -> exp POWER exp .)
    THEN            reduce using rule 19 (exp -> exp POWER exp .)
    SEMICOL         reduce using rule 19 (exp -> exp POWER exp .)
    TO              reduce using rule 19 (exp -> exp POWER exp .)
    COMMA           reduce using rule 19 (exp -> exp POWER exp .)
    RBRACK          reduce using rule 19 (exp -> exp POWER exp .)
    UNTIL           reduce using rule 19 (exp -> exp POWER exp .)
    LBRACE          reduce using rule 19 (exp -> exp POWER exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47

  ! PLUS            [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! MINUS           [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! MULTIPLY        [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! DIVIDE          [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! POWER           [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! MODULUS         [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! AND             [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! OR              [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! GT              [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! LT              [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! GTE             [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! LTE             [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! EE              [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! NE              [ reduce using rule 19 (exp -> exp POWER exp .) ]


state 72

    (20) exp -> exp MODULUS exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    DEC             reduce using rule 20 (exp -> exp MODULUS exp .)
    INC             reduce using rule 20 (exp -> exp MODULUS exp .)
    RPAREN          reduce using rule 20 (exp -> exp MODULUS exp .)
    THEN            reduce using rule 20 (exp -> exp MODULUS exp .)
    SEMICOL         reduce using rule 20 (exp -> exp MODULUS exp .)
    TO              reduce using rule 20 (exp -> exp MODULUS exp .)
    COMMA           reduce using rule 20 (exp -> exp MODULUS exp .)
    RBRACK          reduce using rule 20 (exp -> exp MODULUS exp .)
    UNTIL           reduce using rule 20 (exp -> exp MODULUS exp .)
    LBRACE          reduce using rule 20 (exp -> exp MODULUS exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47

  ! PLUS            [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! MINUS           [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! MULTIPLY        [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! DIVIDE          [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! POWER           [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! MODULUS         [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! AND             [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! OR              [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! GT              [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! LT              [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! GTE             [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! LTE             [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! EE              [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! NE              [ reduce using rule 20 (exp -> exp MODULUS exp .) ]


state 73

    (21) exp -> exp AND exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 21 (exp -> exp AND exp .)
    INC             reduce using rule 21 (exp -> exp AND exp .)
    POWER           reduce using rule 21 (exp -> exp AND exp .)
    MODULUS         reduce using rule 21 (exp -> exp AND exp .)
    AND             reduce using rule 21 (exp -> exp AND exp .)
    OR              reduce using rule 21 (exp -> exp AND exp .)
    RPAREN          reduce using rule 21 (exp -> exp AND exp .)
    THEN            reduce using rule 21 (exp -> exp AND exp .)
    SEMICOL         reduce using rule 21 (exp -> exp AND exp .)
    TO              reduce using rule 21 (exp -> exp AND exp .)
    COMMA           reduce using rule 21 (exp -> exp AND exp .)
    RBRACK          reduce using rule 21 (exp -> exp AND exp .)
    UNTIL           reduce using rule 21 (exp -> exp AND exp .)
    LBRACE          reduce using rule 21 (exp -> exp AND exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47

  ! PLUS            [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! MULTIPLY        [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! GTE             [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! LTE             [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! EE              [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! NE              [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! POWER           [ shift and go to state 38 ]
  ! MODULUS         [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]


state 74

    (22) exp -> exp OR exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 22 (exp -> exp OR exp .)
    INC             reduce using rule 22 (exp -> exp OR exp .)
    POWER           reduce using rule 22 (exp -> exp OR exp .)
    MODULUS         reduce using rule 22 (exp -> exp OR exp .)
    OR              reduce using rule 22 (exp -> exp OR exp .)
    RPAREN          reduce using rule 22 (exp -> exp OR exp .)
    THEN            reduce using rule 22 (exp -> exp OR exp .)
    SEMICOL         reduce using rule 22 (exp -> exp OR exp .)
    TO              reduce using rule 22 (exp -> exp OR exp .)
    COMMA           reduce using rule 22 (exp -> exp OR exp .)
    RBRACK          reduce using rule 22 (exp -> exp OR exp .)
    UNTIL           reduce using rule 22 (exp -> exp OR exp .)
    LBRACE          reduce using rule 22 (exp -> exp OR exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    AND             shift and go to state 40
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47

  ! PLUS            [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! MULTIPLY        [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! GTE             [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! LTE             [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! EE              [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! NE              [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! POWER           [ shift and go to state 38 ]
  ! MODULUS         [ shift and go to state 39 ]
  ! OR              [ shift and go to state 41 ]


state 75

    (23) exp -> exp GT exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 23 (exp -> exp GT exp .)
    INC             reduce using rule 23 (exp -> exp GT exp .)
    POWER           reduce using rule 23 (exp -> exp GT exp .)
    MODULUS         reduce using rule 23 (exp -> exp GT exp .)
    AND             reduce using rule 23 (exp -> exp GT exp .)
    OR              reduce using rule 23 (exp -> exp GT exp .)
    GT              reduce using rule 23 (exp -> exp GT exp .)
    LT              reduce using rule 23 (exp -> exp GT exp .)
    GTE             reduce using rule 23 (exp -> exp GT exp .)
    LTE             reduce using rule 23 (exp -> exp GT exp .)
    EE              reduce using rule 23 (exp -> exp GT exp .)
    NE              reduce using rule 23 (exp -> exp GT exp .)
    RPAREN          reduce using rule 23 (exp -> exp GT exp .)
    THEN            reduce using rule 23 (exp -> exp GT exp .)
    SEMICOL         reduce using rule 23 (exp -> exp GT exp .)
    TO              reduce using rule 23 (exp -> exp GT exp .)
    COMMA           reduce using rule 23 (exp -> exp GT exp .)
    RBRACK          reduce using rule 23 (exp -> exp GT exp .)
    UNTIL           reduce using rule 23 (exp -> exp GT exp .)
    LBRACE          reduce using rule 23 (exp -> exp GT exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37

  ! PLUS            [ reduce using rule 23 (exp -> exp GT exp .) ]
  ! MINUS           [ reduce using rule 23 (exp -> exp GT exp .) ]
  ! MULTIPLY        [ reduce using rule 23 (exp -> exp GT exp .) ]
  ! DIVIDE          [ reduce using rule 23 (exp -> exp GT exp .) ]
  ! POWER           [ shift and go to state 38 ]
  ! MODULUS         [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! GT              [ shift and go to state 42 ]
  ! LT              [ shift and go to state 43 ]
  ! GTE             [ shift and go to state 44 ]
  ! LTE             [ shift and go to state 45 ]
  ! EE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]


state 76

    (24) exp -> exp LT exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 24 (exp -> exp LT exp .)
    INC             reduce using rule 24 (exp -> exp LT exp .)
    POWER           reduce using rule 24 (exp -> exp LT exp .)
    MODULUS         reduce using rule 24 (exp -> exp LT exp .)
    AND             reduce using rule 24 (exp -> exp LT exp .)
    OR              reduce using rule 24 (exp -> exp LT exp .)
    GT              reduce using rule 24 (exp -> exp LT exp .)
    LT              reduce using rule 24 (exp -> exp LT exp .)
    GTE             reduce using rule 24 (exp -> exp LT exp .)
    LTE             reduce using rule 24 (exp -> exp LT exp .)
    EE              reduce using rule 24 (exp -> exp LT exp .)
    NE              reduce using rule 24 (exp -> exp LT exp .)
    RPAREN          reduce using rule 24 (exp -> exp LT exp .)
    THEN            reduce using rule 24 (exp -> exp LT exp .)
    SEMICOL         reduce using rule 24 (exp -> exp LT exp .)
    TO              reduce using rule 24 (exp -> exp LT exp .)
    COMMA           reduce using rule 24 (exp -> exp LT exp .)
    RBRACK          reduce using rule 24 (exp -> exp LT exp .)
    UNTIL           reduce using rule 24 (exp -> exp LT exp .)
    LBRACE          reduce using rule 24 (exp -> exp LT exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37

  ! PLUS            [ reduce using rule 24 (exp -> exp LT exp .) ]
  ! MINUS           [ reduce using rule 24 (exp -> exp LT exp .) ]
  ! MULTIPLY        [ reduce using rule 24 (exp -> exp LT exp .) ]
  ! DIVIDE          [ reduce using rule 24 (exp -> exp LT exp .) ]
  ! POWER           [ shift and go to state 38 ]
  ! MODULUS         [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! GT              [ shift and go to state 42 ]
  ! LT              [ shift and go to state 43 ]
  ! GTE             [ shift and go to state 44 ]
  ! LTE             [ shift and go to state 45 ]
  ! EE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]


state 77

    (25) exp -> exp GTE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 25 (exp -> exp GTE exp .)
    INC             reduce using rule 25 (exp -> exp GTE exp .)
    POWER           reduce using rule 25 (exp -> exp GTE exp .)
    MODULUS         reduce using rule 25 (exp -> exp GTE exp .)
    AND             reduce using rule 25 (exp -> exp GTE exp .)
    OR              reduce using rule 25 (exp -> exp GTE exp .)
    GT              reduce using rule 25 (exp -> exp GTE exp .)
    LT              reduce using rule 25 (exp -> exp GTE exp .)
    GTE             reduce using rule 25 (exp -> exp GTE exp .)
    LTE             reduce using rule 25 (exp -> exp GTE exp .)
    EE              reduce using rule 25 (exp -> exp GTE exp .)
    NE              reduce using rule 25 (exp -> exp GTE exp .)
    RPAREN          reduce using rule 25 (exp -> exp GTE exp .)
    THEN            reduce using rule 25 (exp -> exp GTE exp .)
    SEMICOL         reduce using rule 25 (exp -> exp GTE exp .)
    TO              reduce using rule 25 (exp -> exp GTE exp .)
    COMMA           reduce using rule 25 (exp -> exp GTE exp .)
    RBRACK          reduce using rule 25 (exp -> exp GTE exp .)
    UNTIL           reduce using rule 25 (exp -> exp GTE exp .)
    LBRACE          reduce using rule 25 (exp -> exp GTE exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37

  ! PLUS            [ reduce using rule 25 (exp -> exp GTE exp .) ]
  ! MINUS           [ reduce using rule 25 (exp -> exp GTE exp .) ]
  ! MULTIPLY        [ reduce using rule 25 (exp -> exp GTE exp .) ]
  ! DIVIDE          [ reduce using rule 25 (exp -> exp GTE exp .) ]
  ! POWER           [ shift and go to state 38 ]
  ! MODULUS         [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! GT              [ shift and go to state 42 ]
  ! LT              [ shift and go to state 43 ]
  ! GTE             [ shift and go to state 44 ]
  ! LTE             [ shift and go to state 45 ]
  ! EE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]


state 78

    (26) exp -> exp LTE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 26 (exp -> exp LTE exp .)
    INC             reduce using rule 26 (exp -> exp LTE exp .)
    POWER           reduce using rule 26 (exp -> exp LTE exp .)
    MODULUS         reduce using rule 26 (exp -> exp LTE exp .)
    AND             reduce using rule 26 (exp -> exp LTE exp .)
    OR              reduce using rule 26 (exp -> exp LTE exp .)
    GT              reduce using rule 26 (exp -> exp LTE exp .)
    LT              reduce using rule 26 (exp -> exp LTE exp .)
    GTE             reduce using rule 26 (exp -> exp LTE exp .)
    LTE             reduce using rule 26 (exp -> exp LTE exp .)
    EE              reduce using rule 26 (exp -> exp LTE exp .)
    NE              reduce using rule 26 (exp -> exp LTE exp .)
    RPAREN          reduce using rule 26 (exp -> exp LTE exp .)
    THEN            reduce using rule 26 (exp -> exp LTE exp .)
    SEMICOL         reduce using rule 26 (exp -> exp LTE exp .)
    TO              reduce using rule 26 (exp -> exp LTE exp .)
    COMMA           reduce using rule 26 (exp -> exp LTE exp .)
    RBRACK          reduce using rule 26 (exp -> exp LTE exp .)
    UNTIL           reduce using rule 26 (exp -> exp LTE exp .)
    LBRACE          reduce using rule 26 (exp -> exp LTE exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37

  ! PLUS            [ reduce using rule 26 (exp -> exp LTE exp .) ]
  ! MINUS           [ reduce using rule 26 (exp -> exp LTE exp .) ]
  ! MULTIPLY        [ reduce using rule 26 (exp -> exp LTE exp .) ]
  ! DIVIDE          [ reduce using rule 26 (exp -> exp LTE exp .) ]
  ! POWER           [ shift and go to state 38 ]
  ! MODULUS         [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! GT              [ shift and go to state 42 ]
  ! LT              [ shift and go to state 43 ]
  ! GTE             [ shift and go to state 44 ]
  ! LTE             [ shift and go to state 45 ]
  ! EE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]


state 79

    (27) exp -> exp EE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 27 (exp -> exp EE exp .)
    INC             reduce using rule 27 (exp -> exp EE exp .)
    POWER           reduce using rule 27 (exp -> exp EE exp .)
    MODULUS         reduce using rule 27 (exp -> exp EE exp .)
    AND             reduce using rule 27 (exp -> exp EE exp .)
    OR              reduce using rule 27 (exp -> exp EE exp .)
    EE              reduce using rule 27 (exp -> exp EE exp .)
    NE              reduce using rule 27 (exp -> exp EE exp .)
    RPAREN          reduce using rule 27 (exp -> exp EE exp .)
    THEN            reduce using rule 27 (exp -> exp EE exp .)
    SEMICOL         reduce using rule 27 (exp -> exp EE exp .)
    TO              reduce using rule 27 (exp -> exp EE exp .)
    COMMA           reduce using rule 27 (exp -> exp EE exp .)
    RBRACK          reduce using rule 27 (exp -> exp EE exp .)
    UNTIL           reduce using rule 27 (exp -> exp EE exp .)
    LBRACE          reduce using rule 27 (exp -> exp EE exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45

  ! PLUS            [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! MINUS           [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! MULTIPLY        [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! DIVIDE          [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! GT              [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! LT              [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! GTE             [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! LTE             [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! POWER           [ shift and go to state 38 ]
  ! MODULUS         [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! EE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]


state 80

    (28) exp -> exp NE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 28 (exp -> exp NE exp .)
    INC             reduce using rule 28 (exp -> exp NE exp .)
    POWER           reduce using rule 28 (exp -> exp NE exp .)
    MODULUS         reduce using rule 28 (exp -> exp NE exp .)
    AND             reduce using rule 28 (exp -> exp NE exp .)
    OR              reduce using rule 28 (exp -> exp NE exp .)
    EE              reduce using rule 28 (exp -> exp NE exp .)
    NE              reduce using rule 28 (exp -> exp NE exp .)
    RPAREN          reduce using rule 28 (exp -> exp NE exp .)
    THEN            reduce using rule 28 (exp -> exp NE exp .)
    SEMICOL         reduce using rule 28 (exp -> exp NE exp .)
    TO              reduce using rule 28 (exp -> exp NE exp .)
    COMMA           reduce using rule 28 (exp -> exp NE exp .)
    RBRACK          reduce using rule 28 (exp -> exp NE exp .)
    UNTIL           reduce using rule 28 (exp -> exp NE exp .)
    LBRACE          reduce using rule 28 (exp -> exp NE exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45

  ! PLUS            [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! MINUS           [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! MULTIPLY        [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! DIVIDE          [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! GT              [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! LT              [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! GTE             [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! LTE             [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! POWER           [ shift and go to state 38 ]
  ! MODULUS         [ shift and go to state 39 ]
  ! AND             [ shift and go to state 40 ]
  ! OR              [ shift and go to state 41 ]
  ! EE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]


state 81

    (50) stmt -> MAKE NAME EQUAL . exp
    (51) stmt -> MAKE NAME EQUAL . list
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN
    (30) list -> . LBRACK optargs RBRACK

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6
    LBRACK          shift and go to state 96

    exp                            shift and go to state 94
    list                           shift and go to state 95

state 82

    (53) stmt -> IF exp THEN . stmtblock
    (54) stmt -> IF exp THEN . stmtblock elsif ELSE THEN stmtblock
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 53

    stmtblock                      shift and go to state 97

state 83

    (57) stmt -> DO stmtblock WHILE . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 98

state 84

    (5) stmtblock -> LBRACE stmtS . RBRACE

    RBRACE          shift and go to state 99


state 85

    (6) stmtblock -> LBRACE error . RBRACE
    (8) stmtS -> error . SEMICOL stmtS

    RBRACE          shift and go to state 100
    SEMICOL         shift and go to state 101


state 86

    (7) stmtS -> stmt . SEMICOL stmtS

    SEMICOL         shift and go to state 102


state 87

    (58) stmt -> FOR NAME EQUAL . exp TO exp UNTIL step stmtblock
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 103

state 88

    (61) stmt -> PRINT LPAREN exp . RPAREN
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    RPAREN          shift and go to state 104
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 89

    (10) exp -> CALL NAME LPAREN . optargs RPAREN
    (11) optargs -> . args
    (12) optargs -> .
    (13) args -> . exp COMMA args
    (14) args -> . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    RPAREN          reduce using rule 12 (optargs -> .)
    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    optargs                        shift and go to state 105
    args                           shift and go to state 106
    exp                            shift and go to state 107

state 90

    (31) stmt -> NAME DOT POP LPAREN . exp RPAREN
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 108

state 91

    (32) stmt -> NAME DOT PUSH LPAREN . exp RPAREN
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 109

state 92

    (33) stmt -> NAME DOT INDEX LPAREN . exp RPAREN
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 110

state 93

    (34) stmt -> NAME DOT SLICE LPAREN . exp COMMA exp RPAREN
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 111

state 94

    (50) stmt -> MAKE NAME EQUAL exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    SEMICOL         reduce using rule 50 (stmt -> MAKE NAME EQUAL exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 95

    (51) stmt -> MAKE NAME EQUAL list .

    SEMICOL         reduce using rule 51 (stmt -> MAKE NAME EQUAL list .)


state 96

    (30) list -> LBRACK . optargs RBRACK
    (11) optargs -> . args
    (12) optargs -> .
    (13) args -> . exp COMMA args
    (14) args -> . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    RBRACK          reduce using rule 12 (optargs -> .)
    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    optargs                        shift and go to state 112
    args                           shift and go to state 106
    exp                            shift and go to state 107

state 97

    (53) stmt -> IF exp THEN stmtblock .
    (54) stmt -> IF exp THEN stmtblock . elsif ELSE THEN stmtblock
    (55) elsif -> . ELIF exp THEN stmtblock elsif
    (56) elsif -> .

    SEMICOL         reduce using rule 53 (stmt -> IF exp THEN stmtblock .)
    ELIF            shift and go to state 114
    ELSE            reduce using rule 56 (elsif -> .)

    elsif                          shift and go to state 113

state 98

    (57) stmt -> DO stmtblock WHILE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    SEMICOL         reduce using rule 57 (stmt -> DO stmtblock WHILE exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 99

    (5) stmtblock -> LBRACE stmtS RBRACE .

    WHILE           reduce using rule 5 (stmtblock -> LBRACE stmtS RBRACE .)
    ELIF            reduce using rule 5 (stmtblock -> LBRACE stmtS RBRACE .)
    ELSE            reduce using rule 5 (stmtblock -> LBRACE stmtS RBRACE .)
    SEMICOL         reduce using rule 5 (stmtblock -> LBRACE stmtS RBRACE .)


state 100

    (6) stmtblock -> LBRACE error RBRACE .

    WHILE           reduce using rule 6 (stmtblock -> LBRACE error RBRACE .)
    ELIF            reduce using rule 6 (stmtblock -> LBRACE error RBRACE .)
    ELSE            reduce using rule 6 (stmtblock -> LBRACE error RBRACE .)
    SEMICOL         reduce using rule 6 (stmtblock -> LBRACE error RBRACE .)


state 101

    (8) stmtS -> error SEMICOL . stmtS
    (7) stmtS -> . stmt SEMICOL stmtS
    (8) stmtS -> . error SEMICOL stmtS
    (9) stmtS -> .
    (31) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (32) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (33) stmt -> . NAME DOT INDEX LPAREN exp RPAREN
    (34) stmt -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (41) stmt -> . exp DEC
    (42) stmt -> . exp INC
    (49) stmt -> . MAKE NAME
    (50) stmt -> . MAKE NAME EQUAL exp
    (51) stmt -> . MAKE NAME EQUAL list
    (52) stmt -> . NAME EQUAL exp
    (53) stmt -> . IF exp THEN stmtblock
    (54) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (57) stmt -> . DO stmtblock WHILE exp
    (58) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (61) stmt -> . PRINT LPAREN exp RPAREN
    (62) stmt -> . RETURN exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    error           shift and go to state 115
    RBRACE          reduce using rule 9 (stmtS -> .)
    NAME            shift and go to state 5
    MAKE            shift and go to state 10
    IF              shift and go to state 11
    DO              shift and go to state 12
    FOR             shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CALL            shift and go to state 16
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    stmtS                          shift and go to state 116
    stmt                           shift and go to state 86
    exp                            shift and go to state 7

state 102

    (7) stmtS -> stmt SEMICOL . stmtS
    (7) stmtS -> . stmt SEMICOL stmtS
    (8) stmtS -> . error SEMICOL stmtS
    (9) stmtS -> .
    (31) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (32) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (33) stmt -> . NAME DOT INDEX LPAREN exp RPAREN
    (34) stmt -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (41) stmt -> . exp DEC
    (42) stmt -> . exp INC
    (49) stmt -> . MAKE NAME
    (50) stmt -> . MAKE NAME EQUAL exp
    (51) stmt -> . MAKE NAME EQUAL list
    (52) stmt -> . NAME EQUAL exp
    (53) stmt -> . IF exp THEN stmtblock
    (54) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (57) stmt -> . DO stmtblock WHILE exp
    (58) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (61) stmt -> . PRINT LPAREN exp RPAREN
    (62) stmt -> . RETURN exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    error           shift and go to state 115
    RBRACE          reduce using rule 9 (stmtS -> .)
    NAME            shift and go to state 5
    MAKE            shift and go to state 10
    IF              shift and go to state 11
    DO              shift and go to state 12
    FOR             shift and go to state 13
    PRINT           shift and go to state 14
    RETURN          shift and go to state 15
    CALL            shift and go to state 16
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    stmt                           shift and go to state 86
    stmtS                          shift and go to state 117
    exp                            shift and go to state 7

state 103

    (58) stmt -> FOR NAME EQUAL exp . TO exp UNTIL step stmtblock
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    TO              shift and go to state 118
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 104

    (61) stmt -> PRINT LPAREN exp RPAREN .

    SEMICOL         reduce using rule 61 (stmt -> PRINT LPAREN exp RPAREN .)


state 105

    (10) exp -> CALL NAME LPAREN optargs . RPAREN

    RPAREN          shift and go to state 119


state 106

    (11) optargs -> args .

    RPAREN          reduce using rule 11 (optargs -> args .)
    RBRACK          reduce using rule 11 (optargs -> args .)


state 107

    (13) args -> exp . COMMA args
    (14) args -> exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    COMMA           shift and go to state 120
    RPAREN          reduce using rule 14 (args -> exp .)
    RBRACK          reduce using rule 14 (args -> exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 108

    (31) stmt -> NAME DOT POP LPAREN exp . RPAREN
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    RPAREN          shift and go to state 121
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 109

    (32) stmt -> NAME DOT PUSH LPAREN exp . RPAREN
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    RPAREN          shift and go to state 122
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 110

    (33) stmt -> NAME DOT INDEX LPAREN exp . RPAREN
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    RPAREN          shift and go to state 123
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 111

    (34) stmt -> NAME DOT SLICE LPAREN exp . COMMA exp RPAREN
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    COMMA           shift and go to state 124
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 112

    (30) list -> LBRACK optargs . RBRACK

    RBRACK          shift and go to state 125


state 113

    (54) stmt -> IF exp THEN stmtblock elsif . ELSE THEN stmtblock

    ELSE            shift and go to state 126


state 114

    (55) elsif -> ELIF . exp THEN stmtblock elsif
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 127

state 115

    (8) stmtS -> error . SEMICOL stmtS

    SEMICOL         shift and go to state 101


state 116

    (8) stmtS -> error SEMICOL stmtS .

    RBRACE          reduce using rule 8 (stmtS -> error SEMICOL stmtS .)


state 117

    (7) stmtS -> stmt SEMICOL stmtS .

    RBRACE          reduce using rule 7 (stmtS -> stmt SEMICOL stmtS .)


state 118

    (58) stmt -> FOR NAME EQUAL exp TO . exp UNTIL step stmtblock
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 128

state 119

    (10) exp -> CALL NAME LPAREN optargs RPAREN .

    DEC             reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    INC             reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    PLUS            reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    MINUS           reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    MULTIPLY        reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    DIVIDE          reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    POWER           reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    MODULUS         reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    AND             reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    OR              reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    GT              reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    LT              reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    GTE             reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    LTE             reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    EE              reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    NE              reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    RPAREN          reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    THEN            reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    SEMICOL         reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    TO              reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    COMMA           reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    RBRACK          reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    UNTIL           reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    LBRACE          reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)


state 120

    (13) args -> exp COMMA . args
    (13) args -> . exp COMMA args
    (14) args -> . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 107
    args                           shift and go to state 129

state 121

    (31) stmt -> NAME DOT POP LPAREN exp RPAREN .

    SEMICOL         reduce using rule 31 (stmt -> NAME DOT POP LPAREN exp RPAREN .)


state 122

    (32) stmt -> NAME DOT PUSH LPAREN exp RPAREN .

    SEMICOL         reduce using rule 32 (stmt -> NAME DOT PUSH LPAREN exp RPAREN .)


state 123

    (33) stmt -> NAME DOT INDEX LPAREN exp RPAREN .

    SEMICOL         reduce using rule 33 (stmt -> NAME DOT INDEX LPAREN exp RPAREN .)


state 124

    (34) stmt -> NAME DOT SLICE LPAREN exp COMMA . exp RPAREN
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 130

state 125

    (30) list -> LBRACK optargs RBRACK .

    SEMICOL         reduce using rule 30 (list -> LBRACK optargs RBRACK .)


state 126

    (54) stmt -> IF exp THEN stmtblock elsif ELSE . THEN stmtblock

    THEN            shift and go to state 131


state 127

    (55) elsif -> ELIF exp . THEN stmtblock elsif
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    THEN            shift and go to state 132
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 128

    (58) stmt -> FOR NAME EQUAL exp TO exp . UNTIL step stmtblock
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    UNTIL           shift and go to state 133
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 129

    (13) args -> exp COMMA args .

    RPAREN          reduce using rule 13 (args -> exp COMMA args .)
    RBRACK          reduce using rule 13 (args -> exp COMMA args .)


state 130

    (34) stmt -> NAME DOT SLICE LPAREN exp COMMA exp . RPAREN
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    RPAREN          shift and go to state 134
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 131

    (54) stmt -> IF exp THEN stmtblock elsif ELSE THEN . stmtblock
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 53

    stmtblock                      shift and go to state 135

state 132

    (55) elsif -> ELIF exp THEN . stmtblock elsif
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 53

    stmtblock                      shift and go to state 136

state 133

    (58) stmt -> FOR NAME EQUAL exp TO exp UNTIL . step stmtblock
    (59) step -> . exp
    (60) step -> .
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (35) exp -> . MINUS INT
    (36) exp -> . MINUS FLOAT
    (37) exp -> . INT
    (38) exp -> . FLOAT
    (39) exp -> . DEC exp
    (40) exp -> . INC exp
    (43) exp -> . NOT exp
    (44) exp -> . TRUE
    (45) exp -> . FALSE
    (46) exp -> . STRING
    (47) exp -> . CHAR
    (48) exp -> . LPAREN exp RPAREN

    LBRACE          reduce using rule 60 (step -> .)
    CALL            shift and go to state 16
    NAME            shift and go to state 31
    MINUS           shift and go to state 17
    INT             shift and go to state 18
    FLOAT           shift and go to state 19
    DEC             shift and go to state 8
    INC             shift and go to state 9
    NOT             shift and go to state 20
    TRUE            shift and go to state 21
    FALSE           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    LPAREN          shift and go to state 6

    exp                            shift and go to state 137
    step                           shift and go to state 138

state 134

    (34) stmt -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .

    SEMICOL         reduce using rule 34 (stmt -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)


state 135

    (54) stmt -> IF exp THEN stmtblock elsif ELSE THEN stmtblock .

    SEMICOL         reduce using rule 54 (stmt -> IF exp THEN stmtblock elsif ELSE THEN stmtblock .)


state 136

    (55) elsif -> ELIF exp THEN stmtblock . elsif
    (55) elsif -> . ELIF exp THEN stmtblock elsif
    (56) elsif -> .

    ELIF            shift and go to state 114
    ELSE            reduce using rule 56 (elsif -> .)

    elsif                          shift and go to state 139

state 137

    (59) step -> exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    LBRACE          reduce using rule 59 (step -> exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLY        shift and go to state 36
    DIVIDE          shift and go to state 37
    POWER           shift and go to state 38
    MODULUS         shift and go to state 39
    AND             shift and go to state 40
    OR              shift and go to state 41
    GT              shift and go to state 42
    LT              shift and go to state 43
    GTE             shift and go to state 44
    LTE             shift and go to state 45
    EE              shift and go to state 46
    NE              shift and go to state 47


state 138

    (58) stmt -> FOR NAME EQUAL exp TO exp UNTIL step . stmtblock
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 53

    stmtblock                      shift and go to state 140

state 139

    (55) elsif -> ELIF exp THEN stmtblock elsif .

    ELSE            reduce using rule 55 (elsif -> ELIF exp THEN stmtblock elsif .)


state 140

    (58) stmt -> FOR NAME EQUAL exp TO exp UNTIL step stmtblock .

    SEMICOL         reduce using rule 58 (stmt -> FOR NAME EQUAL exp TO exp UNTIL step stmtblock .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 71 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 71 resolved as shift
WARNING: shift/reduce conflict for POWER in state 71 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 71 resolved as shift
WARNING: shift/reduce conflict for AND in state 71 resolved as shift
WARNING: shift/reduce conflict for OR in state 71 resolved as shift
WARNING: shift/reduce conflict for GT in state 71 resolved as shift
WARNING: shift/reduce conflict for LT in state 71 resolved as shift
WARNING: shift/reduce conflict for GTE in state 71 resolved as shift
WARNING: shift/reduce conflict for LTE in state 71 resolved as shift
WARNING: shift/reduce conflict for EE in state 71 resolved as shift
WARNING: shift/reduce conflict for NE in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 72 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 72 resolved as shift
WARNING: shift/reduce conflict for POWER in state 72 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 72 resolved as shift
WARNING: shift/reduce conflict for AND in state 72 resolved as shift
WARNING: shift/reduce conflict for OR in state 72 resolved as shift
WARNING: shift/reduce conflict for GT in state 72 resolved as shift
WARNING: shift/reduce conflict for LT in state 72 resolved as shift
WARNING: shift/reduce conflict for GTE in state 72 resolved as shift
WARNING: shift/reduce conflict for LTE in state 72 resolved as shift
WARNING: shift/reduce conflict for EE in state 72 resolved as shift
WARNING: shift/reduce conflict for NE in state 72 resolved as shift
