Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    FUNCTION
    MULTICOMMENT
    NEWL

Grammar

Rule 0     S' -> uz
Rule 1     uz -> line uz
Rule 2     line -> stmt SEMICOL
Rule 3     uz -> error SEMICOL
Rule 4     uz -> <empty>
Rule 5     stmtblock -> LBRACE stmtS RBRACE
Rule 6     stmtblock -> LBRACE error RBRACE
Rule 7     stmtS -> stmt SEMICOL stmtS
Rule 8     stmtS -> error SEMICOL stmtS
Rule 9     stmtS -> <empty>
Rule 10    exp -> CALL NAME LPAREN optargs RPAREN
Rule 11    optargs -> args
Rule 12    optargs -> <empty>
Rule 13    args -> exp COMMA args
Rule 14    args -> exp
Rule 15    exp -> exp PLUS exp
Rule 16    exp -> exp MINUS exp
Rule 17    exp -> exp MULTIPLY exp
Rule 18    exp -> exp DIVIDE exp
Rule 19    exp -> exp POWER exp
Rule 20    exp -> exp MODULUS exp
Rule 21    exp -> exp AND exp
Rule 22    exp -> exp OR exp
Rule 23    exp -> exp GT exp
Rule 24    exp -> exp LT exp
Rule 25    exp -> exp GTE exp
Rule 26    exp -> exp LTE exp
Rule 27    exp -> exp EE exp
Rule 28    exp -> exp NE exp
Rule 29    exp -> NAME
Rule 30    list -> LBRACK optargs RBRACK
Rule 31    stmt -> NAME DOT POP LPAREN exp RPAREN
Rule 32    stmt -> NAME DOT PUSH LPAREN exp RPAREN
Rule 33    stmt -> NAME DOT INDEX LPAREN exp RPAREN
Rule 34    stmt -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN
Rule 35    stmt -> STRUCT NAME SEP structargs SEP
Rule 36    structargs -> structexp COMMA structargs
Rule 37    structargs -> structexp
Rule 38    structexp -> NAME
Rule 39    structexp -> NAME EQUAL exp
Rule 40    stmt -> MAKE NAME NAME
Rule 41    stmt -> NAME DOT NAME EQUAL exp
Rule 42    exp -> NAME DOT NAME
Rule 43    exp -> MINUS INT
Rule 44    exp -> MINUS FLOAT
Rule 45    exp -> INT
Rule 46    exp -> FLOAT
Rule 47    exp -> DEC exp
Rule 48    exp -> INC exp
Rule 49    stmt -> exp DEC
Rule 50    stmt -> exp INC
Rule 51    exp -> NOT exp
Rule 52    exp -> TRUE
Rule 53    exp -> FALSE
Rule 54    exp -> STRING
Rule 55    exp -> CHAR
Rule 56    exp -> LPAREN exp RPAREN
Rule 57    stmt -> MAKE NAME
Rule 58    stmt -> MAKE NAME EQUAL exp
Rule 59    stmt -> MAKE NAME EQUAL list
Rule 60    stmt -> NAME EQUAL exp
Rule 61    stmt -> IF exp THEN stmtblock
Rule 62    stmt -> IF exp THEN stmtblock elsif ELSE THEN stmtblock
Rule 63    elsif -> ELIF exp THEN stmtblock elsif
Rule 64    elsif -> <empty>
Rule 65    stmt -> BREAK
Rule 66    stmt -> CONTINUE
Rule 67    stmt -> DO stmtblock WHILE exp
Rule 68    stmt -> FOR NAME EQUAL exp TO exp UNTIL step stmtblock
Rule 69    step -> exp
Rule 70    step -> <empty>
Rule 71    stmt -> PRINT LPAREN optargs RPAREN
Rule 72    stmt -> RETURN exp

Terminals, with rules where they appear

AND                  : 21
BREAK                : 65
CALL                 : 10
CHAR                 : 55
COMMA                : 13 34 36
COMMENT              : 
CONTINUE             : 66
DEC                  : 47 49
DIVIDE               : 18
DO                   : 67
DOT                  : 31 32 33 34 41 42
EE                   : 27
ELIF                 : 63
ELSE                 : 62
EQUAL                : 39 41 58 59 60 68
FALSE                : 53
FLOAT                : 44 46
FOR                  : 68
FUNCTION             : 
GT                   : 23
GTE                  : 25
IF                   : 61 62
INC                  : 48 50
INDEX                : 33
INT                  : 43 45
LBRACE               : 5 6
LBRACK               : 30
LPAREN               : 10 31 32 33 34 56 71
LT                   : 24
LTE                  : 26
MAKE                 : 40 57 58 59
MINUS                : 16 43 44
MODULUS              : 20
MULTICOMMENT         : 
MULTIPLY             : 17
NAME                 : 10 29 31 32 33 34 35 38 39 40 40 41 41 42 42 57 58 59 60 68
NE                   : 28
NEWL                 : 
NOT                  : 51
OR                   : 22
PLUS                 : 15
POP                  : 31
POWER                : 19
PRINT                : 71
PUSH                 : 32
RBRACE               : 5 6
RBRACK               : 30
RETURN               : 72
RPAREN               : 10 31 32 33 34 56 71
SEMICOL              : 2 3 7 8
SEP                  : 35 35
SLICE                : 34
STRING               : 54
STRUCT               : 35
THEN                 : 61 62 62 63
TO                   : 68
TRUE                 : 52
UNTIL                : 68
WHILE                : 67
error                : 3 6 8

Nonterminals, with rules where they appear

args                 : 11 13
elsif                : 62 63
exp                  : 13 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 31 32 33 34 34 39 41 47 48 49 50 51 56 58 60 61 62 63 67 68 68 69 72
line                 : 1
list                 : 59
optargs              : 10 30 71
step                 : 68
stmt                 : 2 7
stmtS                : 5 7 8
stmtblock            : 61 62 62 63 67 68
structargs           : 35 36
structexp            : 36 37
uz                   : 1 0

Parsing method: LALR

state 0

    (0) S' -> . uz
    (1) uz -> . line uz
    (3) uz -> . error SEMICOL
    (4) uz -> .
    (2) line -> . stmt SEMICOL
    (31) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (32) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (33) stmt -> . NAME DOT INDEX LPAREN exp RPAREN
    (34) stmt -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (35) stmt -> . STRUCT NAME SEP structargs SEP
    (40) stmt -> . MAKE NAME NAME
    (41) stmt -> . NAME DOT NAME EQUAL exp
    (49) stmt -> . exp DEC
    (50) stmt -> . exp INC
    (57) stmt -> . MAKE NAME
    (58) stmt -> . MAKE NAME EQUAL exp
    (59) stmt -> . MAKE NAME EQUAL list
    (60) stmt -> . NAME EQUAL exp
    (61) stmt -> . IF exp THEN stmtblock
    (62) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (65) stmt -> . BREAK
    (66) stmt -> . CONTINUE
    (67) stmt -> . DO stmtblock WHILE exp
    (68) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (71) stmt -> . PRINT LPAREN optargs RPAREN
    (72) stmt -> . RETURN exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    error           shift and go to state 3
    $end            reduce using rule 4 (uz -> .)
    NAME            shift and go to state 5
    STRUCT          shift and go to state 8
    MAKE            shift and go to state 9
    IF              shift and go to state 12
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 16
    PRINT           shift and go to state 17
    RETURN          shift and go to state 18
    CALL            shift and go to state 19
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    uz                             shift and go to state 1
    line                           shift and go to state 2
    stmt                           shift and go to state 4
    exp                            shift and go to state 7

state 1

    (0) S' -> uz .



state 2

    (1) uz -> line . uz
    (1) uz -> . line uz
    (3) uz -> . error SEMICOL
    (4) uz -> .
    (2) line -> . stmt SEMICOL
    (31) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (32) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (33) stmt -> . NAME DOT INDEX LPAREN exp RPAREN
    (34) stmt -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (35) stmt -> . STRUCT NAME SEP structargs SEP
    (40) stmt -> . MAKE NAME NAME
    (41) stmt -> . NAME DOT NAME EQUAL exp
    (49) stmt -> . exp DEC
    (50) stmt -> . exp INC
    (57) stmt -> . MAKE NAME
    (58) stmt -> . MAKE NAME EQUAL exp
    (59) stmt -> . MAKE NAME EQUAL list
    (60) stmt -> . NAME EQUAL exp
    (61) stmt -> . IF exp THEN stmtblock
    (62) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (65) stmt -> . BREAK
    (66) stmt -> . CONTINUE
    (67) stmt -> . DO stmtblock WHILE exp
    (68) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (71) stmt -> . PRINT LPAREN optargs RPAREN
    (72) stmt -> . RETURN exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    error           shift and go to state 3
    $end            reduce using rule 4 (uz -> .)
    NAME            shift and go to state 5
    STRUCT          shift and go to state 8
    MAKE            shift and go to state 9
    IF              shift and go to state 12
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 16
    PRINT           shift and go to state 17
    RETURN          shift and go to state 18
    CALL            shift and go to state 19
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    line                           shift and go to state 2
    uz                             shift and go to state 28
    stmt                           shift and go to state 4
    exp                            shift and go to state 7

state 3

    (3) uz -> error . SEMICOL

    SEMICOL         shift and go to state 29


state 4

    (2) line -> stmt . SEMICOL

    SEMICOL         shift and go to state 30


state 5

    (31) stmt -> NAME . DOT POP LPAREN exp RPAREN
    (32) stmt -> NAME . DOT PUSH LPAREN exp RPAREN
    (33) stmt -> NAME . DOT INDEX LPAREN exp RPAREN
    (34) stmt -> NAME . DOT SLICE LPAREN exp COMMA exp RPAREN
    (41) stmt -> NAME . DOT NAME EQUAL exp
    (60) stmt -> NAME . EQUAL exp
    (29) exp -> NAME .
    (42) exp -> NAME . DOT NAME

    DOT             shift and go to state 31
    EQUAL           shift and go to state 32
    DEC             reduce using rule 29 (exp -> NAME .)
    INC             reduce using rule 29 (exp -> NAME .)
    PLUS            reduce using rule 29 (exp -> NAME .)
    MINUS           reduce using rule 29 (exp -> NAME .)
    MULTIPLY        reduce using rule 29 (exp -> NAME .)
    DIVIDE          reduce using rule 29 (exp -> NAME .)
    POWER           reduce using rule 29 (exp -> NAME .)
    MODULUS         reduce using rule 29 (exp -> NAME .)
    AND             reduce using rule 29 (exp -> NAME .)
    OR              reduce using rule 29 (exp -> NAME .)
    GT              reduce using rule 29 (exp -> NAME .)
    LT              reduce using rule 29 (exp -> NAME .)
    GTE             reduce using rule 29 (exp -> NAME .)
    LTE             reduce using rule 29 (exp -> NAME .)
    EE              reduce using rule 29 (exp -> NAME .)
    NE              reduce using rule 29 (exp -> NAME .)


state 6

    (56) exp -> LPAREN . exp RPAREN
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 33

state 7

    (49) stmt -> exp . DEC
    (50) stmt -> exp . INC
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             shift and go to state 35
    INC             shift and go to state 36
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 8

    (35) stmt -> STRUCT . NAME SEP structargs SEP

    NAME            shift and go to state 51


state 9

    (40) stmt -> MAKE . NAME NAME
    (57) stmt -> MAKE . NAME
    (58) stmt -> MAKE . NAME EQUAL exp
    (59) stmt -> MAKE . NAME EQUAL list

    NAME            shift and go to state 52


state 10

    (47) exp -> DEC . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 53

state 11

    (48) exp -> INC . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 54

state 12

    (61) stmt -> IF . exp THEN stmtblock
    (62) stmt -> IF . exp THEN stmtblock elsif ELSE THEN stmtblock
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 55

state 13

    (65) stmt -> BREAK .

    SEMICOL         reduce using rule 65 (stmt -> BREAK .)


state 14

    (66) stmt -> CONTINUE .

    SEMICOL         reduce using rule 66 (stmt -> CONTINUE .)


state 15

    (67) stmt -> DO . stmtblock WHILE exp
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 57

    stmtblock                      shift and go to state 56

state 16

    (68) stmt -> FOR . NAME EQUAL exp TO exp UNTIL step stmtblock

    NAME            shift and go to state 58


state 17

    (71) stmt -> PRINT . LPAREN optargs RPAREN

    LPAREN          shift and go to state 59


state 18

    (72) stmt -> RETURN . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 60

state 19

    (10) exp -> CALL . NAME LPAREN optargs RPAREN

    NAME            shift and go to state 61


state 20

    (43) exp -> MINUS . INT
    (44) exp -> MINUS . FLOAT

    INT             shift and go to state 62
    FLOAT           shift and go to state 63


state 21

    (45) exp -> INT .

    DEC             reduce using rule 45 (exp -> INT .)
    INC             reduce using rule 45 (exp -> INT .)
    PLUS            reduce using rule 45 (exp -> INT .)
    MINUS           reduce using rule 45 (exp -> INT .)
    MULTIPLY        reduce using rule 45 (exp -> INT .)
    DIVIDE          reduce using rule 45 (exp -> INT .)
    POWER           reduce using rule 45 (exp -> INT .)
    MODULUS         reduce using rule 45 (exp -> INT .)
    AND             reduce using rule 45 (exp -> INT .)
    OR              reduce using rule 45 (exp -> INT .)
    GT              reduce using rule 45 (exp -> INT .)
    LT              reduce using rule 45 (exp -> INT .)
    GTE             reduce using rule 45 (exp -> INT .)
    LTE             reduce using rule 45 (exp -> INT .)
    EE              reduce using rule 45 (exp -> INT .)
    NE              reduce using rule 45 (exp -> INT .)
    RPAREN          reduce using rule 45 (exp -> INT .)
    THEN            reduce using rule 45 (exp -> INT .)
    SEMICOL         reduce using rule 45 (exp -> INT .)
    COMMA           reduce using rule 45 (exp -> INT .)
    TO              reduce using rule 45 (exp -> INT .)
    RBRACK          reduce using rule 45 (exp -> INT .)
    SEP             reduce using rule 45 (exp -> INT .)
    UNTIL           reduce using rule 45 (exp -> INT .)
    LBRACE          reduce using rule 45 (exp -> INT .)


state 22

    (46) exp -> FLOAT .

    DEC             reduce using rule 46 (exp -> FLOAT .)
    INC             reduce using rule 46 (exp -> FLOAT .)
    PLUS            reduce using rule 46 (exp -> FLOAT .)
    MINUS           reduce using rule 46 (exp -> FLOAT .)
    MULTIPLY        reduce using rule 46 (exp -> FLOAT .)
    DIVIDE          reduce using rule 46 (exp -> FLOAT .)
    POWER           reduce using rule 46 (exp -> FLOAT .)
    MODULUS         reduce using rule 46 (exp -> FLOAT .)
    AND             reduce using rule 46 (exp -> FLOAT .)
    OR              reduce using rule 46 (exp -> FLOAT .)
    GT              reduce using rule 46 (exp -> FLOAT .)
    LT              reduce using rule 46 (exp -> FLOAT .)
    GTE             reduce using rule 46 (exp -> FLOAT .)
    LTE             reduce using rule 46 (exp -> FLOAT .)
    EE              reduce using rule 46 (exp -> FLOAT .)
    NE              reduce using rule 46 (exp -> FLOAT .)
    RPAREN          reduce using rule 46 (exp -> FLOAT .)
    THEN            reduce using rule 46 (exp -> FLOAT .)
    SEMICOL         reduce using rule 46 (exp -> FLOAT .)
    COMMA           reduce using rule 46 (exp -> FLOAT .)
    TO              reduce using rule 46 (exp -> FLOAT .)
    RBRACK          reduce using rule 46 (exp -> FLOAT .)
    SEP             reduce using rule 46 (exp -> FLOAT .)
    UNTIL           reduce using rule 46 (exp -> FLOAT .)
    LBRACE          reduce using rule 46 (exp -> FLOAT .)


state 23

    (51) exp -> NOT . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 64

state 24

    (52) exp -> TRUE .

    DEC             reduce using rule 52 (exp -> TRUE .)
    INC             reduce using rule 52 (exp -> TRUE .)
    PLUS            reduce using rule 52 (exp -> TRUE .)
    MINUS           reduce using rule 52 (exp -> TRUE .)
    MULTIPLY        reduce using rule 52 (exp -> TRUE .)
    DIVIDE          reduce using rule 52 (exp -> TRUE .)
    POWER           reduce using rule 52 (exp -> TRUE .)
    MODULUS         reduce using rule 52 (exp -> TRUE .)
    AND             reduce using rule 52 (exp -> TRUE .)
    OR              reduce using rule 52 (exp -> TRUE .)
    GT              reduce using rule 52 (exp -> TRUE .)
    LT              reduce using rule 52 (exp -> TRUE .)
    GTE             reduce using rule 52 (exp -> TRUE .)
    LTE             reduce using rule 52 (exp -> TRUE .)
    EE              reduce using rule 52 (exp -> TRUE .)
    NE              reduce using rule 52 (exp -> TRUE .)
    RPAREN          reduce using rule 52 (exp -> TRUE .)
    THEN            reduce using rule 52 (exp -> TRUE .)
    SEMICOL         reduce using rule 52 (exp -> TRUE .)
    COMMA           reduce using rule 52 (exp -> TRUE .)
    TO              reduce using rule 52 (exp -> TRUE .)
    RBRACK          reduce using rule 52 (exp -> TRUE .)
    SEP             reduce using rule 52 (exp -> TRUE .)
    UNTIL           reduce using rule 52 (exp -> TRUE .)
    LBRACE          reduce using rule 52 (exp -> TRUE .)


state 25

    (53) exp -> FALSE .

    DEC             reduce using rule 53 (exp -> FALSE .)
    INC             reduce using rule 53 (exp -> FALSE .)
    PLUS            reduce using rule 53 (exp -> FALSE .)
    MINUS           reduce using rule 53 (exp -> FALSE .)
    MULTIPLY        reduce using rule 53 (exp -> FALSE .)
    DIVIDE          reduce using rule 53 (exp -> FALSE .)
    POWER           reduce using rule 53 (exp -> FALSE .)
    MODULUS         reduce using rule 53 (exp -> FALSE .)
    AND             reduce using rule 53 (exp -> FALSE .)
    OR              reduce using rule 53 (exp -> FALSE .)
    GT              reduce using rule 53 (exp -> FALSE .)
    LT              reduce using rule 53 (exp -> FALSE .)
    GTE             reduce using rule 53 (exp -> FALSE .)
    LTE             reduce using rule 53 (exp -> FALSE .)
    EE              reduce using rule 53 (exp -> FALSE .)
    NE              reduce using rule 53 (exp -> FALSE .)
    RPAREN          reduce using rule 53 (exp -> FALSE .)
    THEN            reduce using rule 53 (exp -> FALSE .)
    SEMICOL         reduce using rule 53 (exp -> FALSE .)
    COMMA           reduce using rule 53 (exp -> FALSE .)
    TO              reduce using rule 53 (exp -> FALSE .)
    RBRACK          reduce using rule 53 (exp -> FALSE .)
    SEP             reduce using rule 53 (exp -> FALSE .)
    UNTIL           reduce using rule 53 (exp -> FALSE .)
    LBRACE          reduce using rule 53 (exp -> FALSE .)


state 26

    (54) exp -> STRING .

    DEC             reduce using rule 54 (exp -> STRING .)
    INC             reduce using rule 54 (exp -> STRING .)
    PLUS            reduce using rule 54 (exp -> STRING .)
    MINUS           reduce using rule 54 (exp -> STRING .)
    MULTIPLY        reduce using rule 54 (exp -> STRING .)
    DIVIDE          reduce using rule 54 (exp -> STRING .)
    POWER           reduce using rule 54 (exp -> STRING .)
    MODULUS         reduce using rule 54 (exp -> STRING .)
    AND             reduce using rule 54 (exp -> STRING .)
    OR              reduce using rule 54 (exp -> STRING .)
    GT              reduce using rule 54 (exp -> STRING .)
    LT              reduce using rule 54 (exp -> STRING .)
    GTE             reduce using rule 54 (exp -> STRING .)
    LTE             reduce using rule 54 (exp -> STRING .)
    EE              reduce using rule 54 (exp -> STRING .)
    NE              reduce using rule 54 (exp -> STRING .)
    RPAREN          reduce using rule 54 (exp -> STRING .)
    THEN            reduce using rule 54 (exp -> STRING .)
    SEMICOL         reduce using rule 54 (exp -> STRING .)
    COMMA           reduce using rule 54 (exp -> STRING .)
    TO              reduce using rule 54 (exp -> STRING .)
    RBRACK          reduce using rule 54 (exp -> STRING .)
    SEP             reduce using rule 54 (exp -> STRING .)
    UNTIL           reduce using rule 54 (exp -> STRING .)
    LBRACE          reduce using rule 54 (exp -> STRING .)


state 27

    (55) exp -> CHAR .

    DEC             reduce using rule 55 (exp -> CHAR .)
    INC             reduce using rule 55 (exp -> CHAR .)
    PLUS            reduce using rule 55 (exp -> CHAR .)
    MINUS           reduce using rule 55 (exp -> CHAR .)
    MULTIPLY        reduce using rule 55 (exp -> CHAR .)
    DIVIDE          reduce using rule 55 (exp -> CHAR .)
    POWER           reduce using rule 55 (exp -> CHAR .)
    MODULUS         reduce using rule 55 (exp -> CHAR .)
    AND             reduce using rule 55 (exp -> CHAR .)
    OR              reduce using rule 55 (exp -> CHAR .)
    GT              reduce using rule 55 (exp -> CHAR .)
    LT              reduce using rule 55 (exp -> CHAR .)
    GTE             reduce using rule 55 (exp -> CHAR .)
    LTE             reduce using rule 55 (exp -> CHAR .)
    EE              reduce using rule 55 (exp -> CHAR .)
    NE              reduce using rule 55 (exp -> CHAR .)
    RPAREN          reduce using rule 55 (exp -> CHAR .)
    THEN            reduce using rule 55 (exp -> CHAR .)
    SEMICOL         reduce using rule 55 (exp -> CHAR .)
    COMMA           reduce using rule 55 (exp -> CHAR .)
    TO              reduce using rule 55 (exp -> CHAR .)
    RBRACK          reduce using rule 55 (exp -> CHAR .)
    SEP             reduce using rule 55 (exp -> CHAR .)
    UNTIL           reduce using rule 55 (exp -> CHAR .)
    LBRACE          reduce using rule 55 (exp -> CHAR .)


state 28

    (1) uz -> line uz .

    $end            reduce using rule 1 (uz -> line uz .)


state 29

    (3) uz -> error SEMICOL .

    $end            reduce using rule 3 (uz -> error SEMICOL .)


state 30

    (2) line -> stmt SEMICOL .

    error           reduce using rule 2 (line -> stmt SEMICOL .)
    NAME            reduce using rule 2 (line -> stmt SEMICOL .)
    STRUCT          reduce using rule 2 (line -> stmt SEMICOL .)
    MAKE            reduce using rule 2 (line -> stmt SEMICOL .)
    IF              reduce using rule 2 (line -> stmt SEMICOL .)
    BREAK           reduce using rule 2 (line -> stmt SEMICOL .)
    CONTINUE        reduce using rule 2 (line -> stmt SEMICOL .)
    DO              reduce using rule 2 (line -> stmt SEMICOL .)
    FOR             reduce using rule 2 (line -> stmt SEMICOL .)
    PRINT           reduce using rule 2 (line -> stmt SEMICOL .)
    RETURN          reduce using rule 2 (line -> stmt SEMICOL .)
    CALL            reduce using rule 2 (line -> stmt SEMICOL .)
    MINUS           reduce using rule 2 (line -> stmt SEMICOL .)
    INT             reduce using rule 2 (line -> stmt SEMICOL .)
    FLOAT           reduce using rule 2 (line -> stmt SEMICOL .)
    DEC             reduce using rule 2 (line -> stmt SEMICOL .)
    INC             reduce using rule 2 (line -> stmt SEMICOL .)
    NOT             reduce using rule 2 (line -> stmt SEMICOL .)
    TRUE            reduce using rule 2 (line -> stmt SEMICOL .)
    FALSE           reduce using rule 2 (line -> stmt SEMICOL .)
    STRING          reduce using rule 2 (line -> stmt SEMICOL .)
    CHAR            reduce using rule 2 (line -> stmt SEMICOL .)
    LPAREN          reduce using rule 2 (line -> stmt SEMICOL .)
    $end            reduce using rule 2 (line -> stmt SEMICOL .)


state 31

    (31) stmt -> NAME DOT . POP LPAREN exp RPAREN
    (32) stmt -> NAME DOT . PUSH LPAREN exp RPAREN
    (33) stmt -> NAME DOT . INDEX LPAREN exp RPAREN
    (34) stmt -> NAME DOT . SLICE LPAREN exp COMMA exp RPAREN
    (41) stmt -> NAME DOT . NAME EQUAL exp
    (42) exp -> NAME DOT . NAME

    POP             shift and go to state 66
    PUSH            shift and go to state 67
    INDEX           shift and go to state 68
    SLICE           shift and go to state 69
    NAME            shift and go to state 65


state 32

    (60) stmt -> NAME EQUAL . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 70

state 33

    (56) exp -> LPAREN exp . RPAREN
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    RPAREN          shift and go to state 71
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 34

    (29) exp -> NAME .
    (42) exp -> NAME . DOT NAME

    RPAREN          reduce using rule 29 (exp -> NAME .)
    PLUS            reduce using rule 29 (exp -> NAME .)
    MINUS           reduce using rule 29 (exp -> NAME .)
    MULTIPLY        reduce using rule 29 (exp -> NAME .)
    DIVIDE          reduce using rule 29 (exp -> NAME .)
    POWER           reduce using rule 29 (exp -> NAME .)
    MODULUS         reduce using rule 29 (exp -> NAME .)
    AND             reduce using rule 29 (exp -> NAME .)
    OR              reduce using rule 29 (exp -> NAME .)
    GT              reduce using rule 29 (exp -> NAME .)
    LT              reduce using rule 29 (exp -> NAME .)
    GTE             reduce using rule 29 (exp -> NAME .)
    LTE             reduce using rule 29 (exp -> NAME .)
    EE              reduce using rule 29 (exp -> NAME .)
    NE              reduce using rule 29 (exp -> NAME .)
    DEC             reduce using rule 29 (exp -> NAME .)
    INC             reduce using rule 29 (exp -> NAME .)
    THEN            reduce using rule 29 (exp -> NAME .)
    SEMICOL         reduce using rule 29 (exp -> NAME .)
    COMMA           reduce using rule 29 (exp -> NAME .)
    TO              reduce using rule 29 (exp -> NAME .)
    RBRACK          reduce using rule 29 (exp -> NAME .)
    SEP             reduce using rule 29 (exp -> NAME .)
    UNTIL           reduce using rule 29 (exp -> NAME .)
    LBRACE          reduce using rule 29 (exp -> NAME .)
    DOT             shift and go to state 72


state 35

    (49) stmt -> exp DEC .

    SEMICOL         reduce using rule 49 (stmt -> exp DEC .)


state 36

    (50) stmt -> exp INC .

    SEMICOL         reduce using rule 50 (stmt -> exp INC .)


state 37

    (15) exp -> exp PLUS . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 73

state 38

    (16) exp -> exp MINUS . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 74

state 39

    (17) exp -> exp MULTIPLY . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 75

state 40

    (18) exp -> exp DIVIDE . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 76

state 41

    (19) exp -> exp POWER . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 77

state 42

    (20) exp -> exp MODULUS . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 78

state 43

    (21) exp -> exp AND . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 79

state 44

    (22) exp -> exp OR . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 80

state 45

    (23) exp -> exp GT . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 81

state 46

    (24) exp -> exp LT . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 82

state 47

    (25) exp -> exp GTE . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 83

state 48

    (26) exp -> exp LTE . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 84

state 49

    (27) exp -> exp EE . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 85

state 50

    (28) exp -> exp NE . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 86

state 51

    (35) stmt -> STRUCT NAME . SEP structargs SEP

    SEP             shift and go to state 87


state 52

    (40) stmt -> MAKE NAME . NAME
    (57) stmt -> MAKE NAME .
    (58) stmt -> MAKE NAME . EQUAL exp
    (59) stmt -> MAKE NAME . EQUAL list

    NAME            shift and go to state 88
    SEMICOL         reduce using rule 57 (stmt -> MAKE NAME .)
    EQUAL           shift and go to state 89


state 53

    (47) exp -> DEC exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 47 (exp -> DEC exp .)
    INC             reduce using rule 47 (exp -> DEC exp .)
    POWER           reduce using rule 47 (exp -> DEC exp .)
    MODULUS         reduce using rule 47 (exp -> DEC exp .)
    RPAREN          reduce using rule 47 (exp -> DEC exp .)
    THEN            reduce using rule 47 (exp -> DEC exp .)
    SEMICOL         reduce using rule 47 (exp -> DEC exp .)
    COMMA           reduce using rule 47 (exp -> DEC exp .)
    TO              reduce using rule 47 (exp -> DEC exp .)
    RBRACK          reduce using rule 47 (exp -> DEC exp .)
    SEP             reduce using rule 47 (exp -> DEC exp .)
    UNTIL           reduce using rule 47 (exp -> DEC exp .)
    LBRACE          reduce using rule 47 (exp -> DEC exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50

  ! PLUS            [ reduce using rule 47 (exp -> DEC exp .) ]
  ! MINUS           [ reduce using rule 47 (exp -> DEC exp .) ]
  ! MULTIPLY        [ reduce using rule 47 (exp -> DEC exp .) ]
  ! DIVIDE          [ reduce using rule 47 (exp -> DEC exp .) ]
  ! AND             [ reduce using rule 47 (exp -> DEC exp .) ]
  ! OR              [ reduce using rule 47 (exp -> DEC exp .) ]
  ! GT              [ reduce using rule 47 (exp -> DEC exp .) ]
  ! LT              [ reduce using rule 47 (exp -> DEC exp .) ]
  ! GTE             [ reduce using rule 47 (exp -> DEC exp .) ]
  ! LTE             [ reduce using rule 47 (exp -> DEC exp .) ]
  ! EE              [ reduce using rule 47 (exp -> DEC exp .) ]
  ! NE              [ reduce using rule 47 (exp -> DEC exp .) ]
  ! POWER           [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]


state 54

    (48) exp -> INC exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 48 (exp -> INC exp .)
    INC             reduce using rule 48 (exp -> INC exp .)
    POWER           reduce using rule 48 (exp -> INC exp .)
    MODULUS         reduce using rule 48 (exp -> INC exp .)
    RPAREN          reduce using rule 48 (exp -> INC exp .)
    THEN            reduce using rule 48 (exp -> INC exp .)
    SEMICOL         reduce using rule 48 (exp -> INC exp .)
    COMMA           reduce using rule 48 (exp -> INC exp .)
    TO              reduce using rule 48 (exp -> INC exp .)
    RBRACK          reduce using rule 48 (exp -> INC exp .)
    SEP             reduce using rule 48 (exp -> INC exp .)
    UNTIL           reduce using rule 48 (exp -> INC exp .)
    LBRACE          reduce using rule 48 (exp -> INC exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50

  ! PLUS            [ reduce using rule 48 (exp -> INC exp .) ]
  ! MINUS           [ reduce using rule 48 (exp -> INC exp .) ]
  ! MULTIPLY        [ reduce using rule 48 (exp -> INC exp .) ]
  ! DIVIDE          [ reduce using rule 48 (exp -> INC exp .) ]
  ! AND             [ reduce using rule 48 (exp -> INC exp .) ]
  ! OR              [ reduce using rule 48 (exp -> INC exp .) ]
  ! GT              [ reduce using rule 48 (exp -> INC exp .) ]
  ! LT              [ reduce using rule 48 (exp -> INC exp .) ]
  ! GTE             [ reduce using rule 48 (exp -> INC exp .) ]
  ! LTE             [ reduce using rule 48 (exp -> INC exp .) ]
  ! EE              [ reduce using rule 48 (exp -> INC exp .) ]
  ! NE              [ reduce using rule 48 (exp -> INC exp .) ]
  ! POWER           [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]


state 55

    (61) stmt -> IF exp . THEN stmtblock
    (62) stmt -> IF exp . THEN stmtblock elsif ELSE THEN stmtblock
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    THEN            shift and go to state 90
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 56

    (67) stmt -> DO stmtblock . WHILE exp

    WHILE           shift and go to state 91


state 57

    (5) stmtblock -> LBRACE . stmtS RBRACE
    (6) stmtblock -> LBRACE . error RBRACE
    (7) stmtS -> . stmt SEMICOL stmtS
    (8) stmtS -> . error SEMICOL stmtS
    (9) stmtS -> .
    (31) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (32) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (33) stmt -> . NAME DOT INDEX LPAREN exp RPAREN
    (34) stmt -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (35) stmt -> . STRUCT NAME SEP structargs SEP
    (40) stmt -> . MAKE NAME NAME
    (41) stmt -> . NAME DOT NAME EQUAL exp
    (49) stmt -> . exp DEC
    (50) stmt -> . exp INC
    (57) stmt -> . MAKE NAME
    (58) stmt -> . MAKE NAME EQUAL exp
    (59) stmt -> . MAKE NAME EQUAL list
    (60) stmt -> . NAME EQUAL exp
    (61) stmt -> . IF exp THEN stmtblock
    (62) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (65) stmt -> . BREAK
    (66) stmt -> . CONTINUE
    (67) stmt -> . DO stmtblock WHILE exp
    (68) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (71) stmt -> . PRINT LPAREN optargs RPAREN
    (72) stmt -> . RETURN exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    error           shift and go to state 93
    RBRACE          reduce using rule 9 (stmtS -> .)
    NAME            shift and go to state 5
    STRUCT          shift and go to state 8
    MAKE            shift and go to state 9
    IF              shift and go to state 12
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 16
    PRINT           shift and go to state 17
    RETURN          shift and go to state 18
    CALL            shift and go to state 19
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    stmtS                          shift and go to state 92
    stmt                           shift and go to state 94
    exp                            shift and go to state 7

state 58

    (68) stmt -> FOR NAME . EQUAL exp TO exp UNTIL step stmtblock

    EQUAL           shift and go to state 95


state 59

    (71) stmt -> PRINT LPAREN . optargs RPAREN
    (11) optargs -> . args
    (12) optargs -> .
    (13) args -> . exp COMMA args
    (14) args -> . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    RPAREN          reduce using rule 12 (optargs -> .)
    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    optargs                        shift and go to state 96
    args                           shift and go to state 97
    exp                            shift and go to state 98

state 60

    (72) stmt -> RETURN exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    SEMICOL         reduce using rule 72 (stmt -> RETURN exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 61

    (10) exp -> CALL NAME . LPAREN optargs RPAREN

    LPAREN          shift and go to state 99


state 62

    (43) exp -> MINUS INT .

    DEC             reduce using rule 43 (exp -> MINUS INT .)
    INC             reduce using rule 43 (exp -> MINUS INT .)
    PLUS            reduce using rule 43 (exp -> MINUS INT .)
    MINUS           reduce using rule 43 (exp -> MINUS INT .)
    MULTIPLY        reduce using rule 43 (exp -> MINUS INT .)
    DIVIDE          reduce using rule 43 (exp -> MINUS INT .)
    POWER           reduce using rule 43 (exp -> MINUS INT .)
    MODULUS         reduce using rule 43 (exp -> MINUS INT .)
    AND             reduce using rule 43 (exp -> MINUS INT .)
    OR              reduce using rule 43 (exp -> MINUS INT .)
    GT              reduce using rule 43 (exp -> MINUS INT .)
    LT              reduce using rule 43 (exp -> MINUS INT .)
    GTE             reduce using rule 43 (exp -> MINUS INT .)
    LTE             reduce using rule 43 (exp -> MINUS INT .)
    EE              reduce using rule 43 (exp -> MINUS INT .)
    NE              reduce using rule 43 (exp -> MINUS INT .)
    RPAREN          reduce using rule 43 (exp -> MINUS INT .)
    THEN            reduce using rule 43 (exp -> MINUS INT .)
    SEMICOL         reduce using rule 43 (exp -> MINUS INT .)
    COMMA           reduce using rule 43 (exp -> MINUS INT .)
    TO              reduce using rule 43 (exp -> MINUS INT .)
    RBRACK          reduce using rule 43 (exp -> MINUS INT .)
    SEP             reduce using rule 43 (exp -> MINUS INT .)
    UNTIL           reduce using rule 43 (exp -> MINUS INT .)
    LBRACE          reduce using rule 43 (exp -> MINUS INT .)


state 63

    (44) exp -> MINUS FLOAT .

    DEC             reduce using rule 44 (exp -> MINUS FLOAT .)
    INC             reduce using rule 44 (exp -> MINUS FLOAT .)
    PLUS            reduce using rule 44 (exp -> MINUS FLOAT .)
    MINUS           reduce using rule 44 (exp -> MINUS FLOAT .)
    MULTIPLY        reduce using rule 44 (exp -> MINUS FLOAT .)
    DIVIDE          reduce using rule 44 (exp -> MINUS FLOAT .)
    POWER           reduce using rule 44 (exp -> MINUS FLOAT .)
    MODULUS         reduce using rule 44 (exp -> MINUS FLOAT .)
    AND             reduce using rule 44 (exp -> MINUS FLOAT .)
    OR              reduce using rule 44 (exp -> MINUS FLOAT .)
    GT              reduce using rule 44 (exp -> MINUS FLOAT .)
    LT              reduce using rule 44 (exp -> MINUS FLOAT .)
    GTE             reduce using rule 44 (exp -> MINUS FLOAT .)
    LTE             reduce using rule 44 (exp -> MINUS FLOAT .)
    EE              reduce using rule 44 (exp -> MINUS FLOAT .)
    NE              reduce using rule 44 (exp -> MINUS FLOAT .)
    RPAREN          reduce using rule 44 (exp -> MINUS FLOAT .)
    THEN            reduce using rule 44 (exp -> MINUS FLOAT .)
    SEMICOL         reduce using rule 44 (exp -> MINUS FLOAT .)
    COMMA           reduce using rule 44 (exp -> MINUS FLOAT .)
    TO              reduce using rule 44 (exp -> MINUS FLOAT .)
    RBRACK          reduce using rule 44 (exp -> MINUS FLOAT .)
    SEP             reduce using rule 44 (exp -> MINUS FLOAT .)
    UNTIL           reduce using rule 44 (exp -> MINUS FLOAT .)
    LBRACE          reduce using rule 44 (exp -> MINUS FLOAT .)


state 64

    (51) exp -> NOT exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 51 (exp -> NOT exp .)
    INC             reduce using rule 51 (exp -> NOT exp .)
    PLUS            reduce using rule 51 (exp -> NOT exp .)
    MINUS           reduce using rule 51 (exp -> NOT exp .)
    MULTIPLY        reduce using rule 51 (exp -> NOT exp .)
    DIVIDE          reduce using rule 51 (exp -> NOT exp .)
    POWER           reduce using rule 51 (exp -> NOT exp .)
    MODULUS         reduce using rule 51 (exp -> NOT exp .)
    AND             reduce using rule 51 (exp -> NOT exp .)
    OR              reduce using rule 51 (exp -> NOT exp .)
    GT              reduce using rule 51 (exp -> NOT exp .)
    LT              reduce using rule 51 (exp -> NOT exp .)
    GTE             reduce using rule 51 (exp -> NOT exp .)
    LTE             reduce using rule 51 (exp -> NOT exp .)
    EE              reduce using rule 51 (exp -> NOT exp .)
    NE              reduce using rule 51 (exp -> NOT exp .)
    RPAREN          reduce using rule 51 (exp -> NOT exp .)
    THEN            reduce using rule 51 (exp -> NOT exp .)
    SEMICOL         reduce using rule 51 (exp -> NOT exp .)
    COMMA           reduce using rule 51 (exp -> NOT exp .)
    TO              reduce using rule 51 (exp -> NOT exp .)
    RBRACK          reduce using rule 51 (exp -> NOT exp .)
    SEP             reduce using rule 51 (exp -> NOT exp .)
    UNTIL           reduce using rule 51 (exp -> NOT exp .)
    LBRACE          reduce using rule 51 (exp -> NOT exp .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MULTIPLY        [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! POWER           [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! GT              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GTE             [ shift and go to state 47 ]
  ! LTE             [ shift and go to state 48 ]
  ! EE              [ shift and go to state 49 ]
  ! NE              [ shift and go to state 50 ]


state 65

    (41) stmt -> NAME DOT NAME . EQUAL exp
    (42) exp -> NAME DOT NAME .

    EQUAL           shift and go to state 100
    DEC             reduce using rule 42 (exp -> NAME DOT NAME .)
    INC             reduce using rule 42 (exp -> NAME DOT NAME .)
    PLUS            reduce using rule 42 (exp -> NAME DOT NAME .)
    MINUS           reduce using rule 42 (exp -> NAME DOT NAME .)
    MULTIPLY        reduce using rule 42 (exp -> NAME DOT NAME .)
    DIVIDE          reduce using rule 42 (exp -> NAME DOT NAME .)
    POWER           reduce using rule 42 (exp -> NAME DOT NAME .)
    MODULUS         reduce using rule 42 (exp -> NAME DOT NAME .)
    AND             reduce using rule 42 (exp -> NAME DOT NAME .)
    OR              reduce using rule 42 (exp -> NAME DOT NAME .)
    GT              reduce using rule 42 (exp -> NAME DOT NAME .)
    LT              reduce using rule 42 (exp -> NAME DOT NAME .)
    GTE             reduce using rule 42 (exp -> NAME DOT NAME .)
    LTE             reduce using rule 42 (exp -> NAME DOT NAME .)
    EE              reduce using rule 42 (exp -> NAME DOT NAME .)
    NE              reduce using rule 42 (exp -> NAME DOT NAME .)


state 66

    (31) stmt -> NAME DOT POP . LPAREN exp RPAREN

    LPAREN          shift and go to state 101


state 67

    (32) stmt -> NAME DOT PUSH . LPAREN exp RPAREN

    LPAREN          shift and go to state 102


state 68

    (33) stmt -> NAME DOT INDEX . LPAREN exp RPAREN

    LPAREN          shift and go to state 103


state 69

    (34) stmt -> NAME DOT SLICE . LPAREN exp COMMA exp RPAREN

    LPAREN          shift and go to state 104


state 70

    (60) stmt -> NAME EQUAL exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    SEMICOL         reduce using rule 60 (stmt -> NAME EQUAL exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 71

    (56) exp -> LPAREN exp RPAREN .

    DEC             reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    INC             reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    MULTIPLY        reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    POWER           reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    MODULUS         reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    GT              reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    LT              reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    EE              reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    NE              reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    THEN            reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    SEMICOL         reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    TO              reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    RBRACK          reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    SEP             reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    UNTIL           reduce using rule 56 (exp -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 56 (exp -> LPAREN exp RPAREN .)


state 72

    (42) exp -> NAME DOT . NAME

    NAME            shift and go to state 105


state 73

    (15) exp -> exp PLUS exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 15 (exp -> exp PLUS exp .)
    INC             reduce using rule 15 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 15 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 15 (exp -> exp PLUS exp .)
    POWER           reduce using rule 15 (exp -> exp PLUS exp .)
    MODULUS         reduce using rule 15 (exp -> exp PLUS exp .)
    AND             reduce using rule 15 (exp -> exp PLUS exp .)
    OR              reduce using rule 15 (exp -> exp PLUS exp .)
    GT              reduce using rule 15 (exp -> exp PLUS exp .)
    LT              reduce using rule 15 (exp -> exp PLUS exp .)
    GTE             reduce using rule 15 (exp -> exp PLUS exp .)
    LTE             reduce using rule 15 (exp -> exp PLUS exp .)
    EE              reduce using rule 15 (exp -> exp PLUS exp .)
    NE              reduce using rule 15 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 15 (exp -> exp PLUS exp .)
    THEN            reduce using rule 15 (exp -> exp PLUS exp .)
    SEMICOL         reduce using rule 15 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 15 (exp -> exp PLUS exp .)
    TO              reduce using rule 15 (exp -> exp PLUS exp .)
    RBRACK          reduce using rule 15 (exp -> exp PLUS exp .)
    SEP             reduce using rule 15 (exp -> exp PLUS exp .)
    UNTIL           reduce using rule 15 (exp -> exp PLUS exp .)
    LBRACE          reduce using rule 15 (exp -> exp PLUS exp .)
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40

  ! MULTIPLY        [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! POWER           [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! GT              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GTE             [ shift and go to state 47 ]
  ! LTE             [ shift and go to state 48 ]
  ! EE              [ shift and go to state 49 ]
  ! NE              [ shift and go to state 50 ]


state 74

    (16) exp -> exp MINUS exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 16 (exp -> exp MINUS exp .)
    INC             reduce using rule 16 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 16 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 16 (exp -> exp MINUS exp .)
    POWER           reduce using rule 16 (exp -> exp MINUS exp .)
    MODULUS         reduce using rule 16 (exp -> exp MINUS exp .)
    AND             reduce using rule 16 (exp -> exp MINUS exp .)
    OR              reduce using rule 16 (exp -> exp MINUS exp .)
    GT              reduce using rule 16 (exp -> exp MINUS exp .)
    LT              reduce using rule 16 (exp -> exp MINUS exp .)
    GTE             reduce using rule 16 (exp -> exp MINUS exp .)
    LTE             reduce using rule 16 (exp -> exp MINUS exp .)
    EE              reduce using rule 16 (exp -> exp MINUS exp .)
    NE              reduce using rule 16 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 16 (exp -> exp MINUS exp .)
    THEN            reduce using rule 16 (exp -> exp MINUS exp .)
    SEMICOL         reduce using rule 16 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 16 (exp -> exp MINUS exp .)
    TO              reduce using rule 16 (exp -> exp MINUS exp .)
    RBRACK          reduce using rule 16 (exp -> exp MINUS exp .)
    SEP             reduce using rule 16 (exp -> exp MINUS exp .)
    UNTIL           reduce using rule 16 (exp -> exp MINUS exp .)
    LBRACE          reduce using rule 16 (exp -> exp MINUS exp .)
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40

  ! MULTIPLY        [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! POWER           [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! GT              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GTE             [ shift and go to state 47 ]
  ! LTE             [ shift and go to state 48 ]
  ! EE              [ shift and go to state 49 ]
  ! NE              [ shift and go to state 50 ]


state 75

    (17) exp -> exp MULTIPLY exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 17 (exp -> exp MULTIPLY exp .)
    INC             reduce using rule 17 (exp -> exp MULTIPLY exp .)
    PLUS            reduce using rule 17 (exp -> exp MULTIPLY exp .)
    MINUS           reduce using rule 17 (exp -> exp MULTIPLY exp .)
    MULTIPLY        reduce using rule 17 (exp -> exp MULTIPLY exp .)
    DIVIDE          reduce using rule 17 (exp -> exp MULTIPLY exp .)
    POWER           reduce using rule 17 (exp -> exp MULTIPLY exp .)
    MODULUS         reduce using rule 17 (exp -> exp MULTIPLY exp .)
    AND             reduce using rule 17 (exp -> exp MULTIPLY exp .)
    OR              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    GT              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    LT              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    GTE             reduce using rule 17 (exp -> exp MULTIPLY exp .)
    LTE             reduce using rule 17 (exp -> exp MULTIPLY exp .)
    EE              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    NE              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    RPAREN          reduce using rule 17 (exp -> exp MULTIPLY exp .)
    THEN            reduce using rule 17 (exp -> exp MULTIPLY exp .)
    SEMICOL         reduce using rule 17 (exp -> exp MULTIPLY exp .)
    COMMA           reduce using rule 17 (exp -> exp MULTIPLY exp .)
    TO              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    RBRACK          reduce using rule 17 (exp -> exp MULTIPLY exp .)
    SEP             reduce using rule 17 (exp -> exp MULTIPLY exp .)
    UNTIL           reduce using rule 17 (exp -> exp MULTIPLY exp .)
    LBRACE          reduce using rule 17 (exp -> exp MULTIPLY exp .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MULTIPLY        [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! POWER           [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! GT              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GTE             [ shift and go to state 47 ]
  ! LTE             [ shift and go to state 48 ]
  ! EE              [ shift and go to state 49 ]
  ! NE              [ shift and go to state 50 ]


state 76

    (18) exp -> exp DIVIDE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 18 (exp -> exp DIVIDE exp .)
    INC             reduce using rule 18 (exp -> exp DIVIDE exp .)
    PLUS            reduce using rule 18 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 18 (exp -> exp DIVIDE exp .)
    MULTIPLY        reduce using rule 18 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 18 (exp -> exp DIVIDE exp .)
    POWER           reduce using rule 18 (exp -> exp DIVIDE exp .)
    MODULUS         reduce using rule 18 (exp -> exp DIVIDE exp .)
    AND             reduce using rule 18 (exp -> exp DIVIDE exp .)
    OR              reduce using rule 18 (exp -> exp DIVIDE exp .)
    GT              reduce using rule 18 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 18 (exp -> exp DIVIDE exp .)
    GTE             reduce using rule 18 (exp -> exp DIVIDE exp .)
    LTE             reduce using rule 18 (exp -> exp DIVIDE exp .)
    EE              reduce using rule 18 (exp -> exp DIVIDE exp .)
    NE              reduce using rule 18 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 18 (exp -> exp DIVIDE exp .)
    THEN            reduce using rule 18 (exp -> exp DIVIDE exp .)
    SEMICOL         reduce using rule 18 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 18 (exp -> exp DIVIDE exp .)
    TO              reduce using rule 18 (exp -> exp DIVIDE exp .)
    RBRACK          reduce using rule 18 (exp -> exp DIVIDE exp .)
    SEP             reduce using rule 18 (exp -> exp DIVIDE exp .)
    UNTIL           reduce using rule 18 (exp -> exp DIVIDE exp .)
    LBRACE          reduce using rule 18 (exp -> exp DIVIDE exp .)

  ! PLUS            [ shift and go to state 37 ]
  ! MINUS           [ shift and go to state 38 ]
  ! MULTIPLY        [ shift and go to state 39 ]
  ! DIVIDE          [ shift and go to state 40 ]
  ! POWER           [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! GT              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GTE             [ shift and go to state 47 ]
  ! LTE             [ shift and go to state 48 ]
  ! EE              [ shift and go to state 49 ]
  ! NE              [ shift and go to state 50 ]


state 77

    (19) exp -> exp POWER exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    DEC             reduce using rule 19 (exp -> exp POWER exp .)
    INC             reduce using rule 19 (exp -> exp POWER exp .)
    RPAREN          reduce using rule 19 (exp -> exp POWER exp .)
    THEN            reduce using rule 19 (exp -> exp POWER exp .)
    SEMICOL         reduce using rule 19 (exp -> exp POWER exp .)
    COMMA           reduce using rule 19 (exp -> exp POWER exp .)
    TO              reduce using rule 19 (exp -> exp POWER exp .)
    RBRACK          reduce using rule 19 (exp -> exp POWER exp .)
    SEP             reduce using rule 19 (exp -> exp POWER exp .)
    UNTIL           reduce using rule 19 (exp -> exp POWER exp .)
    LBRACE          reduce using rule 19 (exp -> exp POWER exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50

  ! PLUS            [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! MINUS           [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! MULTIPLY        [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! DIVIDE          [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! POWER           [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! MODULUS         [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! AND             [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! OR              [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! GT              [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! LT              [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! GTE             [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! LTE             [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! EE              [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! NE              [ reduce using rule 19 (exp -> exp POWER exp .) ]


state 78

    (20) exp -> exp MODULUS exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    DEC             reduce using rule 20 (exp -> exp MODULUS exp .)
    INC             reduce using rule 20 (exp -> exp MODULUS exp .)
    RPAREN          reduce using rule 20 (exp -> exp MODULUS exp .)
    THEN            reduce using rule 20 (exp -> exp MODULUS exp .)
    SEMICOL         reduce using rule 20 (exp -> exp MODULUS exp .)
    COMMA           reduce using rule 20 (exp -> exp MODULUS exp .)
    TO              reduce using rule 20 (exp -> exp MODULUS exp .)
    RBRACK          reduce using rule 20 (exp -> exp MODULUS exp .)
    SEP             reduce using rule 20 (exp -> exp MODULUS exp .)
    UNTIL           reduce using rule 20 (exp -> exp MODULUS exp .)
    LBRACE          reduce using rule 20 (exp -> exp MODULUS exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50

  ! PLUS            [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! MINUS           [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! MULTIPLY        [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! DIVIDE          [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! POWER           [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! MODULUS         [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! AND             [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! OR              [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! GT              [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! LT              [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! GTE             [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! LTE             [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! EE              [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! NE              [ reduce using rule 20 (exp -> exp MODULUS exp .) ]


state 79

    (21) exp -> exp AND exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 21 (exp -> exp AND exp .)
    INC             reduce using rule 21 (exp -> exp AND exp .)
    POWER           reduce using rule 21 (exp -> exp AND exp .)
    MODULUS         reduce using rule 21 (exp -> exp AND exp .)
    AND             reduce using rule 21 (exp -> exp AND exp .)
    OR              reduce using rule 21 (exp -> exp AND exp .)
    RPAREN          reduce using rule 21 (exp -> exp AND exp .)
    THEN            reduce using rule 21 (exp -> exp AND exp .)
    SEMICOL         reduce using rule 21 (exp -> exp AND exp .)
    COMMA           reduce using rule 21 (exp -> exp AND exp .)
    TO              reduce using rule 21 (exp -> exp AND exp .)
    RBRACK          reduce using rule 21 (exp -> exp AND exp .)
    SEP             reduce using rule 21 (exp -> exp AND exp .)
    UNTIL           reduce using rule 21 (exp -> exp AND exp .)
    LBRACE          reduce using rule 21 (exp -> exp AND exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50

  ! PLUS            [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! MULTIPLY        [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! GTE             [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! LTE             [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! EE              [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! NE              [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! POWER           [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 80

    (22) exp -> exp OR exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 22 (exp -> exp OR exp .)
    INC             reduce using rule 22 (exp -> exp OR exp .)
    POWER           reduce using rule 22 (exp -> exp OR exp .)
    MODULUS         reduce using rule 22 (exp -> exp OR exp .)
    OR              reduce using rule 22 (exp -> exp OR exp .)
    RPAREN          reduce using rule 22 (exp -> exp OR exp .)
    THEN            reduce using rule 22 (exp -> exp OR exp .)
    SEMICOL         reduce using rule 22 (exp -> exp OR exp .)
    COMMA           reduce using rule 22 (exp -> exp OR exp .)
    TO              reduce using rule 22 (exp -> exp OR exp .)
    RBRACK          reduce using rule 22 (exp -> exp OR exp .)
    SEP             reduce using rule 22 (exp -> exp OR exp .)
    UNTIL           reduce using rule 22 (exp -> exp OR exp .)
    LBRACE          reduce using rule 22 (exp -> exp OR exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    AND             shift and go to state 43
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50

  ! PLUS            [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! MULTIPLY        [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! GTE             [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! LTE             [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! EE              [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! NE              [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! POWER           [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! OR              [ shift and go to state 44 ]


state 81

    (23) exp -> exp GT exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 23 (exp -> exp GT exp .)
    INC             reduce using rule 23 (exp -> exp GT exp .)
    POWER           reduce using rule 23 (exp -> exp GT exp .)
    MODULUS         reduce using rule 23 (exp -> exp GT exp .)
    AND             reduce using rule 23 (exp -> exp GT exp .)
    OR              reduce using rule 23 (exp -> exp GT exp .)
    GT              reduce using rule 23 (exp -> exp GT exp .)
    LT              reduce using rule 23 (exp -> exp GT exp .)
    GTE             reduce using rule 23 (exp -> exp GT exp .)
    LTE             reduce using rule 23 (exp -> exp GT exp .)
    EE              reduce using rule 23 (exp -> exp GT exp .)
    NE              reduce using rule 23 (exp -> exp GT exp .)
    RPAREN          reduce using rule 23 (exp -> exp GT exp .)
    THEN            reduce using rule 23 (exp -> exp GT exp .)
    SEMICOL         reduce using rule 23 (exp -> exp GT exp .)
    COMMA           reduce using rule 23 (exp -> exp GT exp .)
    TO              reduce using rule 23 (exp -> exp GT exp .)
    RBRACK          reduce using rule 23 (exp -> exp GT exp .)
    SEP             reduce using rule 23 (exp -> exp GT exp .)
    UNTIL           reduce using rule 23 (exp -> exp GT exp .)
    LBRACE          reduce using rule 23 (exp -> exp GT exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40

  ! PLUS            [ reduce using rule 23 (exp -> exp GT exp .) ]
  ! MINUS           [ reduce using rule 23 (exp -> exp GT exp .) ]
  ! MULTIPLY        [ reduce using rule 23 (exp -> exp GT exp .) ]
  ! DIVIDE          [ reduce using rule 23 (exp -> exp GT exp .) ]
  ! POWER           [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! GT              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GTE             [ shift and go to state 47 ]
  ! LTE             [ shift and go to state 48 ]
  ! EE              [ shift and go to state 49 ]
  ! NE              [ shift and go to state 50 ]


state 82

    (24) exp -> exp LT exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 24 (exp -> exp LT exp .)
    INC             reduce using rule 24 (exp -> exp LT exp .)
    POWER           reduce using rule 24 (exp -> exp LT exp .)
    MODULUS         reduce using rule 24 (exp -> exp LT exp .)
    AND             reduce using rule 24 (exp -> exp LT exp .)
    OR              reduce using rule 24 (exp -> exp LT exp .)
    GT              reduce using rule 24 (exp -> exp LT exp .)
    LT              reduce using rule 24 (exp -> exp LT exp .)
    GTE             reduce using rule 24 (exp -> exp LT exp .)
    LTE             reduce using rule 24 (exp -> exp LT exp .)
    EE              reduce using rule 24 (exp -> exp LT exp .)
    NE              reduce using rule 24 (exp -> exp LT exp .)
    RPAREN          reduce using rule 24 (exp -> exp LT exp .)
    THEN            reduce using rule 24 (exp -> exp LT exp .)
    SEMICOL         reduce using rule 24 (exp -> exp LT exp .)
    COMMA           reduce using rule 24 (exp -> exp LT exp .)
    TO              reduce using rule 24 (exp -> exp LT exp .)
    RBRACK          reduce using rule 24 (exp -> exp LT exp .)
    SEP             reduce using rule 24 (exp -> exp LT exp .)
    UNTIL           reduce using rule 24 (exp -> exp LT exp .)
    LBRACE          reduce using rule 24 (exp -> exp LT exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40

  ! PLUS            [ reduce using rule 24 (exp -> exp LT exp .) ]
  ! MINUS           [ reduce using rule 24 (exp -> exp LT exp .) ]
  ! MULTIPLY        [ reduce using rule 24 (exp -> exp LT exp .) ]
  ! DIVIDE          [ reduce using rule 24 (exp -> exp LT exp .) ]
  ! POWER           [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! GT              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GTE             [ shift and go to state 47 ]
  ! LTE             [ shift and go to state 48 ]
  ! EE              [ shift and go to state 49 ]
  ! NE              [ shift and go to state 50 ]


state 83

    (25) exp -> exp GTE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 25 (exp -> exp GTE exp .)
    INC             reduce using rule 25 (exp -> exp GTE exp .)
    POWER           reduce using rule 25 (exp -> exp GTE exp .)
    MODULUS         reduce using rule 25 (exp -> exp GTE exp .)
    AND             reduce using rule 25 (exp -> exp GTE exp .)
    OR              reduce using rule 25 (exp -> exp GTE exp .)
    GT              reduce using rule 25 (exp -> exp GTE exp .)
    LT              reduce using rule 25 (exp -> exp GTE exp .)
    GTE             reduce using rule 25 (exp -> exp GTE exp .)
    LTE             reduce using rule 25 (exp -> exp GTE exp .)
    EE              reduce using rule 25 (exp -> exp GTE exp .)
    NE              reduce using rule 25 (exp -> exp GTE exp .)
    RPAREN          reduce using rule 25 (exp -> exp GTE exp .)
    THEN            reduce using rule 25 (exp -> exp GTE exp .)
    SEMICOL         reduce using rule 25 (exp -> exp GTE exp .)
    COMMA           reduce using rule 25 (exp -> exp GTE exp .)
    TO              reduce using rule 25 (exp -> exp GTE exp .)
    RBRACK          reduce using rule 25 (exp -> exp GTE exp .)
    SEP             reduce using rule 25 (exp -> exp GTE exp .)
    UNTIL           reduce using rule 25 (exp -> exp GTE exp .)
    LBRACE          reduce using rule 25 (exp -> exp GTE exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40

  ! PLUS            [ reduce using rule 25 (exp -> exp GTE exp .) ]
  ! MINUS           [ reduce using rule 25 (exp -> exp GTE exp .) ]
  ! MULTIPLY        [ reduce using rule 25 (exp -> exp GTE exp .) ]
  ! DIVIDE          [ reduce using rule 25 (exp -> exp GTE exp .) ]
  ! POWER           [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! GT              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GTE             [ shift and go to state 47 ]
  ! LTE             [ shift and go to state 48 ]
  ! EE              [ shift and go to state 49 ]
  ! NE              [ shift and go to state 50 ]


state 84

    (26) exp -> exp LTE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 26 (exp -> exp LTE exp .)
    INC             reduce using rule 26 (exp -> exp LTE exp .)
    POWER           reduce using rule 26 (exp -> exp LTE exp .)
    MODULUS         reduce using rule 26 (exp -> exp LTE exp .)
    AND             reduce using rule 26 (exp -> exp LTE exp .)
    OR              reduce using rule 26 (exp -> exp LTE exp .)
    GT              reduce using rule 26 (exp -> exp LTE exp .)
    LT              reduce using rule 26 (exp -> exp LTE exp .)
    GTE             reduce using rule 26 (exp -> exp LTE exp .)
    LTE             reduce using rule 26 (exp -> exp LTE exp .)
    EE              reduce using rule 26 (exp -> exp LTE exp .)
    NE              reduce using rule 26 (exp -> exp LTE exp .)
    RPAREN          reduce using rule 26 (exp -> exp LTE exp .)
    THEN            reduce using rule 26 (exp -> exp LTE exp .)
    SEMICOL         reduce using rule 26 (exp -> exp LTE exp .)
    COMMA           reduce using rule 26 (exp -> exp LTE exp .)
    TO              reduce using rule 26 (exp -> exp LTE exp .)
    RBRACK          reduce using rule 26 (exp -> exp LTE exp .)
    SEP             reduce using rule 26 (exp -> exp LTE exp .)
    UNTIL           reduce using rule 26 (exp -> exp LTE exp .)
    LBRACE          reduce using rule 26 (exp -> exp LTE exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40

  ! PLUS            [ reduce using rule 26 (exp -> exp LTE exp .) ]
  ! MINUS           [ reduce using rule 26 (exp -> exp LTE exp .) ]
  ! MULTIPLY        [ reduce using rule 26 (exp -> exp LTE exp .) ]
  ! DIVIDE          [ reduce using rule 26 (exp -> exp LTE exp .) ]
  ! POWER           [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! GT              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! GTE             [ shift and go to state 47 ]
  ! LTE             [ shift and go to state 48 ]
  ! EE              [ shift and go to state 49 ]
  ! NE              [ shift and go to state 50 ]


state 85

    (27) exp -> exp EE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 27 (exp -> exp EE exp .)
    INC             reduce using rule 27 (exp -> exp EE exp .)
    POWER           reduce using rule 27 (exp -> exp EE exp .)
    MODULUS         reduce using rule 27 (exp -> exp EE exp .)
    AND             reduce using rule 27 (exp -> exp EE exp .)
    OR              reduce using rule 27 (exp -> exp EE exp .)
    EE              reduce using rule 27 (exp -> exp EE exp .)
    NE              reduce using rule 27 (exp -> exp EE exp .)
    RPAREN          reduce using rule 27 (exp -> exp EE exp .)
    THEN            reduce using rule 27 (exp -> exp EE exp .)
    SEMICOL         reduce using rule 27 (exp -> exp EE exp .)
    COMMA           reduce using rule 27 (exp -> exp EE exp .)
    TO              reduce using rule 27 (exp -> exp EE exp .)
    RBRACK          reduce using rule 27 (exp -> exp EE exp .)
    SEP             reduce using rule 27 (exp -> exp EE exp .)
    UNTIL           reduce using rule 27 (exp -> exp EE exp .)
    LBRACE          reduce using rule 27 (exp -> exp EE exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48

  ! PLUS            [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! MINUS           [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! MULTIPLY        [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! DIVIDE          [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! GT              [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! LT              [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! GTE             [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! LTE             [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! POWER           [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! EE              [ shift and go to state 49 ]
  ! NE              [ shift and go to state 50 ]


state 86

    (28) exp -> exp NE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 28 (exp -> exp NE exp .)
    INC             reduce using rule 28 (exp -> exp NE exp .)
    POWER           reduce using rule 28 (exp -> exp NE exp .)
    MODULUS         reduce using rule 28 (exp -> exp NE exp .)
    AND             reduce using rule 28 (exp -> exp NE exp .)
    OR              reduce using rule 28 (exp -> exp NE exp .)
    EE              reduce using rule 28 (exp -> exp NE exp .)
    NE              reduce using rule 28 (exp -> exp NE exp .)
    RPAREN          reduce using rule 28 (exp -> exp NE exp .)
    THEN            reduce using rule 28 (exp -> exp NE exp .)
    SEMICOL         reduce using rule 28 (exp -> exp NE exp .)
    COMMA           reduce using rule 28 (exp -> exp NE exp .)
    TO              reduce using rule 28 (exp -> exp NE exp .)
    RBRACK          reduce using rule 28 (exp -> exp NE exp .)
    SEP             reduce using rule 28 (exp -> exp NE exp .)
    UNTIL           reduce using rule 28 (exp -> exp NE exp .)
    LBRACE          reduce using rule 28 (exp -> exp NE exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48

  ! PLUS            [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! MINUS           [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! MULTIPLY        [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! DIVIDE          [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! GT              [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! LT              [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! GTE             [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! LTE             [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! POWER           [ shift and go to state 41 ]
  ! MODULUS         [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! EE              [ shift and go to state 49 ]
  ! NE              [ shift and go to state 50 ]


state 87

    (35) stmt -> STRUCT NAME SEP . structargs SEP
    (36) structargs -> . structexp COMMA structargs
    (37) structargs -> . structexp
    (38) structexp -> . NAME
    (39) structexp -> . NAME EQUAL exp

    NAME            shift and go to state 106

    structargs                     shift and go to state 107
    structexp                      shift and go to state 108

state 88

    (40) stmt -> MAKE NAME NAME .

    SEMICOL         reduce using rule 40 (stmt -> MAKE NAME NAME .)


state 89

    (58) stmt -> MAKE NAME EQUAL . exp
    (59) stmt -> MAKE NAME EQUAL . list
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN
    (30) list -> . LBRACK optargs RBRACK

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6
    LBRACK          shift and go to state 111

    exp                            shift and go to state 109
    list                           shift and go to state 110

state 90

    (61) stmt -> IF exp THEN . stmtblock
    (62) stmt -> IF exp THEN . stmtblock elsif ELSE THEN stmtblock
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 57

    stmtblock                      shift and go to state 112

state 91

    (67) stmt -> DO stmtblock WHILE . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 113

state 92

    (5) stmtblock -> LBRACE stmtS . RBRACE

    RBRACE          shift and go to state 114


state 93

    (6) stmtblock -> LBRACE error . RBRACE
    (8) stmtS -> error . SEMICOL stmtS

    RBRACE          shift and go to state 115
    SEMICOL         shift and go to state 116


state 94

    (7) stmtS -> stmt . SEMICOL stmtS

    SEMICOL         shift and go to state 117


state 95

    (68) stmt -> FOR NAME EQUAL . exp TO exp UNTIL step stmtblock
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 118

state 96

    (71) stmt -> PRINT LPAREN optargs . RPAREN

    RPAREN          shift and go to state 119


state 97

    (11) optargs -> args .

    RPAREN          reduce using rule 11 (optargs -> args .)
    RBRACK          reduce using rule 11 (optargs -> args .)


state 98

    (13) args -> exp . COMMA args
    (14) args -> exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    COMMA           shift and go to state 120
    RPAREN          reduce using rule 14 (args -> exp .)
    RBRACK          reduce using rule 14 (args -> exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 99

    (10) exp -> CALL NAME LPAREN . optargs RPAREN
    (11) optargs -> . args
    (12) optargs -> .
    (13) args -> . exp COMMA args
    (14) args -> . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    RPAREN          reduce using rule 12 (optargs -> .)
    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    optargs                        shift and go to state 121
    args                           shift and go to state 97
    exp                            shift and go to state 98

state 100

    (41) stmt -> NAME DOT NAME EQUAL . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 122

state 101

    (31) stmt -> NAME DOT POP LPAREN . exp RPAREN
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 123

state 102

    (32) stmt -> NAME DOT PUSH LPAREN . exp RPAREN
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 124

state 103

    (33) stmt -> NAME DOT INDEX LPAREN . exp RPAREN
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 125

state 104

    (34) stmt -> NAME DOT SLICE LPAREN . exp COMMA exp RPAREN
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 126

state 105

    (42) exp -> NAME DOT NAME .

    RPAREN          reduce using rule 42 (exp -> NAME DOT NAME .)
    PLUS            reduce using rule 42 (exp -> NAME DOT NAME .)
    MINUS           reduce using rule 42 (exp -> NAME DOT NAME .)
    MULTIPLY        reduce using rule 42 (exp -> NAME DOT NAME .)
    DIVIDE          reduce using rule 42 (exp -> NAME DOT NAME .)
    POWER           reduce using rule 42 (exp -> NAME DOT NAME .)
    MODULUS         reduce using rule 42 (exp -> NAME DOT NAME .)
    AND             reduce using rule 42 (exp -> NAME DOT NAME .)
    OR              reduce using rule 42 (exp -> NAME DOT NAME .)
    GT              reduce using rule 42 (exp -> NAME DOT NAME .)
    LT              reduce using rule 42 (exp -> NAME DOT NAME .)
    GTE             reduce using rule 42 (exp -> NAME DOT NAME .)
    LTE             reduce using rule 42 (exp -> NAME DOT NAME .)
    EE              reduce using rule 42 (exp -> NAME DOT NAME .)
    NE              reduce using rule 42 (exp -> NAME DOT NAME .)
    DEC             reduce using rule 42 (exp -> NAME DOT NAME .)
    INC             reduce using rule 42 (exp -> NAME DOT NAME .)
    THEN            reduce using rule 42 (exp -> NAME DOT NAME .)
    SEMICOL         reduce using rule 42 (exp -> NAME DOT NAME .)
    COMMA           reduce using rule 42 (exp -> NAME DOT NAME .)
    TO              reduce using rule 42 (exp -> NAME DOT NAME .)
    RBRACK          reduce using rule 42 (exp -> NAME DOT NAME .)
    SEP             reduce using rule 42 (exp -> NAME DOT NAME .)
    UNTIL           reduce using rule 42 (exp -> NAME DOT NAME .)
    LBRACE          reduce using rule 42 (exp -> NAME DOT NAME .)


state 106

    (38) structexp -> NAME .
    (39) structexp -> NAME . EQUAL exp

    COMMA           reduce using rule 38 (structexp -> NAME .)
    SEP             reduce using rule 38 (structexp -> NAME .)
    EQUAL           shift and go to state 127


state 107

    (35) stmt -> STRUCT NAME SEP structargs . SEP

    SEP             shift and go to state 128


state 108

    (36) structargs -> structexp . COMMA structargs
    (37) structargs -> structexp .

    COMMA           shift and go to state 129
    SEP             reduce using rule 37 (structargs -> structexp .)


state 109

    (58) stmt -> MAKE NAME EQUAL exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    SEMICOL         reduce using rule 58 (stmt -> MAKE NAME EQUAL exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 110

    (59) stmt -> MAKE NAME EQUAL list .

    SEMICOL         reduce using rule 59 (stmt -> MAKE NAME EQUAL list .)


state 111

    (30) list -> LBRACK . optargs RBRACK
    (11) optargs -> . args
    (12) optargs -> .
    (13) args -> . exp COMMA args
    (14) args -> . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    RBRACK          reduce using rule 12 (optargs -> .)
    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    optargs                        shift and go to state 130
    args                           shift and go to state 97
    exp                            shift and go to state 98

state 112

    (61) stmt -> IF exp THEN stmtblock .
    (62) stmt -> IF exp THEN stmtblock . elsif ELSE THEN stmtblock
    (63) elsif -> . ELIF exp THEN stmtblock elsif
    (64) elsif -> .

    SEMICOL         reduce using rule 61 (stmt -> IF exp THEN stmtblock .)
    ELIF            shift and go to state 132
    ELSE            reduce using rule 64 (elsif -> .)

    elsif                          shift and go to state 131

state 113

    (67) stmt -> DO stmtblock WHILE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    SEMICOL         reduce using rule 67 (stmt -> DO stmtblock WHILE exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 114

    (5) stmtblock -> LBRACE stmtS RBRACE .

    WHILE           reduce using rule 5 (stmtblock -> LBRACE stmtS RBRACE .)
    ELIF            reduce using rule 5 (stmtblock -> LBRACE stmtS RBRACE .)
    ELSE            reduce using rule 5 (stmtblock -> LBRACE stmtS RBRACE .)
    SEMICOL         reduce using rule 5 (stmtblock -> LBRACE stmtS RBRACE .)


state 115

    (6) stmtblock -> LBRACE error RBRACE .

    WHILE           reduce using rule 6 (stmtblock -> LBRACE error RBRACE .)
    ELIF            reduce using rule 6 (stmtblock -> LBRACE error RBRACE .)
    ELSE            reduce using rule 6 (stmtblock -> LBRACE error RBRACE .)
    SEMICOL         reduce using rule 6 (stmtblock -> LBRACE error RBRACE .)


state 116

    (8) stmtS -> error SEMICOL . stmtS
    (7) stmtS -> . stmt SEMICOL stmtS
    (8) stmtS -> . error SEMICOL stmtS
    (9) stmtS -> .
    (31) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (32) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (33) stmt -> . NAME DOT INDEX LPAREN exp RPAREN
    (34) stmt -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (35) stmt -> . STRUCT NAME SEP structargs SEP
    (40) stmt -> . MAKE NAME NAME
    (41) stmt -> . NAME DOT NAME EQUAL exp
    (49) stmt -> . exp DEC
    (50) stmt -> . exp INC
    (57) stmt -> . MAKE NAME
    (58) stmt -> . MAKE NAME EQUAL exp
    (59) stmt -> . MAKE NAME EQUAL list
    (60) stmt -> . NAME EQUAL exp
    (61) stmt -> . IF exp THEN stmtblock
    (62) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (65) stmt -> . BREAK
    (66) stmt -> . CONTINUE
    (67) stmt -> . DO stmtblock WHILE exp
    (68) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (71) stmt -> . PRINT LPAREN optargs RPAREN
    (72) stmt -> . RETURN exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    error           shift and go to state 133
    RBRACE          reduce using rule 9 (stmtS -> .)
    NAME            shift and go to state 5
    STRUCT          shift and go to state 8
    MAKE            shift and go to state 9
    IF              shift and go to state 12
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 16
    PRINT           shift and go to state 17
    RETURN          shift and go to state 18
    CALL            shift and go to state 19
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    stmtS                          shift and go to state 134
    stmt                           shift and go to state 94
    exp                            shift and go to state 7

state 117

    (7) stmtS -> stmt SEMICOL . stmtS
    (7) stmtS -> . stmt SEMICOL stmtS
    (8) stmtS -> . error SEMICOL stmtS
    (9) stmtS -> .
    (31) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (32) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (33) stmt -> . NAME DOT INDEX LPAREN exp RPAREN
    (34) stmt -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (35) stmt -> . STRUCT NAME SEP structargs SEP
    (40) stmt -> . MAKE NAME NAME
    (41) stmt -> . NAME DOT NAME EQUAL exp
    (49) stmt -> . exp DEC
    (50) stmt -> . exp INC
    (57) stmt -> . MAKE NAME
    (58) stmt -> . MAKE NAME EQUAL exp
    (59) stmt -> . MAKE NAME EQUAL list
    (60) stmt -> . NAME EQUAL exp
    (61) stmt -> . IF exp THEN stmtblock
    (62) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (65) stmt -> . BREAK
    (66) stmt -> . CONTINUE
    (67) stmt -> . DO stmtblock WHILE exp
    (68) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (71) stmt -> . PRINT LPAREN optargs RPAREN
    (72) stmt -> . RETURN exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    error           shift and go to state 133
    RBRACE          reduce using rule 9 (stmtS -> .)
    NAME            shift and go to state 5
    STRUCT          shift and go to state 8
    MAKE            shift and go to state 9
    IF              shift and go to state 12
    BREAK           shift and go to state 13
    CONTINUE        shift and go to state 14
    DO              shift and go to state 15
    FOR             shift and go to state 16
    PRINT           shift and go to state 17
    RETURN          shift and go to state 18
    CALL            shift and go to state 19
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    stmt                           shift and go to state 94
    stmtS                          shift and go to state 135
    exp                            shift and go to state 7

state 118

    (68) stmt -> FOR NAME EQUAL exp . TO exp UNTIL step stmtblock
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    TO              shift and go to state 136
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 119

    (71) stmt -> PRINT LPAREN optargs RPAREN .

    SEMICOL         reduce using rule 71 (stmt -> PRINT LPAREN optargs RPAREN .)


state 120

    (13) args -> exp COMMA . args
    (13) args -> . exp COMMA args
    (14) args -> . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 98
    args                           shift and go to state 137

state 121

    (10) exp -> CALL NAME LPAREN optargs . RPAREN

    RPAREN          shift and go to state 138


state 122

    (41) stmt -> NAME DOT NAME EQUAL exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    SEMICOL         reduce using rule 41 (stmt -> NAME DOT NAME EQUAL exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 123

    (31) stmt -> NAME DOT POP LPAREN exp . RPAREN
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    RPAREN          shift and go to state 139
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 124

    (32) stmt -> NAME DOT PUSH LPAREN exp . RPAREN
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    RPAREN          shift and go to state 140
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 125

    (33) stmt -> NAME DOT INDEX LPAREN exp . RPAREN
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    RPAREN          shift and go to state 141
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 126

    (34) stmt -> NAME DOT SLICE LPAREN exp . COMMA exp RPAREN
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    COMMA           shift and go to state 142
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 127

    (39) structexp -> NAME EQUAL . exp
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 143

state 128

    (35) stmt -> STRUCT NAME SEP structargs SEP .

    SEMICOL         reduce using rule 35 (stmt -> STRUCT NAME SEP structargs SEP .)


state 129

    (36) structargs -> structexp COMMA . structargs
    (36) structargs -> . structexp COMMA structargs
    (37) structargs -> . structexp
    (38) structexp -> . NAME
    (39) structexp -> . NAME EQUAL exp

    NAME            shift and go to state 106

    structexp                      shift and go to state 108
    structargs                     shift and go to state 144

state 130

    (30) list -> LBRACK optargs . RBRACK

    RBRACK          shift and go to state 145


state 131

    (62) stmt -> IF exp THEN stmtblock elsif . ELSE THEN stmtblock

    ELSE            shift and go to state 146


state 132

    (63) elsif -> ELIF . exp THEN stmtblock elsif
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 147

state 133

    (8) stmtS -> error . SEMICOL stmtS

    SEMICOL         shift and go to state 116


state 134

    (8) stmtS -> error SEMICOL stmtS .

    RBRACE          reduce using rule 8 (stmtS -> error SEMICOL stmtS .)


state 135

    (7) stmtS -> stmt SEMICOL stmtS .

    RBRACE          reduce using rule 7 (stmtS -> stmt SEMICOL stmtS .)


state 136

    (68) stmt -> FOR NAME EQUAL exp TO . exp UNTIL step stmtblock
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 148

state 137

    (13) args -> exp COMMA args .

    RPAREN          reduce using rule 13 (args -> exp COMMA args .)
    RBRACK          reduce using rule 13 (args -> exp COMMA args .)


state 138

    (10) exp -> CALL NAME LPAREN optargs RPAREN .

    DEC             reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    INC             reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    PLUS            reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    MINUS           reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    MULTIPLY        reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    DIVIDE          reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    POWER           reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    MODULUS         reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    AND             reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    OR              reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    GT              reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    LT              reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    GTE             reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    LTE             reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    EE              reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    NE              reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    RPAREN          reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    THEN            reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    SEMICOL         reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    COMMA           reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    TO              reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    RBRACK          reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    SEP             reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    UNTIL           reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)
    LBRACE          reduce using rule 10 (exp -> CALL NAME LPAREN optargs RPAREN .)


state 139

    (31) stmt -> NAME DOT POP LPAREN exp RPAREN .

    SEMICOL         reduce using rule 31 (stmt -> NAME DOT POP LPAREN exp RPAREN .)


state 140

    (32) stmt -> NAME DOT PUSH LPAREN exp RPAREN .

    SEMICOL         reduce using rule 32 (stmt -> NAME DOT PUSH LPAREN exp RPAREN .)


state 141

    (33) stmt -> NAME DOT INDEX LPAREN exp RPAREN .

    SEMICOL         reduce using rule 33 (stmt -> NAME DOT INDEX LPAREN exp RPAREN .)


state 142

    (34) stmt -> NAME DOT SLICE LPAREN exp COMMA . exp RPAREN
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 149

state 143

    (39) structexp -> NAME EQUAL exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    COMMA           reduce using rule 39 (structexp -> NAME EQUAL exp .)
    SEP             reduce using rule 39 (structexp -> NAME EQUAL exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 144

    (36) structargs -> structexp COMMA structargs .

    SEP             reduce using rule 36 (structargs -> structexp COMMA structargs .)


state 145

    (30) list -> LBRACK optargs RBRACK .

    SEMICOL         reduce using rule 30 (list -> LBRACK optargs RBRACK .)


state 146

    (62) stmt -> IF exp THEN stmtblock elsif ELSE . THEN stmtblock

    THEN            shift and go to state 150


state 147

    (63) elsif -> ELIF exp . THEN stmtblock elsif
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    THEN            shift and go to state 151
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 148

    (68) stmt -> FOR NAME EQUAL exp TO exp . UNTIL step stmtblock
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    UNTIL           shift and go to state 152
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 149

    (34) stmt -> NAME DOT SLICE LPAREN exp COMMA exp . RPAREN
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    RPAREN          shift and go to state 153
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 150

    (62) stmt -> IF exp THEN stmtblock elsif ELSE THEN . stmtblock
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 57

    stmtblock                      shift and go to state 154

state 151

    (63) elsif -> ELIF exp THEN . stmtblock elsif
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 57

    stmtblock                      shift and go to state 155

state 152

    (68) stmt -> FOR NAME EQUAL exp TO exp UNTIL . step stmtblock
    (69) step -> . exp
    (70) step -> .
    (10) exp -> . CALL NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (42) exp -> . NAME DOT NAME
    (43) exp -> . MINUS INT
    (44) exp -> . MINUS FLOAT
    (45) exp -> . INT
    (46) exp -> . FLOAT
    (47) exp -> . DEC exp
    (48) exp -> . INC exp
    (51) exp -> . NOT exp
    (52) exp -> . TRUE
    (53) exp -> . FALSE
    (54) exp -> . STRING
    (55) exp -> . CHAR
    (56) exp -> . LPAREN exp RPAREN

    LBRACE          reduce using rule 70 (step -> .)
    CALL            shift and go to state 19
    NAME            shift and go to state 34
    MINUS           shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    DEC             shift and go to state 10
    INC             shift and go to state 11
    NOT             shift and go to state 23
    TRUE            shift and go to state 24
    FALSE           shift and go to state 25
    STRING          shift and go to state 26
    CHAR            shift and go to state 27
    LPAREN          shift and go to state 6

    exp                            shift and go to state 156
    step                           shift and go to state 157

state 153

    (34) stmt -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .

    SEMICOL         reduce using rule 34 (stmt -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)


state 154

    (62) stmt -> IF exp THEN stmtblock elsif ELSE THEN stmtblock .

    SEMICOL         reduce using rule 62 (stmt -> IF exp THEN stmtblock elsif ELSE THEN stmtblock .)


state 155

    (63) elsif -> ELIF exp THEN stmtblock . elsif
    (63) elsif -> . ELIF exp THEN stmtblock elsif
    (64) elsif -> .

    ELIF            shift and go to state 132
    ELSE            reduce using rule 64 (elsif -> .)

    elsif                          shift and go to state 158

state 156

    (69) step -> exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    LBRACE          reduce using rule 69 (step -> exp .)
    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    POWER           shift and go to state 41
    MODULUS         shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    GT              shift and go to state 45
    LT              shift and go to state 46
    GTE             shift and go to state 47
    LTE             shift and go to state 48
    EE              shift and go to state 49
    NE              shift and go to state 50


state 157

    (68) stmt -> FOR NAME EQUAL exp TO exp UNTIL step . stmtblock
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 57

    stmtblock                      shift and go to state 159

state 158

    (63) elsif -> ELIF exp THEN stmtblock elsif .

    ELSE            reduce using rule 63 (elsif -> ELIF exp THEN stmtblock elsif .)


state 159

    (68) stmt -> FOR NAME EQUAL exp TO exp UNTIL step stmtblock .

    SEMICOL         reduce using rule 68 (stmt -> FOR NAME EQUAL exp TO exp UNTIL step stmtblock .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 77 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 77 resolved as shift
WARNING: shift/reduce conflict for POWER in state 77 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 77 resolved as shift
WARNING: shift/reduce conflict for AND in state 77 resolved as shift
WARNING: shift/reduce conflict for OR in state 77 resolved as shift
WARNING: shift/reduce conflict for GT in state 77 resolved as shift
WARNING: shift/reduce conflict for LT in state 77 resolved as shift
WARNING: shift/reduce conflict for GTE in state 77 resolved as shift
WARNING: shift/reduce conflict for LTE in state 77 resolved as shift
WARNING: shift/reduce conflict for EE in state 77 resolved as shift
WARNING: shift/reduce conflict for NE in state 77 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 78 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 78 resolved as shift
WARNING: shift/reduce conflict for POWER in state 78 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 78 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
WARNING: shift/reduce conflict for GT in state 78 resolved as shift
WARNING: shift/reduce conflict for LT in state 78 resolved as shift
WARNING: shift/reduce conflict for GTE in state 78 resolved as shift
WARNING: shift/reduce conflict for LTE in state 78 resolved as shift
WARNING: shift/reduce conflict for EE in state 78 resolved as shift
WARNING: shift/reduce conflict for NE in state 78 resolved as shift
