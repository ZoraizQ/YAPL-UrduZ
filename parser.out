Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CALL
    COMMENT
    FUNCTION
    LBRACK
    MULTICOMMENT
    RBRACK

Grammar

Rule 0     S' -> uz
Rule 1     uz -> line uz
Rule 2     line -> stmt SEMICOL
Rule 3     uz -> error SEMICOL
Rule 4     uz -> <empty>
Rule 5     stmtblock -> LBRACE stmtS RBRACE
Rule 6     stmtblock -> LBRACE error RBRACE
Rule 7     stmtS -> stmt SEMICOL stmtS
Rule 8     stmtS -> error SEMICOL stmtS
Rule 9     stmtS -> <empty>
Rule 10    exp -> NAME LPAREN optargs RPAREN
Rule 11    optargs -> args
Rule 12    optargs -> <empty>
Rule 13    args -> exp COMMA args
Rule 14    args -> exp
Rule 15    exp -> exp PLUS exp
Rule 16    exp -> exp MINUS exp
Rule 17    exp -> exp MULTIPLY exp
Rule 18    exp -> exp DIVIDE exp
Rule 19    exp -> exp POWER exp
Rule 20    exp -> exp MODULUS exp
Rule 21    exp -> exp AND exp
Rule 22    exp -> exp OR exp
Rule 23    exp -> exp GT exp
Rule 24    exp -> exp LT exp
Rule 25    exp -> exp GTE exp
Rule 26    exp -> exp LTE exp
Rule 27    exp -> exp EE exp
Rule 28    exp -> exp NE exp
Rule 29    exp -> NAME
Rule 30    exp -> MINUS INT
Rule 31    exp -> MINUS FLOAT
Rule 32    exp -> INT
Rule 33    exp -> FLOAT
Rule 34    exp -> DEC exp
Rule 35    exp -> INC exp
Rule 36    stmt -> exp DEC
Rule 37    stmt -> exp INC
Rule 38    exp -> NOT exp
Rule 39    exp -> TRUE
Rule 40    exp -> FALSE
Rule 41    exp -> STRING
Rule 42    exp -> CHAR
Rule 43    exp -> LPAREN exp RPAREN
Rule 44    stmt -> MAKE NAME
Rule 45    stmt -> MAKE NAME EQUAL exp
Rule 46    stmt -> NAME EQUAL exp
Rule 47    stmt -> IF exp THEN stmtblock
Rule 48    stmt -> IF exp THEN stmtblock elsif ELSE THEN stmtblock
Rule 49    elsif -> ELIF exp THEN stmtblock elsif
Rule 50    elsif -> <empty>
Rule 51    stmt -> DO stmtblock WHILE exp
Rule 52    stmt -> FOR NAME EQUAL exp TO exp UNTIL step stmtblock
Rule 53    step -> exp
Rule 54    step -> <empty>
Rule 55    stmt -> PRINT LPAREN exp RPAREN
Rule 56    stmt -> RETURN exp

Terminals, with rules where they appear

AND                  : 21
CALL                 : 
CHAR                 : 42
COMMA                : 13
COMMENT              : 
DEC                  : 34 36
DIVIDE               : 18
DO                   : 51
EE                   : 27
ELIF                 : 49
ELSE                 : 48
EQUAL                : 45 46 52
FALSE                : 40
FLOAT                : 31 33
FOR                  : 52
FUNCTION             : 
GT                   : 23
GTE                  : 25
IF                   : 47 48
INC                  : 35 37
INT                  : 30 32
LBRACE               : 5 6
LBRACK               : 
LPAREN               : 10 43 55
LT                   : 24
LTE                  : 26
MAKE                 : 44 45
MINUS                : 16 30 31
MODULUS              : 20
MULTICOMMENT         : 
MULTIPLY             : 17
NAME                 : 10 29 44 45 46 52
NE                   : 28
NOT                  : 38
OR                   : 22
PLUS                 : 15
POWER                : 19
PRINT                : 55
RBRACE               : 5 6
RBRACK               : 
RETURN               : 56
RPAREN               : 10 43 55
SEMICOL              : 2 3 7 8
STRING               : 41
THEN                 : 47 48 48 49
TO                   : 52
TRUE                 : 39
UNTIL                : 52
WHILE                : 51
error                : 3 6 8

Nonterminals, with rules where they appear

args                 : 11 13
elsif                : 48 49
exp                  : 13 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 34 35 36 37 38 43 45 46 47 48 49 51 52 52 53 55 56
line                 : 1
optargs              : 10
step                 : 52
stmt                 : 2 7
stmtS                : 5 7 8
stmtblock            : 47 48 48 49 51 52
uz                   : 1 0

Parsing method: LALR

state 0

    (0) S' -> . uz
    (1) uz -> . line uz
    (3) uz -> . error SEMICOL
    (4) uz -> .
    (2) line -> . stmt SEMICOL
    (36) stmt -> . exp DEC
    (37) stmt -> . exp INC
    (44) stmt -> . MAKE NAME
    (45) stmt -> . MAKE NAME EQUAL exp
    (46) stmt -> . NAME EQUAL exp
    (47) stmt -> . IF exp THEN stmtblock
    (48) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (51) stmt -> . DO stmtblock WHILE exp
    (52) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (55) stmt -> . PRINT LPAREN exp RPAREN
    (56) stmt -> . RETURN exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    error           shift and go to state 3
    $end            reduce using rule 4 (uz -> .)
    MAKE            shift and go to state 8
    NAME            shift and go to state 9
    IF              shift and go to state 10
    DO              shift and go to state 11
    FOR             shift and go to state 12
    PRINT           shift and go to state 13
    RETURN          shift and go to state 15
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    uz                             shift and go to state 1
    line                           shift and go to state 2
    stmt                           shift and go to state 4
    exp                            shift and go to state 5

state 1

    (0) S' -> uz .



state 2

    (1) uz -> line . uz
    (1) uz -> . line uz
    (3) uz -> . error SEMICOL
    (4) uz -> .
    (2) line -> . stmt SEMICOL
    (36) stmt -> . exp DEC
    (37) stmt -> . exp INC
    (44) stmt -> . MAKE NAME
    (45) stmt -> . MAKE NAME EQUAL exp
    (46) stmt -> . NAME EQUAL exp
    (47) stmt -> . IF exp THEN stmtblock
    (48) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (51) stmt -> . DO stmtblock WHILE exp
    (52) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (55) stmt -> . PRINT LPAREN exp RPAREN
    (56) stmt -> . RETURN exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    error           shift and go to state 3
    $end            reduce using rule 4 (uz -> .)
    MAKE            shift and go to state 8
    NAME            shift and go to state 9
    IF              shift and go to state 10
    DO              shift and go to state 11
    FOR             shift and go to state 12
    PRINT           shift and go to state 13
    RETURN          shift and go to state 15
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    line                           shift and go to state 2
    uz                             shift and go to state 24
    stmt                           shift and go to state 4
    exp                            shift and go to state 5

state 3

    (3) uz -> error . SEMICOL

    SEMICOL         shift and go to state 25


state 4

    (2) line -> stmt . SEMICOL

    SEMICOL         shift and go to state 26


state 5

    (36) stmt -> exp . DEC
    (37) stmt -> exp . INC
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             shift and go to state 27
    INC             shift and go to state 28
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    MODULUS         shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42


state 6

    (34) exp -> DEC . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 43

state 7

    (35) exp -> INC . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 45

state 8

    (44) stmt -> MAKE . NAME
    (45) stmt -> MAKE . NAME EQUAL exp

    NAME            shift and go to state 46


state 9

    (46) stmt -> NAME . EQUAL exp
    (10) exp -> NAME . LPAREN optargs RPAREN
    (29) exp -> NAME .

    EQUAL           shift and go to state 47
    LPAREN          shift and go to state 48
    DEC             reduce using rule 29 (exp -> NAME .)
    INC             reduce using rule 29 (exp -> NAME .)
    PLUS            reduce using rule 29 (exp -> NAME .)
    MINUS           reduce using rule 29 (exp -> NAME .)
    MULTIPLY        reduce using rule 29 (exp -> NAME .)
    DIVIDE          reduce using rule 29 (exp -> NAME .)
    POWER           reduce using rule 29 (exp -> NAME .)
    MODULUS         reduce using rule 29 (exp -> NAME .)
    AND             reduce using rule 29 (exp -> NAME .)
    OR              reduce using rule 29 (exp -> NAME .)
    GT              reduce using rule 29 (exp -> NAME .)
    LT              reduce using rule 29 (exp -> NAME .)
    GTE             reduce using rule 29 (exp -> NAME .)
    LTE             reduce using rule 29 (exp -> NAME .)
    EE              reduce using rule 29 (exp -> NAME .)
    NE              reduce using rule 29 (exp -> NAME .)


state 10

    (47) stmt -> IF . exp THEN stmtblock
    (48) stmt -> IF . exp THEN stmtblock elsif ELSE THEN stmtblock
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 49

state 11

    (51) stmt -> DO . stmtblock WHILE exp
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 51

    stmtblock                      shift and go to state 50

state 12

    (52) stmt -> FOR . NAME EQUAL exp TO exp UNTIL step stmtblock

    NAME            shift and go to state 52


state 13

    (55) stmt -> PRINT . LPAREN exp RPAREN

    LPAREN          shift and go to state 53


state 14

    (43) exp -> LPAREN . exp RPAREN
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 54

state 15

    (56) stmt -> RETURN . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 55

state 16

    (30) exp -> MINUS . INT
    (31) exp -> MINUS . FLOAT

    INT             shift and go to state 56
    FLOAT           shift and go to state 57


state 17

    (32) exp -> INT .

    DEC             reduce using rule 32 (exp -> INT .)
    INC             reduce using rule 32 (exp -> INT .)
    PLUS            reduce using rule 32 (exp -> INT .)
    MINUS           reduce using rule 32 (exp -> INT .)
    MULTIPLY        reduce using rule 32 (exp -> INT .)
    DIVIDE          reduce using rule 32 (exp -> INT .)
    POWER           reduce using rule 32 (exp -> INT .)
    MODULUS         reduce using rule 32 (exp -> INT .)
    AND             reduce using rule 32 (exp -> INT .)
    OR              reduce using rule 32 (exp -> INT .)
    GT              reduce using rule 32 (exp -> INT .)
    LT              reduce using rule 32 (exp -> INT .)
    GTE             reduce using rule 32 (exp -> INT .)
    LTE             reduce using rule 32 (exp -> INT .)
    EE              reduce using rule 32 (exp -> INT .)
    NE              reduce using rule 32 (exp -> INT .)
    THEN            reduce using rule 32 (exp -> INT .)
    RPAREN          reduce using rule 32 (exp -> INT .)
    SEMICOL         reduce using rule 32 (exp -> INT .)
    COMMA           reduce using rule 32 (exp -> INT .)
    TO              reduce using rule 32 (exp -> INT .)
    UNTIL           reduce using rule 32 (exp -> INT .)
    LBRACE          reduce using rule 32 (exp -> INT .)


state 18

    (33) exp -> FLOAT .

    DEC             reduce using rule 33 (exp -> FLOAT .)
    INC             reduce using rule 33 (exp -> FLOAT .)
    PLUS            reduce using rule 33 (exp -> FLOAT .)
    MINUS           reduce using rule 33 (exp -> FLOAT .)
    MULTIPLY        reduce using rule 33 (exp -> FLOAT .)
    DIVIDE          reduce using rule 33 (exp -> FLOAT .)
    POWER           reduce using rule 33 (exp -> FLOAT .)
    MODULUS         reduce using rule 33 (exp -> FLOAT .)
    AND             reduce using rule 33 (exp -> FLOAT .)
    OR              reduce using rule 33 (exp -> FLOAT .)
    GT              reduce using rule 33 (exp -> FLOAT .)
    LT              reduce using rule 33 (exp -> FLOAT .)
    GTE             reduce using rule 33 (exp -> FLOAT .)
    LTE             reduce using rule 33 (exp -> FLOAT .)
    EE              reduce using rule 33 (exp -> FLOAT .)
    NE              reduce using rule 33 (exp -> FLOAT .)
    THEN            reduce using rule 33 (exp -> FLOAT .)
    RPAREN          reduce using rule 33 (exp -> FLOAT .)
    SEMICOL         reduce using rule 33 (exp -> FLOAT .)
    COMMA           reduce using rule 33 (exp -> FLOAT .)
    TO              reduce using rule 33 (exp -> FLOAT .)
    UNTIL           reduce using rule 33 (exp -> FLOAT .)
    LBRACE          reduce using rule 33 (exp -> FLOAT .)


state 19

    (38) exp -> NOT . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 58

state 20

    (39) exp -> TRUE .

    DEC             reduce using rule 39 (exp -> TRUE .)
    INC             reduce using rule 39 (exp -> TRUE .)
    PLUS            reduce using rule 39 (exp -> TRUE .)
    MINUS           reduce using rule 39 (exp -> TRUE .)
    MULTIPLY        reduce using rule 39 (exp -> TRUE .)
    DIVIDE          reduce using rule 39 (exp -> TRUE .)
    POWER           reduce using rule 39 (exp -> TRUE .)
    MODULUS         reduce using rule 39 (exp -> TRUE .)
    AND             reduce using rule 39 (exp -> TRUE .)
    OR              reduce using rule 39 (exp -> TRUE .)
    GT              reduce using rule 39 (exp -> TRUE .)
    LT              reduce using rule 39 (exp -> TRUE .)
    GTE             reduce using rule 39 (exp -> TRUE .)
    LTE             reduce using rule 39 (exp -> TRUE .)
    EE              reduce using rule 39 (exp -> TRUE .)
    NE              reduce using rule 39 (exp -> TRUE .)
    THEN            reduce using rule 39 (exp -> TRUE .)
    RPAREN          reduce using rule 39 (exp -> TRUE .)
    SEMICOL         reduce using rule 39 (exp -> TRUE .)
    COMMA           reduce using rule 39 (exp -> TRUE .)
    TO              reduce using rule 39 (exp -> TRUE .)
    UNTIL           reduce using rule 39 (exp -> TRUE .)
    LBRACE          reduce using rule 39 (exp -> TRUE .)


state 21

    (40) exp -> FALSE .

    DEC             reduce using rule 40 (exp -> FALSE .)
    INC             reduce using rule 40 (exp -> FALSE .)
    PLUS            reduce using rule 40 (exp -> FALSE .)
    MINUS           reduce using rule 40 (exp -> FALSE .)
    MULTIPLY        reduce using rule 40 (exp -> FALSE .)
    DIVIDE          reduce using rule 40 (exp -> FALSE .)
    POWER           reduce using rule 40 (exp -> FALSE .)
    MODULUS         reduce using rule 40 (exp -> FALSE .)
    AND             reduce using rule 40 (exp -> FALSE .)
    OR              reduce using rule 40 (exp -> FALSE .)
    GT              reduce using rule 40 (exp -> FALSE .)
    LT              reduce using rule 40 (exp -> FALSE .)
    GTE             reduce using rule 40 (exp -> FALSE .)
    LTE             reduce using rule 40 (exp -> FALSE .)
    EE              reduce using rule 40 (exp -> FALSE .)
    NE              reduce using rule 40 (exp -> FALSE .)
    THEN            reduce using rule 40 (exp -> FALSE .)
    RPAREN          reduce using rule 40 (exp -> FALSE .)
    SEMICOL         reduce using rule 40 (exp -> FALSE .)
    COMMA           reduce using rule 40 (exp -> FALSE .)
    TO              reduce using rule 40 (exp -> FALSE .)
    UNTIL           reduce using rule 40 (exp -> FALSE .)
    LBRACE          reduce using rule 40 (exp -> FALSE .)


state 22

    (41) exp -> STRING .

    DEC             reduce using rule 41 (exp -> STRING .)
    INC             reduce using rule 41 (exp -> STRING .)
    PLUS            reduce using rule 41 (exp -> STRING .)
    MINUS           reduce using rule 41 (exp -> STRING .)
    MULTIPLY        reduce using rule 41 (exp -> STRING .)
    DIVIDE          reduce using rule 41 (exp -> STRING .)
    POWER           reduce using rule 41 (exp -> STRING .)
    MODULUS         reduce using rule 41 (exp -> STRING .)
    AND             reduce using rule 41 (exp -> STRING .)
    OR              reduce using rule 41 (exp -> STRING .)
    GT              reduce using rule 41 (exp -> STRING .)
    LT              reduce using rule 41 (exp -> STRING .)
    GTE             reduce using rule 41 (exp -> STRING .)
    LTE             reduce using rule 41 (exp -> STRING .)
    EE              reduce using rule 41 (exp -> STRING .)
    NE              reduce using rule 41 (exp -> STRING .)
    THEN            reduce using rule 41 (exp -> STRING .)
    RPAREN          reduce using rule 41 (exp -> STRING .)
    SEMICOL         reduce using rule 41 (exp -> STRING .)
    COMMA           reduce using rule 41 (exp -> STRING .)
    TO              reduce using rule 41 (exp -> STRING .)
    UNTIL           reduce using rule 41 (exp -> STRING .)
    LBRACE          reduce using rule 41 (exp -> STRING .)


state 23

    (42) exp -> CHAR .

    DEC             reduce using rule 42 (exp -> CHAR .)
    INC             reduce using rule 42 (exp -> CHAR .)
    PLUS            reduce using rule 42 (exp -> CHAR .)
    MINUS           reduce using rule 42 (exp -> CHAR .)
    MULTIPLY        reduce using rule 42 (exp -> CHAR .)
    DIVIDE          reduce using rule 42 (exp -> CHAR .)
    POWER           reduce using rule 42 (exp -> CHAR .)
    MODULUS         reduce using rule 42 (exp -> CHAR .)
    AND             reduce using rule 42 (exp -> CHAR .)
    OR              reduce using rule 42 (exp -> CHAR .)
    GT              reduce using rule 42 (exp -> CHAR .)
    LT              reduce using rule 42 (exp -> CHAR .)
    GTE             reduce using rule 42 (exp -> CHAR .)
    LTE             reduce using rule 42 (exp -> CHAR .)
    EE              reduce using rule 42 (exp -> CHAR .)
    NE              reduce using rule 42 (exp -> CHAR .)
    THEN            reduce using rule 42 (exp -> CHAR .)
    RPAREN          reduce using rule 42 (exp -> CHAR .)
    SEMICOL         reduce using rule 42 (exp -> CHAR .)
    COMMA           reduce using rule 42 (exp -> CHAR .)
    TO              reduce using rule 42 (exp -> CHAR .)
    UNTIL           reduce using rule 42 (exp -> CHAR .)
    LBRACE          reduce using rule 42 (exp -> CHAR .)


state 24

    (1) uz -> line uz .

    $end            reduce using rule 1 (uz -> line uz .)


state 25

    (3) uz -> error SEMICOL .

    $end            reduce using rule 3 (uz -> error SEMICOL .)


state 26

    (2) line -> stmt SEMICOL .

    error           reduce using rule 2 (line -> stmt SEMICOL .)
    MAKE            reduce using rule 2 (line -> stmt SEMICOL .)
    NAME            reduce using rule 2 (line -> stmt SEMICOL .)
    IF              reduce using rule 2 (line -> stmt SEMICOL .)
    DO              reduce using rule 2 (line -> stmt SEMICOL .)
    FOR             reduce using rule 2 (line -> stmt SEMICOL .)
    PRINT           reduce using rule 2 (line -> stmt SEMICOL .)
    RETURN          reduce using rule 2 (line -> stmt SEMICOL .)
    MINUS           reduce using rule 2 (line -> stmt SEMICOL .)
    INT             reduce using rule 2 (line -> stmt SEMICOL .)
    FLOAT           reduce using rule 2 (line -> stmt SEMICOL .)
    DEC             reduce using rule 2 (line -> stmt SEMICOL .)
    INC             reduce using rule 2 (line -> stmt SEMICOL .)
    NOT             reduce using rule 2 (line -> stmt SEMICOL .)
    TRUE            reduce using rule 2 (line -> stmt SEMICOL .)
    FALSE           reduce using rule 2 (line -> stmt SEMICOL .)
    STRING          reduce using rule 2 (line -> stmt SEMICOL .)
    CHAR            reduce using rule 2 (line -> stmt SEMICOL .)
    LPAREN          reduce using rule 2 (line -> stmt SEMICOL .)
    $end            reduce using rule 2 (line -> stmt SEMICOL .)


state 27

    (36) stmt -> exp DEC .

    SEMICOL         reduce using rule 36 (stmt -> exp DEC .)


state 28

    (37) stmt -> exp INC .

    SEMICOL         reduce using rule 37 (stmt -> exp INC .)


state 29

    (15) exp -> exp PLUS . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 59

state 30

    (16) exp -> exp MINUS . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 60

state 31

    (17) exp -> exp MULTIPLY . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 61

state 32

    (18) exp -> exp DIVIDE . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 62

state 33

    (19) exp -> exp POWER . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 63

state 34

    (20) exp -> exp MODULUS . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 64

state 35

    (21) exp -> exp AND . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 65

state 36

    (22) exp -> exp OR . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 66

state 37

    (23) exp -> exp GT . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 67

state 38

    (24) exp -> exp LT . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 68

state 39

    (25) exp -> exp GTE . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 69

state 40

    (26) exp -> exp LTE . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 70

state 41

    (27) exp -> exp EE . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 71

state 42

    (28) exp -> exp NE . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 72

state 43

    (34) exp -> DEC exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 34 (exp -> DEC exp .)
    INC             reduce using rule 34 (exp -> DEC exp .)
    POWER           reduce using rule 34 (exp -> DEC exp .)
    MODULUS         reduce using rule 34 (exp -> DEC exp .)
    THEN            reduce using rule 34 (exp -> DEC exp .)
    RPAREN          reduce using rule 34 (exp -> DEC exp .)
    SEMICOL         reduce using rule 34 (exp -> DEC exp .)
    COMMA           reduce using rule 34 (exp -> DEC exp .)
    TO              reduce using rule 34 (exp -> DEC exp .)
    UNTIL           reduce using rule 34 (exp -> DEC exp .)
    LBRACE          reduce using rule 34 (exp -> DEC exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    AND             shift and go to state 35
    OR              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42

  ! PLUS            [ reduce using rule 34 (exp -> DEC exp .) ]
  ! MINUS           [ reduce using rule 34 (exp -> DEC exp .) ]
  ! MULTIPLY        [ reduce using rule 34 (exp -> DEC exp .) ]
  ! DIVIDE          [ reduce using rule 34 (exp -> DEC exp .) ]
  ! AND             [ reduce using rule 34 (exp -> DEC exp .) ]
  ! OR              [ reduce using rule 34 (exp -> DEC exp .) ]
  ! GT              [ reduce using rule 34 (exp -> DEC exp .) ]
  ! LT              [ reduce using rule 34 (exp -> DEC exp .) ]
  ! GTE             [ reduce using rule 34 (exp -> DEC exp .) ]
  ! LTE             [ reduce using rule 34 (exp -> DEC exp .) ]
  ! EE              [ reduce using rule 34 (exp -> DEC exp .) ]
  ! NE              [ reduce using rule 34 (exp -> DEC exp .) ]
  ! POWER           [ shift and go to state 33 ]
  ! MODULUS         [ shift and go to state 34 ]


state 44

    (10) exp -> NAME . LPAREN optargs RPAREN
    (29) exp -> NAME .

    LPAREN          shift and go to state 48
    PLUS            reduce using rule 29 (exp -> NAME .)
    MINUS           reduce using rule 29 (exp -> NAME .)
    MULTIPLY        reduce using rule 29 (exp -> NAME .)
    DIVIDE          reduce using rule 29 (exp -> NAME .)
    POWER           reduce using rule 29 (exp -> NAME .)
    MODULUS         reduce using rule 29 (exp -> NAME .)
    AND             reduce using rule 29 (exp -> NAME .)
    OR              reduce using rule 29 (exp -> NAME .)
    GT              reduce using rule 29 (exp -> NAME .)
    LT              reduce using rule 29 (exp -> NAME .)
    GTE             reduce using rule 29 (exp -> NAME .)
    LTE             reduce using rule 29 (exp -> NAME .)
    EE              reduce using rule 29 (exp -> NAME .)
    NE              reduce using rule 29 (exp -> NAME .)
    DEC             reduce using rule 29 (exp -> NAME .)
    INC             reduce using rule 29 (exp -> NAME .)
    THEN            reduce using rule 29 (exp -> NAME .)
    RPAREN          reduce using rule 29 (exp -> NAME .)
    SEMICOL         reduce using rule 29 (exp -> NAME .)
    COMMA           reduce using rule 29 (exp -> NAME .)
    TO              reduce using rule 29 (exp -> NAME .)
    UNTIL           reduce using rule 29 (exp -> NAME .)
    LBRACE          reduce using rule 29 (exp -> NAME .)


state 45

    (35) exp -> INC exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 35 (exp -> INC exp .)
    INC             reduce using rule 35 (exp -> INC exp .)
    POWER           reduce using rule 35 (exp -> INC exp .)
    MODULUS         reduce using rule 35 (exp -> INC exp .)
    THEN            reduce using rule 35 (exp -> INC exp .)
    RPAREN          reduce using rule 35 (exp -> INC exp .)
    SEMICOL         reduce using rule 35 (exp -> INC exp .)
    COMMA           reduce using rule 35 (exp -> INC exp .)
    TO              reduce using rule 35 (exp -> INC exp .)
    UNTIL           reduce using rule 35 (exp -> INC exp .)
    LBRACE          reduce using rule 35 (exp -> INC exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    AND             shift and go to state 35
    OR              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42

  ! PLUS            [ reduce using rule 35 (exp -> INC exp .) ]
  ! MINUS           [ reduce using rule 35 (exp -> INC exp .) ]
  ! MULTIPLY        [ reduce using rule 35 (exp -> INC exp .) ]
  ! DIVIDE          [ reduce using rule 35 (exp -> INC exp .) ]
  ! AND             [ reduce using rule 35 (exp -> INC exp .) ]
  ! OR              [ reduce using rule 35 (exp -> INC exp .) ]
  ! GT              [ reduce using rule 35 (exp -> INC exp .) ]
  ! LT              [ reduce using rule 35 (exp -> INC exp .) ]
  ! GTE             [ reduce using rule 35 (exp -> INC exp .) ]
  ! LTE             [ reduce using rule 35 (exp -> INC exp .) ]
  ! EE              [ reduce using rule 35 (exp -> INC exp .) ]
  ! NE              [ reduce using rule 35 (exp -> INC exp .) ]
  ! POWER           [ shift and go to state 33 ]
  ! MODULUS         [ shift and go to state 34 ]


state 46

    (44) stmt -> MAKE NAME .
    (45) stmt -> MAKE NAME . EQUAL exp

    SEMICOL         reduce using rule 44 (stmt -> MAKE NAME .)
    EQUAL           shift and go to state 73


state 47

    (46) stmt -> NAME EQUAL . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 74

state 48

    (10) exp -> NAME LPAREN . optargs RPAREN
    (11) optargs -> . args
    (12) optargs -> .
    (13) args -> . exp COMMA args
    (14) args -> . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    RPAREN          reduce using rule 12 (optargs -> .)
    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    optargs                        shift and go to state 75
    args                           shift and go to state 76
    exp                            shift and go to state 77

state 49

    (47) stmt -> IF exp . THEN stmtblock
    (48) stmt -> IF exp . THEN stmtblock elsif ELSE THEN stmtblock
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    THEN            shift and go to state 78
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    MODULUS         shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42


state 50

    (51) stmt -> DO stmtblock . WHILE exp

    WHILE           shift and go to state 79


state 51

    (5) stmtblock -> LBRACE . stmtS RBRACE
    (6) stmtblock -> LBRACE . error RBRACE
    (7) stmtS -> . stmt SEMICOL stmtS
    (8) stmtS -> . error SEMICOL stmtS
    (9) stmtS -> .
    (36) stmt -> . exp DEC
    (37) stmt -> . exp INC
    (44) stmt -> . MAKE NAME
    (45) stmt -> . MAKE NAME EQUAL exp
    (46) stmt -> . NAME EQUAL exp
    (47) stmt -> . IF exp THEN stmtblock
    (48) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (51) stmt -> . DO stmtblock WHILE exp
    (52) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (55) stmt -> . PRINT LPAREN exp RPAREN
    (56) stmt -> . RETURN exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    error           shift and go to state 81
    RBRACE          reduce using rule 9 (stmtS -> .)
    MAKE            shift and go to state 8
    NAME            shift and go to state 9
    IF              shift and go to state 10
    DO              shift and go to state 11
    FOR             shift and go to state 12
    PRINT           shift and go to state 13
    RETURN          shift and go to state 15
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    stmtS                          shift and go to state 80
    stmt                           shift and go to state 82
    exp                            shift and go to state 5

state 52

    (52) stmt -> FOR NAME . EQUAL exp TO exp UNTIL step stmtblock

    EQUAL           shift and go to state 83


state 53

    (55) stmt -> PRINT LPAREN . exp RPAREN
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 84

state 54

    (43) exp -> LPAREN exp . RPAREN
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    RPAREN          shift and go to state 85
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    MODULUS         shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42


state 55

    (56) stmt -> RETURN exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    SEMICOL         reduce using rule 56 (stmt -> RETURN exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    MODULUS         shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42


state 56

    (30) exp -> MINUS INT .

    DEC             reduce using rule 30 (exp -> MINUS INT .)
    INC             reduce using rule 30 (exp -> MINUS INT .)
    PLUS            reduce using rule 30 (exp -> MINUS INT .)
    MINUS           reduce using rule 30 (exp -> MINUS INT .)
    MULTIPLY        reduce using rule 30 (exp -> MINUS INT .)
    DIVIDE          reduce using rule 30 (exp -> MINUS INT .)
    POWER           reduce using rule 30 (exp -> MINUS INT .)
    MODULUS         reduce using rule 30 (exp -> MINUS INT .)
    AND             reduce using rule 30 (exp -> MINUS INT .)
    OR              reduce using rule 30 (exp -> MINUS INT .)
    GT              reduce using rule 30 (exp -> MINUS INT .)
    LT              reduce using rule 30 (exp -> MINUS INT .)
    GTE             reduce using rule 30 (exp -> MINUS INT .)
    LTE             reduce using rule 30 (exp -> MINUS INT .)
    EE              reduce using rule 30 (exp -> MINUS INT .)
    NE              reduce using rule 30 (exp -> MINUS INT .)
    THEN            reduce using rule 30 (exp -> MINUS INT .)
    RPAREN          reduce using rule 30 (exp -> MINUS INT .)
    SEMICOL         reduce using rule 30 (exp -> MINUS INT .)
    COMMA           reduce using rule 30 (exp -> MINUS INT .)
    TO              reduce using rule 30 (exp -> MINUS INT .)
    UNTIL           reduce using rule 30 (exp -> MINUS INT .)
    LBRACE          reduce using rule 30 (exp -> MINUS INT .)


state 57

    (31) exp -> MINUS FLOAT .

    DEC             reduce using rule 31 (exp -> MINUS FLOAT .)
    INC             reduce using rule 31 (exp -> MINUS FLOAT .)
    PLUS            reduce using rule 31 (exp -> MINUS FLOAT .)
    MINUS           reduce using rule 31 (exp -> MINUS FLOAT .)
    MULTIPLY        reduce using rule 31 (exp -> MINUS FLOAT .)
    DIVIDE          reduce using rule 31 (exp -> MINUS FLOAT .)
    POWER           reduce using rule 31 (exp -> MINUS FLOAT .)
    MODULUS         reduce using rule 31 (exp -> MINUS FLOAT .)
    AND             reduce using rule 31 (exp -> MINUS FLOAT .)
    OR              reduce using rule 31 (exp -> MINUS FLOAT .)
    GT              reduce using rule 31 (exp -> MINUS FLOAT .)
    LT              reduce using rule 31 (exp -> MINUS FLOAT .)
    GTE             reduce using rule 31 (exp -> MINUS FLOAT .)
    LTE             reduce using rule 31 (exp -> MINUS FLOAT .)
    EE              reduce using rule 31 (exp -> MINUS FLOAT .)
    NE              reduce using rule 31 (exp -> MINUS FLOAT .)
    THEN            reduce using rule 31 (exp -> MINUS FLOAT .)
    RPAREN          reduce using rule 31 (exp -> MINUS FLOAT .)
    SEMICOL         reduce using rule 31 (exp -> MINUS FLOAT .)
    COMMA           reduce using rule 31 (exp -> MINUS FLOAT .)
    TO              reduce using rule 31 (exp -> MINUS FLOAT .)
    UNTIL           reduce using rule 31 (exp -> MINUS FLOAT .)
    LBRACE          reduce using rule 31 (exp -> MINUS FLOAT .)


state 58

    (38) exp -> NOT exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 38 (exp -> NOT exp .)
    INC             reduce using rule 38 (exp -> NOT exp .)
    PLUS            reduce using rule 38 (exp -> NOT exp .)
    MINUS           reduce using rule 38 (exp -> NOT exp .)
    MULTIPLY        reduce using rule 38 (exp -> NOT exp .)
    DIVIDE          reduce using rule 38 (exp -> NOT exp .)
    POWER           reduce using rule 38 (exp -> NOT exp .)
    MODULUS         reduce using rule 38 (exp -> NOT exp .)
    AND             reduce using rule 38 (exp -> NOT exp .)
    OR              reduce using rule 38 (exp -> NOT exp .)
    GT              reduce using rule 38 (exp -> NOT exp .)
    LT              reduce using rule 38 (exp -> NOT exp .)
    GTE             reduce using rule 38 (exp -> NOT exp .)
    LTE             reduce using rule 38 (exp -> NOT exp .)
    EE              reduce using rule 38 (exp -> NOT exp .)
    NE              reduce using rule 38 (exp -> NOT exp .)
    THEN            reduce using rule 38 (exp -> NOT exp .)
    RPAREN          reduce using rule 38 (exp -> NOT exp .)
    SEMICOL         reduce using rule 38 (exp -> NOT exp .)
    COMMA           reduce using rule 38 (exp -> NOT exp .)
    TO              reduce using rule 38 (exp -> NOT exp .)
    UNTIL           reduce using rule 38 (exp -> NOT exp .)
    LBRACE          reduce using rule 38 (exp -> NOT exp .)

  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]
  ! MULTIPLY        [ shift and go to state 31 ]
  ! DIVIDE          [ shift and go to state 32 ]
  ! POWER           [ shift and go to state 33 ]
  ! MODULUS         [ shift and go to state 34 ]
  ! AND             [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GTE             [ shift and go to state 39 ]
  ! LTE             [ shift and go to state 40 ]
  ! EE              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 42 ]


state 59

    (15) exp -> exp PLUS exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 15 (exp -> exp PLUS exp .)
    INC             reduce using rule 15 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 15 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 15 (exp -> exp PLUS exp .)
    POWER           reduce using rule 15 (exp -> exp PLUS exp .)
    MODULUS         reduce using rule 15 (exp -> exp PLUS exp .)
    AND             reduce using rule 15 (exp -> exp PLUS exp .)
    OR              reduce using rule 15 (exp -> exp PLUS exp .)
    GT              reduce using rule 15 (exp -> exp PLUS exp .)
    LT              reduce using rule 15 (exp -> exp PLUS exp .)
    GTE             reduce using rule 15 (exp -> exp PLUS exp .)
    LTE             reduce using rule 15 (exp -> exp PLUS exp .)
    EE              reduce using rule 15 (exp -> exp PLUS exp .)
    NE              reduce using rule 15 (exp -> exp PLUS exp .)
    THEN            reduce using rule 15 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 15 (exp -> exp PLUS exp .)
    SEMICOL         reduce using rule 15 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 15 (exp -> exp PLUS exp .)
    TO              reduce using rule 15 (exp -> exp PLUS exp .)
    UNTIL           reduce using rule 15 (exp -> exp PLUS exp .)
    LBRACE          reduce using rule 15 (exp -> exp PLUS exp .)
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32

  ! MULTIPLY        [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 15 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]
  ! POWER           [ shift and go to state 33 ]
  ! MODULUS         [ shift and go to state 34 ]
  ! AND             [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GTE             [ shift and go to state 39 ]
  ! LTE             [ shift and go to state 40 ]
  ! EE              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 42 ]


state 60

    (16) exp -> exp MINUS exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 16 (exp -> exp MINUS exp .)
    INC             reduce using rule 16 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 16 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 16 (exp -> exp MINUS exp .)
    POWER           reduce using rule 16 (exp -> exp MINUS exp .)
    MODULUS         reduce using rule 16 (exp -> exp MINUS exp .)
    AND             reduce using rule 16 (exp -> exp MINUS exp .)
    OR              reduce using rule 16 (exp -> exp MINUS exp .)
    GT              reduce using rule 16 (exp -> exp MINUS exp .)
    LT              reduce using rule 16 (exp -> exp MINUS exp .)
    GTE             reduce using rule 16 (exp -> exp MINUS exp .)
    LTE             reduce using rule 16 (exp -> exp MINUS exp .)
    EE              reduce using rule 16 (exp -> exp MINUS exp .)
    NE              reduce using rule 16 (exp -> exp MINUS exp .)
    THEN            reduce using rule 16 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 16 (exp -> exp MINUS exp .)
    SEMICOL         reduce using rule 16 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 16 (exp -> exp MINUS exp .)
    TO              reduce using rule 16 (exp -> exp MINUS exp .)
    UNTIL           reduce using rule 16 (exp -> exp MINUS exp .)
    LBRACE          reduce using rule 16 (exp -> exp MINUS exp .)
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32

  ! MULTIPLY        [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 16 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]
  ! POWER           [ shift and go to state 33 ]
  ! MODULUS         [ shift and go to state 34 ]
  ! AND             [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GTE             [ shift and go to state 39 ]
  ! LTE             [ shift and go to state 40 ]
  ! EE              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 42 ]


state 61

    (17) exp -> exp MULTIPLY exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 17 (exp -> exp MULTIPLY exp .)
    INC             reduce using rule 17 (exp -> exp MULTIPLY exp .)
    PLUS            reduce using rule 17 (exp -> exp MULTIPLY exp .)
    MINUS           reduce using rule 17 (exp -> exp MULTIPLY exp .)
    MULTIPLY        reduce using rule 17 (exp -> exp MULTIPLY exp .)
    DIVIDE          reduce using rule 17 (exp -> exp MULTIPLY exp .)
    POWER           reduce using rule 17 (exp -> exp MULTIPLY exp .)
    MODULUS         reduce using rule 17 (exp -> exp MULTIPLY exp .)
    AND             reduce using rule 17 (exp -> exp MULTIPLY exp .)
    OR              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    GT              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    LT              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    GTE             reduce using rule 17 (exp -> exp MULTIPLY exp .)
    LTE             reduce using rule 17 (exp -> exp MULTIPLY exp .)
    EE              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    NE              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    THEN            reduce using rule 17 (exp -> exp MULTIPLY exp .)
    RPAREN          reduce using rule 17 (exp -> exp MULTIPLY exp .)
    SEMICOL         reduce using rule 17 (exp -> exp MULTIPLY exp .)
    COMMA           reduce using rule 17 (exp -> exp MULTIPLY exp .)
    TO              reduce using rule 17 (exp -> exp MULTIPLY exp .)
    UNTIL           reduce using rule 17 (exp -> exp MULTIPLY exp .)
    LBRACE          reduce using rule 17 (exp -> exp MULTIPLY exp .)

  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]
  ! MULTIPLY        [ shift and go to state 31 ]
  ! DIVIDE          [ shift and go to state 32 ]
  ! POWER           [ shift and go to state 33 ]
  ! MODULUS         [ shift and go to state 34 ]
  ! AND             [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GTE             [ shift and go to state 39 ]
  ! LTE             [ shift and go to state 40 ]
  ! EE              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 42 ]


state 62

    (18) exp -> exp DIVIDE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 18 (exp -> exp DIVIDE exp .)
    INC             reduce using rule 18 (exp -> exp DIVIDE exp .)
    PLUS            reduce using rule 18 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 18 (exp -> exp DIVIDE exp .)
    MULTIPLY        reduce using rule 18 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 18 (exp -> exp DIVIDE exp .)
    POWER           reduce using rule 18 (exp -> exp DIVIDE exp .)
    MODULUS         reduce using rule 18 (exp -> exp DIVIDE exp .)
    AND             reduce using rule 18 (exp -> exp DIVIDE exp .)
    OR              reduce using rule 18 (exp -> exp DIVIDE exp .)
    GT              reduce using rule 18 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 18 (exp -> exp DIVIDE exp .)
    GTE             reduce using rule 18 (exp -> exp DIVIDE exp .)
    LTE             reduce using rule 18 (exp -> exp DIVIDE exp .)
    EE              reduce using rule 18 (exp -> exp DIVIDE exp .)
    NE              reduce using rule 18 (exp -> exp DIVIDE exp .)
    THEN            reduce using rule 18 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 18 (exp -> exp DIVIDE exp .)
    SEMICOL         reduce using rule 18 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 18 (exp -> exp DIVIDE exp .)
    TO              reduce using rule 18 (exp -> exp DIVIDE exp .)
    UNTIL           reduce using rule 18 (exp -> exp DIVIDE exp .)
    LBRACE          reduce using rule 18 (exp -> exp DIVIDE exp .)

  ! PLUS            [ shift and go to state 29 ]
  ! MINUS           [ shift and go to state 30 ]
  ! MULTIPLY        [ shift and go to state 31 ]
  ! DIVIDE          [ shift and go to state 32 ]
  ! POWER           [ shift and go to state 33 ]
  ! MODULUS         [ shift and go to state 34 ]
  ! AND             [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GTE             [ shift and go to state 39 ]
  ! LTE             [ shift and go to state 40 ]
  ! EE              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 42 ]


state 63

    (19) exp -> exp POWER exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    DEC             reduce using rule 19 (exp -> exp POWER exp .)
    INC             reduce using rule 19 (exp -> exp POWER exp .)
    THEN            reduce using rule 19 (exp -> exp POWER exp .)
    RPAREN          reduce using rule 19 (exp -> exp POWER exp .)
    SEMICOL         reduce using rule 19 (exp -> exp POWER exp .)
    COMMA           reduce using rule 19 (exp -> exp POWER exp .)
    TO              reduce using rule 19 (exp -> exp POWER exp .)
    UNTIL           reduce using rule 19 (exp -> exp POWER exp .)
    LBRACE          reduce using rule 19 (exp -> exp POWER exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    MODULUS         shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42

  ! PLUS            [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! MINUS           [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! MULTIPLY        [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! DIVIDE          [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! POWER           [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! MODULUS         [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! AND             [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! OR              [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! GT              [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! LT              [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! GTE             [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! LTE             [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! EE              [ reduce using rule 19 (exp -> exp POWER exp .) ]
  ! NE              [ reduce using rule 19 (exp -> exp POWER exp .) ]


state 64

    (20) exp -> exp MODULUS exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    DEC             reduce using rule 20 (exp -> exp MODULUS exp .)
    INC             reduce using rule 20 (exp -> exp MODULUS exp .)
    THEN            reduce using rule 20 (exp -> exp MODULUS exp .)
    RPAREN          reduce using rule 20 (exp -> exp MODULUS exp .)
    SEMICOL         reduce using rule 20 (exp -> exp MODULUS exp .)
    COMMA           reduce using rule 20 (exp -> exp MODULUS exp .)
    TO              reduce using rule 20 (exp -> exp MODULUS exp .)
    UNTIL           reduce using rule 20 (exp -> exp MODULUS exp .)
    LBRACE          reduce using rule 20 (exp -> exp MODULUS exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    MODULUS         shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42

  ! PLUS            [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! MINUS           [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! MULTIPLY        [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! DIVIDE          [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! POWER           [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! MODULUS         [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! AND             [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! OR              [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! GT              [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! LT              [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! GTE             [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! LTE             [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! EE              [ reduce using rule 20 (exp -> exp MODULUS exp .) ]
  ! NE              [ reduce using rule 20 (exp -> exp MODULUS exp .) ]


state 65

    (21) exp -> exp AND exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 21 (exp -> exp AND exp .)
    INC             reduce using rule 21 (exp -> exp AND exp .)
    POWER           reduce using rule 21 (exp -> exp AND exp .)
    MODULUS         reduce using rule 21 (exp -> exp AND exp .)
    AND             reduce using rule 21 (exp -> exp AND exp .)
    OR              reduce using rule 21 (exp -> exp AND exp .)
    THEN            reduce using rule 21 (exp -> exp AND exp .)
    RPAREN          reduce using rule 21 (exp -> exp AND exp .)
    SEMICOL         reduce using rule 21 (exp -> exp AND exp .)
    COMMA           reduce using rule 21 (exp -> exp AND exp .)
    TO              reduce using rule 21 (exp -> exp AND exp .)
    UNTIL           reduce using rule 21 (exp -> exp AND exp .)
    LBRACE          reduce using rule 21 (exp -> exp AND exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42

  ! PLUS            [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! MULTIPLY        [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! GTE             [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! LTE             [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! EE              [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! NE              [ reduce using rule 21 (exp -> exp AND exp .) ]
  ! POWER           [ shift and go to state 33 ]
  ! MODULUS         [ shift and go to state 34 ]
  ! AND             [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]


state 66

    (22) exp -> exp OR exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 22 (exp -> exp OR exp .)
    INC             reduce using rule 22 (exp -> exp OR exp .)
    POWER           reduce using rule 22 (exp -> exp OR exp .)
    MODULUS         reduce using rule 22 (exp -> exp OR exp .)
    OR              reduce using rule 22 (exp -> exp OR exp .)
    THEN            reduce using rule 22 (exp -> exp OR exp .)
    RPAREN          reduce using rule 22 (exp -> exp OR exp .)
    SEMICOL         reduce using rule 22 (exp -> exp OR exp .)
    COMMA           reduce using rule 22 (exp -> exp OR exp .)
    TO              reduce using rule 22 (exp -> exp OR exp .)
    UNTIL           reduce using rule 22 (exp -> exp OR exp .)
    LBRACE          reduce using rule 22 (exp -> exp OR exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    AND             shift and go to state 35
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42

  ! PLUS            [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! MULTIPLY        [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! GTE             [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! LTE             [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! EE              [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! NE              [ reduce using rule 22 (exp -> exp OR exp .) ]
  ! POWER           [ shift and go to state 33 ]
  ! MODULUS         [ shift and go to state 34 ]
  ! OR              [ shift and go to state 36 ]


state 67

    (23) exp -> exp GT exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 23 (exp -> exp GT exp .)
    INC             reduce using rule 23 (exp -> exp GT exp .)
    POWER           reduce using rule 23 (exp -> exp GT exp .)
    MODULUS         reduce using rule 23 (exp -> exp GT exp .)
    AND             reduce using rule 23 (exp -> exp GT exp .)
    OR              reduce using rule 23 (exp -> exp GT exp .)
    GT              reduce using rule 23 (exp -> exp GT exp .)
    LT              reduce using rule 23 (exp -> exp GT exp .)
    GTE             reduce using rule 23 (exp -> exp GT exp .)
    LTE             reduce using rule 23 (exp -> exp GT exp .)
    EE              reduce using rule 23 (exp -> exp GT exp .)
    NE              reduce using rule 23 (exp -> exp GT exp .)
    THEN            reduce using rule 23 (exp -> exp GT exp .)
    RPAREN          reduce using rule 23 (exp -> exp GT exp .)
    SEMICOL         reduce using rule 23 (exp -> exp GT exp .)
    COMMA           reduce using rule 23 (exp -> exp GT exp .)
    TO              reduce using rule 23 (exp -> exp GT exp .)
    UNTIL           reduce using rule 23 (exp -> exp GT exp .)
    LBRACE          reduce using rule 23 (exp -> exp GT exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32

  ! PLUS            [ reduce using rule 23 (exp -> exp GT exp .) ]
  ! MINUS           [ reduce using rule 23 (exp -> exp GT exp .) ]
  ! MULTIPLY        [ reduce using rule 23 (exp -> exp GT exp .) ]
  ! DIVIDE          [ reduce using rule 23 (exp -> exp GT exp .) ]
  ! POWER           [ shift and go to state 33 ]
  ! MODULUS         [ shift and go to state 34 ]
  ! AND             [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GTE             [ shift and go to state 39 ]
  ! LTE             [ shift and go to state 40 ]
  ! EE              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 42 ]


state 68

    (24) exp -> exp LT exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 24 (exp -> exp LT exp .)
    INC             reduce using rule 24 (exp -> exp LT exp .)
    POWER           reduce using rule 24 (exp -> exp LT exp .)
    MODULUS         reduce using rule 24 (exp -> exp LT exp .)
    AND             reduce using rule 24 (exp -> exp LT exp .)
    OR              reduce using rule 24 (exp -> exp LT exp .)
    GT              reduce using rule 24 (exp -> exp LT exp .)
    LT              reduce using rule 24 (exp -> exp LT exp .)
    GTE             reduce using rule 24 (exp -> exp LT exp .)
    LTE             reduce using rule 24 (exp -> exp LT exp .)
    EE              reduce using rule 24 (exp -> exp LT exp .)
    NE              reduce using rule 24 (exp -> exp LT exp .)
    THEN            reduce using rule 24 (exp -> exp LT exp .)
    RPAREN          reduce using rule 24 (exp -> exp LT exp .)
    SEMICOL         reduce using rule 24 (exp -> exp LT exp .)
    COMMA           reduce using rule 24 (exp -> exp LT exp .)
    TO              reduce using rule 24 (exp -> exp LT exp .)
    UNTIL           reduce using rule 24 (exp -> exp LT exp .)
    LBRACE          reduce using rule 24 (exp -> exp LT exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32

  ! PLUS            [ reduce using rule 24 (exp -> exp LT exp .) ]
  ! MINUS           [ reduce using rule 24 (exp -> exp LT exp .) ]
  ! MULTIPLY        [ reduce using rule 24 (exp -> exp LT exp .) ]
  ! DIVIDE          [ reduce using rule 24 (exp -> exp LT exp .) ]
  ! POWER           [ shift and go to state 33 ]
  ! MODULUS         [ shift and go to state 34 ]
  ! AND             [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GTE             [ shift and go to state 39 ]
  ! LTE             [ shift and go to state 40 ]
  ! EE              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 42 ]


state 69

    (25) exp -> exp GTE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 25 (exp -> exp GTE exp .)
    INC             reduce using rule 25 (exp -> exp GTE exp .)
    POWER           reduce using rule 25 (exp -> exp GTE exp .)
    MODULUS         reduce using rule 25 (exp -> exp GTE exp .)
    AND             reduce using rule 25 (exp -> exp GTE exp .)
    OR              reduce using rule 25 (exp -> exp GTE exp .)
    GT              reduce using rule 25 (exp -> exp GTE exp .)
    LT              reduce using rule 25 (exp -> exp GTE exp .)
    GTE             reduce using rule 25 (exp -> exp GTE exp .)
    LTE             reduce using rule 25 (exp -> exp GTE exp .)
    EE              reduce using rule 25 (exp -> exp GTE exp .)
    NE              reduce using rule 25 (exp -> exp GTE exp .)
    THEN            reduce using rule 25 (exp -> exp GTE exp .)
    RPAREN          reduce using rule 25 (exp -> exp GTE exp .)
    SEMICOL         reduce using rule 25 (exp -> exp GTE exp .)
    COMMA           reduce using rule 25 (exp -> exp GTE exp .)
    TO              reduce using rule 25 (exp -> exp GTE exp .)
    UNTIL           reduce using rule 25 (exp -> exp GTE exp .)
    LBRACE          reduce using rule 25 (exp -> exp GTE exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32

  ! PLUS            [ reduce using rule 25 (exp -> exp GTE exp .) ]
  ! MINUS           [ reduce using rule 25 (exp -> exp GTE exp .) ]
  ! MULTIPLY        [ reduce using rule 25 (exp -> exp GTE exp .) ]
  ! DIVIDE          [ reduce using rule 25 (exp -> exp GTE exp .) ]
  ! POWER           [ shift and go to state 33 ]
  ! MODULUS         [ shift and go to state 34 ]
  ! AND             [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GTE             [ shift and go to state 39 ]
  ! LTE             [ shift and go to state 40 ]
  ! EE              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 42 ]


state 70

    (26) exp -> exp LTE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 26 (exp -> exp LTE exp .)
    INC             reduce using rule 26 (exp -> exp LTE exp .)
    POWER           reduce using rule 26 (exp -> exp LTE exp .)
    MODULUS         reduce using rule 26 (exp -> exp LTE exp .)
    AND             reduce using rule 26 (exp -> exp LTE exp .)
    OR              reduce using rule 26 (exp -> exp LTE exp .)
    GT              reduce using rule 26 (exp -> exp LTE exp .)
    LT              reduce using rule 26 (exp -> exp LTE exp .)
    GTE             reduce using rule 26 (exp -> exp LTE exp .)
    LTE             reduce using rule 26 (exp -> exp LTE exp .)
    EE              reduce using rule 26 (exp -> exp LTE exp .)
    NE              reduce using rule 26 (exp -> exp LTE exp .)
    THEN            reduce using rule 26 (exp -> exp LTE exp .)
    RPAREN          reduce using rule 26 (exp -> exp LTE exp .)
    SEMICOL         reduce using rule 26 (exp -> exp LTE exp .)
    COMMA           reduce using rule 26 (exp -> exp LTE exp .)
    TO              reduce using rule 26 (exp -> exp LTE exp .)
    UNTIL           reduce using rule 26 (exp -> exp LTE exp .)
    LBRACE          reduce using rule 26 (exp -> exp LTE exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32

  ! PLUS            [ reduce using rule 26 (exp -> exp LTE exp .) ]
  ! MINUS           [ reduce using rule 26 (exp -> exp LTE exp .) ]
  ! MULTIPLY        [ reduce using rule 26 (exp -> exp LTE exp .) ]
  ! DIVIDE          [ reduce using rule 26 (exp -> exp LTE exp .) ]
  ! POWER           [ shift and go to state 33 ]
  ! MODULUS         [ shift and go to state 34 ]
  ! AND             [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! GT              [ shift and go to state 37 ]
  ! LT              [ shift and go to state 38 ]
  ! GTE             [ shift and go to state 39 ]
  ! LTE             [ shift and go to state 40 ]
  ! EE              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 42 ]


state 71

    (27) exp -> exp EE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 27 (exp -> exp EE exp .)
    INC             reduce using rule 27 (exp -> exp EE exp .)
    POWER           reduce using rule 27 (exp -> exp EE exp .)
    MODULUS         reduce using rule 27 (exp -> exp EE exp .)
    AND             reduce using rule 27 (exp -> exp EE exp .)
    OR              reduce using rule 27 (exp -> exp EE exp .)
    EE              reduce using rule 27 (exp -> exp EE exp .)
    NE              reduce using rule 27 (exp -> exp EE exp .)
    THEN            reduce using rule 27 (exp -> exp EE exp .)
    RPAREN          reduce using rule 27 (exp -> exp EE exp .)
    SEMICOL         reduce using rule 27 (exp -> exp EE exp .)
    COMMA           reduce using rule 27 (exp -> exp EE exp .)
    TO              reduce using rule 27 (exp -> exp EE exp .)
    UNTIL           reduce using rule 27 (exp -> exp EE exp .)
    LBRACE          reduce using rule 27 (exp -> exp EE exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40

  ! PLUS            [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! MINUS           [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! MULTIPLY        [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! DIVIDE          [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! GT              [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! LT              [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! GTE             [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! LTE             [ reduce using rule 27 (exp -> exp EE exp .) ]
  ! POWER           [ shift and go to state 33 ]
  ! MODULUS         [ shift and go to state 34 ]
  ! AND             [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! EE              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 42 ]


state 72

    (28) exp -> exp NE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    DEC             reduce using rule 28 (exp -> exp NE exp .)
    INC             reduce using rule 28 (exp -> exp NE exp .)
    POWER           reduce using rule 28 (exp -> exp NE exp .)
    MODULUS         reduce using rule 28 (exp -> exp NE exp .)
    AND             reduce using rule 28 (exp -> exp NE exp .)
    OR              reduce using rule 28 (exp -> exp NE exp .)
    EE              reduce using rule 28 (exp -> exp NE exp .)
    NE              reduce using rule 28 (exp -> exp NE exp .)
    THEN            reduce using rule 28 (exp -> exp NE exp .)
    RPAREN          reduce using rule 28 (exp -> exp NE exp .)
    SEMICOL         reduce using rule 28 (exp -> exp NE exp .)
    COMMA           reduce using rule 28 (exp -> exp NE exp .)
    TO              reduce using rule 28 (exp -> exp NE exp .)
    UNTIL           reduce using rule 28 (exp -> exp NE exp .)
    LBRACE          reduce using rule 28 (exp -> exp NE exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40

  ! PLUS            [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! MINUS           [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! MULTIPLY        [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! DIVIDE          [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! GT              [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! LT              [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! GTE             [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! LTE             [ reduce using rule 28 (exp -> exp NE exp .) ]
  ! POWER           [ shift and go to state 33 ]
  ! MODULUS         [ shift and go to state 34 ]
  ! AND             [ shift and go to state 35 ]
  ! OR              [ shift and go to state 36 ]
  ! EE              [ shift and go to state 41 ]
  ! NE              [ shift and go to state 42 ]


state 73

    (45) stmt -> MAKE NAME EQUAL . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 86

state 74

    (46) stmt -> NAME EQUAL exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    SEMICOL         reduce using rule 46 (stmt -> NAME EQUAL exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    MODULUS         shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42


state 75

    (10) exp -> NAME LPAREN optargs . RPAREN

    RPAREN          shift and go to state 87


state 76

    (11) optargs -> args .

    RPAREN          reduce using rule 11 (optargs -> args .)


state 77

    (13) args -> exp . COMMA args
    (14) args -> exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    COMMA           shift and go to state 88
    RPAREN          reduce using rule 14 (args -> exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    MODULUS         shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42


state 78

    (47) stmt -> IF exp THEN . stmtblock
    (48) stmt -> IF exp THEN . stmtblock elsif ELSE THEN stmtblock
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 51

    stmtblock                      shift and go to state 89

state 79

    (51) stmt -> DO stmtblock WHILE . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 90

state 80

    (5) stmtblock -> LBRACE stmtS . RBRACE

    RBRACE          shift and go to state 91


state 81

    (6) stmtblock -> LBRACE error . RBRACE
    (8) stmtS -> error . SEMICOL stmtS

    RBRACE          shift and go to state 92
    SEMICOL         shift and go to state 93


state 82

    (7) stmtS -> stmt . SEMICOL stmtS

    SEMICOL         shift and go to state 94


state 83

    (52) stmt -> FOR NAME EQUAL . exp TO exp UNTIL step stmtblock
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 95

state 84

    (55) stmt -> PRINT LPAREN exp . RPAREN
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    RPAREN          shift and go to state 96
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    MODULUS         shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42


state 85

    (43) exp -> LPAREN exp RPAREN .

    DEC             reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    INC             reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    MULTIPLY        reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    POWER           reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    MODULUS         reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    GT              reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    LT              reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    EE              reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    NE              reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    THEN            reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    SEMICOL         reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    TO              reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    UNTIL           reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 43 (exp -> LPAREN exp RPAREN .)


state 86

    (45) stmt -> MAKE NAME EQUAL exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    SEMICOL         reduce using rule 45 (stmt -> MAKE NAME EQUAL exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    MODULUS         shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42


state 87

    (10) exp -> NAME LPAREN optargs RPAREN .

    DEC             reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    INC             reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    PLUS            reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    MINUS           reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    MULTIPLY        reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    DIVIDE          reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    POWER           reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    MODULUS         reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    AND             reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    OR              reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    GT              reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    LT              reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    GTE             reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    LTE             reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    EE              reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    NE              reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    THEN            reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    RPAREN          reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    SEMICOL         reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    COMMA           reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    TO              reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    UNTIL           reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)
    LBRACE          reduce using rule 10 (exp -> NAME LPAREN optargs RPAREN .)


state 88

    (13) args -> exp COMMA . args
    (13) args -> . exp COMMA args
    (14) args -> . exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 77
    args                           shift and go to state 97

state 89

    (47) stmt -> IF exp THEN stmtblock .
    (48) stmt -> IF exp THEN stmtblock . elsif ELSE THEN stmtblock
    (49) elsif -> . ELIF exp THEN stmtblock elsif
    (50) elsif -> .

    SEMICOL         reduce using rule 47 (stmt -> IF exp THEN stmtblock .)
    ELIF            shift and go to state 99
    ELSE            reduce using rule 50 (elsif -> .)

    elsif                          shift and go to state 98

state 90

    (51) stmt -> DO stmtblock WHILE exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    SEMICOL         reduce using rule 51 (stmt -> DO stmtblock WHILE exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    MODULUS         shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42


state 91

    (5) stmtblock -> LBRACE stmtS RBRACE .

    WHILE           reduce using rule 5 (stmtblock -> LBRACE stmtS RBRACE .)
    ELIF            reduce using rule 5 (stmtblock -> LBRACE stmtS RBRACE .)
    ELSE            reduce using rule 5 (stmtblock -> LBRACE stmtS RBRACE .)
    SEMICOL         reduce using rule 5 (stmtblock -> LBRACE stmtS RBRACE .)


state 92

    (6) stmtblock -> LBRACE error RBRACE .

    WHILE           reduce using rule 6 (stmtblock -> LBRACE error RBRACE .)
    ELIF            reduce using rule 6 (stmtblock -> LBRACE error RBRACE .)
    ELSE            reduce using rule 6 (stmtblock -> LBRACE error RBRACE .)
    SEMICOL         reduce using rule 6 (stmtblock -> LBRACE error RBRACE .)


state 93

    (8) stmtS -> error SEMICOL . stmtS
    (7) stmtS -> . stmt SEMICOL stmtS
    (8) stmtS -> . error SEMICOL stmtS
    (9) stmtS -> .
    (36) stmt -> . exp DEC
    (37) stmt -> . exp INC
    (44) stmt -> . MAKE NAME
    (45) stmt -> . MAKE NAME EQUAL exp
    (46) stmt -> . NAME EQUAL exp
    (47) stmt -> . IF exp THEN stmtblock
    (48) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (51) stmt -> . DO stmtblock WHILE exp
    (52) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (55) stmt -> . PRINT LPAREN exp RPAREN
    (56) stmt -> . RETURN exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    error           shift and go to state 100
    RBRACE          reduce using rule 9 (stmtS -> .)
    MAKE            shift and go to state 8
    NAME            shift and go to state 9
    IF              shift and go to state 10
    DO              shift and go to state 11
    FOR             shift and go to state 12
    PRINT           shift and go to state 13
    RETURN          shift and go to state 15
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    stmtS                          shift and go to state 101
    stmt                           shift and go to state 82
    exp                            shift and go to state 5

state 94

    (7) stmtS -> stmt SEMICOL . stmtS
    (7) stmtS -> . stmt SEMICOL stmtS
    (8) stmtS -> . error SEMICOL stmtS
    (9) stmtS -> .
    (36) stmt -> . exp DEC
    (37) stmt -> . exp INC
    (44) stmt -> . MAKE NAME
    (45) stmt -> . MAKE NAME EQUAL exp
    (46) stmt -> . NAME EQUAL exp
    (47) stmt -> . IF exp THEN stmtblock
    (48) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (51) stmt -> . DO stmtblock WHILE exp
    (52) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (55) stmt -> . PRINT LPAREN exp RPAREN
    (56) stmt -> . RETURN exp
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    error           shift and go to state 100
    RBRACE          reduce using rule 9 (stmtS -> .)
    MAKE            shift and go to state 8
    NAME            shift and go to state 9
    IF              shift and go to state 10
    DO              shift and go to state 11
    FOR             shift and go to state 12
    PRINT           shift and go to state 13
    RETURN          shift and go to state 15
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    stmt                           shift and go to state 82
    stmtS                          shift and go to state 102
    exp                            shift and go to state 5

state 95

    (52) stmt -> FOR NAME EQUAL exp . TO exp UNTIL step stmtblock
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    TO              shift and go to state 103
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    MODULUS         shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42


state 96

    (55) stmt -> PRINT LPAREN exp RPAREN .

    SEMICOL         reduce using rule 55 (stmt -> PRINT LPAREN exp RPAREN .)


state 97

    (13) args -> exp COMMA args .

    RPAREN          reduce using rule 13 (args -> exp COMMA args .)


state 98

    (48) stmt -> IF exp THEN stmtblock elsif . ELSE THEN stmtblock

    ELSE            shift and go to state 104


state 99

    (49) elsif -> ELIF . exp THEN stmtblock elsif
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 105

state 100

    (8) stmtS -> error . SEMICOL stmtS

    SEMICOL         shift and go to state 93


state 101

    (8) stmtS -> error SEMICOL stmtS .

    RBRACE          reduce using rule 8 (stmtS -> error SEMICOL stmtS .)


state 102

    (7) stmtS -> stmt SEMICOL stmtS .

    RBRACE          reduce using rule 7 (stmtS -> stmt SEMICOL stmtS .)


state 103

    (52) stmt -> FOR NAME EQUAL exp TO . exp UNTIL step stmtblock
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 106

state 104

    (48) stmt -> IF exp THEN stmtblock elsif ELSE . THEN stmtblock

    THEN            shift and go to state 107


state 105

    (49) elsif -> ELIF exp . THEN stmtblock elsif
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    THEN            shift and go to state 108
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    MODULUS         shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42


state 106

    (52) stmt -> FOR NAME EQUAL exp TO exp . UNTIL step stmtblock
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    UNTIL           shift and go to state 109
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    MODULUS         shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42


state 107

    (48) stmt -> IF exp THEN stmtblock elsif ELSE THEN . stmtblock
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 51

    stmtblock                      shift and go to state 110

state 108

    (49) elsif -> ELIF exp THEN . stmtblock elsif
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 51

    stmtblock                      shift and go to state 111

state 109

    (52) stmt -> FOR NAME EQUAL exp TO exp UNTIL . step stmtblock
    (53) step -> . exp
    (54) step -> .
    (10) exp -> . NAME LPAREN optargs RPAREN
    (15) exp -> . exp PLUS exp
    (16) exp -> . exp MINUS exp
    (17) exp -> . exp MULTIPLY exp
    (18) exp -> . exp DIVIDE exp
    (19) exp -> . exp POWER exp
    (20) exp -> . exp MODULUS exp
    (21) exp -> . exp AND exp
    (22) exp -> . exp OR exp
    (23) exp -> . exp GT exp
    (24) exp -> . exp LT exp
    (25) exp -> . exp GTE exp
    (26) exp -> . exp LTE exp
    (27) exp -> . exp EE exp
    (28) exp -> . exp NE exp
    (29) exp -> . NAME
    (30) exp -> . MINUS INT
    (31) exp -> . MINUS FLOAT
    (32) exp -> . INT
    (33) exp -> . FLOAT
    (34) exp -> . DEC exp
    (35) exp -> . INC exp
    (38) exp -> . NOT exp
    (39) exp -> . TRUE
    (40) exp -> . FALSE
    (41) exp -> . STRING
    (42) exp -> . CHAR
    (43) exp -> . LPAREN exp RPAREN

    LBRACE          reduce using rule 54 (step -> .)
    NAME            shift and go to state 44
    MINUS           shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    DEC             shift and go to state 6
    INC             shift and go to state 7
    NOT             shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    STRING          shift and go to state 22
    CHAR            shift and go to state 23
    LPAREN          shift and go to state 14

    exp                            shift and go to state 112
    step                           shift and go to state 113

state 110

    (48) stmt -> IF exp THEN stmtblock elsif ELSE THEN stmtblock .

    SEMICOL         reduce using rule 48 (stmt -> IF exp THEN stmtblock elsif ELSE THEN stmtblock .)


state 111

    (49) elsif -> ELIF exp THEN stmtblock . elsif
    (49) elsif -> . ELIF exp THEN stmtblock elsif
    (50) elsif -> .

    ELIF            shift and go to state 99
    ELSE            reduce using rule 50 (elsif -> .)

    elsif                          shift and go to state 114

state 112

    (53) step -> exp .
    (15) exp -> exp . PLUS exp
    (16) exp -> exp . MINUS exp
    (17) exp -> exp . MULTIPLY exp
    (18) exp -> exp . DIVIDE exp
    (19) exp -> exp . POWER exp
    (20) exp -> exp . MODULUS exp
    (21) exp -> exp . AND exp
    (22) exp -> exp . OR exp
    (23) exp -> exp . GT exp
    (24) exp -> exp . LT exp
    (25) exp -> exp . GTE exp
    (26) exp -> exp . LTE exp
    (27) exp -> exp . EE exp
    (28) exp -> exp . NE exp

    LBRACE          reduce using rule 53 (step -> exp .)
    PLUS            shift and go to state 29
    MINUS           shift and go to state 30
    MULTIPLY        shift and go to state 31
    DIVIDE          shift and go to state 32
    POWER           shift and go to state 33
    MODULUS         shift and go to state 34
    AND             shift and go to state 35
    OR              shift and go to state 36
    GT              shift and go to state 37
    LT              shift and go to state 38
    GTE             shift and go to state 39
    LTE             shift and go to state 40
    EE              shift and go to state 41
    NE              shift and go to state 42


state 113

    (52) stmt -> FOR NAME EQUAL exp TO exp UNTIL step . stmtblock
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 51

    stmtblock                      shift and go to state 115

state 114

    (49) elsif -> ELIF exp THEN stmtblock elsif .

    ELSE            reduce using rule 49 (elsif -> ELIF exp THEN stmtblock elsif .)


state 115

    (52) stmt -> FOR NAME EQUAL exp TO exp UNTIL step stmtblock .

    SEMICOL         reduce using rule 52 (stmt -> FOR NAME EQUAL exp TO exp UNTIL step stmtblock .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 63 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 63 resolved as shift
WARNING: shift/reduce conflict for POWER in state 63 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 63 resolved as shift
WARNING: shift/reduce conflict for AND in state 63 resolved as shift
WARNING: shift/reduce conflict for OR in state 63 resolved as shift
WARNING: shift/reduce conflict for GT in state 63 resolved as shift
WARNING: shift/reduce conflict for LT in state 63 resolved as shift
WARNING: shift/reduce conflict for GTE in state 63 resolved as shift
WARNING: shift/reduce conflict for LTE in state 63 resolved as shift
WARNING: shift/reduce conflict for EE in state 63 resolved as shift
WARNING: shift/reduce conflict for NE in state 63 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 64 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 64 resolved as shift
WARNING: shift/reduce conflict for POWER in state 64 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 64 resolved as shift
WARNING: shift/reduce conflict for AND in state 64 resolved as shift
WARNING: shift/reduce conflict for OR in state 64 resolved as shift
WARNING: shift/reduce conflict for GT in state 64 resolved as shift
WARNING: shift/reduce conflict for LT in state 64 resolved as shift
WARNING: shift/reduce conflict for GTE in state 64 resolved as shift
WARNING: shift/reduce conflict for LTE in state 64 resolved as shift
WARNING: shift/reduce conflict for EE in state 64 resolved as shift
WARNING: shift/reduce conflict for NE in state 64 resolved as shift
