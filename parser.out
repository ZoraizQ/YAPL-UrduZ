Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    MULTICOMMENT
    NEWL

Grammar

Rule 0     S' -> uz
Rule 1     uz -> line uz
Rule 2     line -> stmt SEMICOL
Rule 3     uz -> error SEMICOL
Rule 4     uz -> <empty>
Rule 5     stmtblock -> LBRACE stmtS RBRACE
Rule 6     stmtblock -> LBRACE error RBRACE
Rule 7     stmtS -> stmt SEMICOL stmtS
Rule 8     stmtS -> error SEMICOL stmtS
Rule 9     stmtS -> <empty>
Rule 10    optargs -> args
Rule 11    optargs -> <empty>
Rule 12    args -> exp COMMA args
Rule 13    args -> exp
Rule 14    exp -> exp PLUS exp
Rule 15    exp -> exp MINUS exp
Rule 16    exp -> exp MULTIPLY exp
Rule 17    exp -> exp DIVIDE exp
Rule 18    exp -> exp POWER exp
Rule 19    exp -> exp MODULUS exp
Rule 20    exp -> exp AND exp
Rule 21    exp -> exp OR exp
Rule 22    exp -> exp GT exp
Rule 23    exp -> exp LT exp
Rule 24    exp -> exp GTE exp
Rule 25    exp -> exp LTE exp
Rule 26    exp -> exp EE exp
Rule 27    exp -> exp NE exp
Rule 28    exp -> NAME
Rule 29    exp -> NAME LPAREN optargs RPAREN
Rule 30    stmt -> CALL NAME LPAREN optargs RPAREN
Rule 31    stmt -> RETURN exp
Rule 32    stmt -> FUNCTION NAME LPAREN optargs RPAREN stmtblock
Rule 33    list -> LBRACK optargs RBRACK
Rule 34    stmt -> NAME DOT POP LPAREN exp RPAREN
Rule 35    stmt -> NAME DOT PUSH LPAREN exp RPAREN
Rule 36    exp -> NAME DOT INDEX LPAREN exp RPAREN
Rule 37    stmt -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN
Rule 38    stmt -> STRUCT NAME SEP structargs SEP
Rule 39    structargs -> structexp COMMA structargs
Rule 40    structargs -> structexp
Rule 41    structexp -> NAME
Rule 42    structexp -> NAME EQUAL exp
Rule 43    stmt -> MAKE NAME NAME
Rule 44    stmt -> NAME DOT NAME EQUAL exp
Rule 45    exp -> NAME DOT NAME
Rule 46    exp -> MINUS INT
Rule 47    exp -> MINUS FLOAT
Rule 48    exp -> INT
Rule 49    exp -> FLOAT
Rule 50    exp -> DEC exp
Rule 51    exp -> INC exp
Rule 52    stmt -> exp DEC
Rule 53    stmt -> exp INC
Rule 54    exp -> NOT exp
Rule 55    exp -> TRUE
Rule 56    exp -> FALSE
Rule 57    exp -> STRING
Rule 58    exp -> CHAR
Rule 59    exp -> LPAREN exp RPAREN
Rule 60    stmt -> MAKE NAME
Rule 61    stmt -> MAKE NAME EQUAL exp
Rule 62    stmt -> MAKE NAME EQUAL list
Rule 63    stmt -> NAME EQUAL exp
Rule 64    stmt -> IF exp THEN stmtblock
Rule 65    stmt -> IF exp THEN stmtblock elsif ELSE THEN stmtblock
Rule 66    elsif -> ELIF exp THEN stmtblock elsif
Rule 67    elsif -> <empty>
Rule 68    stmt -> BREAK
Rule 69    stmt -> CONTINUE
Rule 70    stmt -> DO stmtblock WHILE exp
Rule 71    stmt -> FOR NAME EQUAL exp TO exp UNTIL step stmtblock
Rule 72    step -> exp
Rule 73    step -> <empty>
Rule 74    stmt -> PRINT LPAREN optargs RPAREN

Terminals, with rules where they appear

AND                  : 20
BREAK                : 68
CALL                 : 30
CHAR                 : 58
COMMA                : 12 37 39
COMMENT              : 
CONTINUE             : 69
DEC                  : 50 52
DIVIDE               : 17
DO                   : 70
DOT                  : 34 35 36 37 44 45
EE                   : 26
ELIF                 : 66
ELSE                 : 65
EQUAL                : 42 44 61 62 63 71
FALSE                : 56
FLOAT                : 47 49
FOR                  : 71
FUNCTION             : 32
GT                   : 22
GTE                  : 24
IF                   : 64 65
INC                  : 51 53
INDEX                : 36
INT                  : 46 48
LBRACE               : 5 6
LBRACK               : 33
LPAREN               : 29 30 32 34 35 36 37 59 74
LT                   : 23
LTE                  : 25
MAKE                 : 43 60 61 62
MINUS                : 15 46 47
MODULUS              : 19
MULTICOMMENT         : 
MULTIPLY             : 16
NAME                 : 28 29 30 32 34 35 36 37 38 41 42 43 43 44 44 45 45 60 61 62 63 71
NE                   : 27
NEWL                 : 
NOT                  : 54
OR                   : 21
PLUS                 : 14
POP                  : 34
POWER                : 18
PRINT                : 74
PUSH                 : 35
RBRACE               : 5 6
RBRACK               : 33
RETURN               : 31
RPAREN               : 29 30 32 34 35 36 37 59 74
SEMICOL              : 2 3 7 8
SEP                  : 38 38
SLICE                : 37
STRING               : 57
STRUCT               : 38
THEN                 : 64 65 65 66
TO                   : 71
TRUE                 : 55
UNTIL                : 71
WHILE                : 70
error                : 3 6 8

Nonterminals, with rules where they appear

args                 : 10 12
elsif                : 65 66
exp                  : 12 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 31 34 35 36 37 37 42 44 50 51 52 53 54 59 61 63 64 65 66 70 71 71 72
line                 : 1
list                 : 62
optargs              : 29 30 32 33 74
step                 : 71
stmt                 : 2 7
stmtS                : 5 7 8
stmtblock            : 32 64 65 65 66 70 71
structargs           : 38 39
structexp            : 39 40
uz                   : 1 0

Parsing method: LALR

state 0

    (0) S' -> . uz
    (1) uz -> . line uz
    (3) uz -> . error SEMICOL
    (4) uz -> .
    (2) line -> . stmt SEMICOL
    (30) stmt -> . CALL NAME LPAREN optargs RPAREN
    (31) stmt -> . RETURN exp
    (32) stmt -> . FUNCTION NAME LPAREN optargs RPAREN stmtblock
    (34) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (35) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (37) stmt -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (38) stmt -> . STRUCT NAME SEP structargs SEP
    (43) stmt -> . MAKE NAME NAME
    (44) stmt -> . NAME DOT NAME EQUAL exp
    (52) stmt -> . exp DEC
    (53) stmt -> . exp INC
    (60) stmt -> . MAKE NAME
    (61) stmt -> . MAKE NAME EQUAL exp
    (62) stmt -> . MAKE NAME EQUAL list
    (63) stmt -> . NAME EQUAL exp
    (64) stmt -> . IF exp THEN stmtblock
    (65) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (68) stmt -> . BREAK
    (69) stmt -> . CONTINUE
    (70) stmt -> . DO stmtblock WHILE exp
    (71) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (74) stmt -> . PRINT LPAREN optargs RPAREN
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    error           shift and go to state 3
    $end            reduce using rule 4 (uz -> .)
    CALL            shift and go to state 5
    RETURN          shift and go to state 8
    FUNCTION        shift and go to state 10
    NAME            shift and go to state 6
    STRUCT          shift and go to state 11
    MAKE            shift and go to state 12
    IF              shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PRINT           shift and go to state 20
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    uz                             shift and go to state 1
    line                           shift and go to state 2
    stmt                           shift and go to state 4
    exp                            shift and go to state 9

state 1

    (0) S' -> uz .



state 2

    (1) uz -> line . uz
    (1) uz -> . line uz
    (3) uz -> . error SEMICOL
    (4) uz -> .
    (2) line -> . stmt SEMICOL
    (30) stmt -> . CALL NAME LPAREN optargs RPAREN
    (31) stmt -> . RETURN exp
    (32) stmt -> . FUNCTION NAME LPAREN optargs RPAREN stmtblock
    (34) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (35) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (37) stmt -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (38) stmt -> . STRUCT NAME SEP structargs SEP
    (43) stmt -> . MAKE NAME NAME
    (44) stmt -> . NAME DOT NAME EQUAL exp
    (52) stmt -> . exp DEC
    (53) stmt -> . exp INC
    (60) stmt -> . MAKE NAME
    (61) stmt -> . MAKE NAME EQUAL exp
    (62) stmt -> . MAKE NAME EQUAL list
    (63) stmt -> . NAME EQUAL exp
    (64) stmt -> . IF exp THEN stmtblock
    (65) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (68) stmt -> . BREAK
    (69) stmt -> . CONTINUE
    (70) stmt -> . DO stmtblock WHILE exp
    (71) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (74) stmt -> . PRINT LPAREN optargs RPAREN
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    error           shift and go to state 3
    $end            reduce using rule 4 (uz -> .)
    CALL            shift and go to state 5
    RETURN          shift and go to state 8
    FUNCTION        shift and go to state 10
    NAME            shift and go to state 6
    STRUCT          shift and go to state 11
    MAKE            shift and go to state 12
    IF              shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PRINT           shift and go to state 20
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    line                           shift and go to state 2
    uz                             shift and go to state 29
    stmt                           shift and go to state 4
    exp                            shift and go to state 9

state 3

    (3) uz -> error . SEMICOL

    SEMICOL         shift and go to state 30


state 4

    (2) line -> stmt . SEMICOL

    SEMICOL         shift and go to state 31


state 5

    (30) stmt -> CALL . NAME LPAREN optargs RPAREN

    NAME            shift and go to state 32


state 6

    (34) stmt -> NAME . DOT POP LPAREN exp RPAREN
    (35) stmt -> NAME . DOT PUSH LPAREN exp RPAREN
    (37) stmt -> NAME . DOT SLICE LPAREN exp COMMA exp RPAREN
    (44) stmt -> NAME . DOT NAME EQUAL exp
    (63) stmt -> NAME . EQUAL exp
    (28) exp -> NAME .
    (29) exp -> NAME . LPAREN optargs RPAREN
    (36) exp -> NAME . DOT INDEX LPAREN exp RPAREN
    (45) exp -> NAME . DOT NAME

    DOT             shift and go to state 33
    EQUAL           shift and go to state 35
    DEC             reduce using rule 28 (exp -> NAME .)
    INC             reduce using rule 28 (exp -> NAME .)
    PLUS            reduce using rule 28 (exp -> NAME .)
    MINUS           reduce using rule 28 (exp -> NAME .)
    MULTIPLY        reduce using rule 28 (exp -> NAME .)
    DIVIDE          reduce using rule 28 (exp -> NAME .)
    POWER           reduce using rule 28 (exp -> NAME .)
    MODULUS         reduce using rule 28 (exp -> NAME .)
    AND             reduce using rule 28 (exp -> NAME .)
    OR              reduce using rule 28 (exp -> NAME .)
    GT              reduce using rule 28 (exp -> NAME .)
    LT              reduce using rule 28 (exp -> NAME .)
    GTE             reduce using rule 28 (exp -> NAME .)
    LTE             reduce using rule 28 (exp -> NAME .)
    EE              reduce using rule 28 (exp -> NAME .)
    NE              reduce using rule 28 (exp -> NAME .)
    LPAREN          shift and go to state 34


state 7

    (59) exp -> LPAREN . exp RPAREN
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 36

state 8

    (31) stmt -> RETURN . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 38

state 9

    (52) stmt -> exp . DEC
    (53) stmt -> exp . INC
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    DEC             shift and go to state 39
    INC             shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 10

    (32) stmt -> FUNCTION . NAME LPAREN optargs RPAREN stmtblock

    NAME            shift and go to state 55


state 11

    (38) stmt -> STRUCT . NAME SEP structargs SEP

    NAME            shift and go to state 56


state 12

    (43) stmt -> MAKE . NAME NAME
    (60) stmt -> MAKE . NAME
    (61) stmt -> MAKE . NAME EQUAL exp
    (62) stmt -> MAKE . NAME EQUAL list

    NAME            shift and go to state 57


state 13

    (50) exp -> DEC . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 58

state 14

    (51) exp -> INC . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 59

state 15

    (64) stmt -> IF . exp THEN stmtblock
    (65) stmt -> IF . exp THEN stmtblock elsif ELSE THEN stmtblock
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 60

state 16

    (68) stmt -> BREAK .

    SEMICOL         reduce using rule 68 (stmt -> BREAK .)


state 17

    (69) stmt -> CONTINUE .

    SEMICOL         reduce using rule 69 (stmt -> CONTINUE .)


state 18

    (70) stmt -> DO . stmtblock WHILE exp
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 62

    stmtblock                      shift and go to state 61

state 19

    (71) stmt -> FOR . NAME EQUAL exp TO exp UNTIL step stmtblock

    NAME            shift and go to state 63


state 20

    (74) stmt -> PRINT . LPAREN optargs RPAREN

    LPAREN          shift and go to state 64


state 21

    (46) exp -> MINUS . INT
    (47) exp -> MINUS . FLOAT

    INT             shift and go to state 65
    FLOAT           shift and go to state 66


state 22

    (48) exp -> INT .

    DEC             reduce using rule 48 (exp -> INT .)
    INC             reduce using rule 48 (exp -> INT .)
    PLUS            reduce using rule 48 (exp -> INT .)
    MINUS           reduce using rule 48 (exp -> INT .)
    MULTIPLY        reduce using rule 48 (exp -> INT .)
    DIVIDE          reduce using rule 48 (exp -> INT .)
    POWER           reduce using rule 48 (exp -> INT .)
    MODULUS         reduce using rule 48 (exp -> INT .)
    AND             reduce using rule 48 (exp -> INT .)
    OR              reduce using rule 48 (exp -> INT .)
    GT              reduce using rule 48 (exp -> INT .)
    LT              reduce using rule 48 (exp -> INT .)
    GTE             reduce using rule 48 (exp -> INT .)
    LTE             reduce using rule 48 (exp -> INT .)
    EE              reduce using rule 48 (exp -> INT .)
    NE              reduce using rule 48 (exp -> INT .)
    RPAREN          reduce using rule 48 (exp -> INT .)
    SEMICOL         reduce using rule 48 (exp -> INT .)
    THEN            reduce using rule 48 (exp -> INT .)
    COMMA           reduce using rule 48 (exp -> INT .)
    TO              reduce using rule 48 (exp -> INT .)
    RBRACK          reduce using rule 48 (exp -> INT .)
    SEP             reduce using rule 48 (exp -> INT .)
    UNTIL           reduce using rule 48 (exp -> INT .)
    LBRACE          reduce using rule 48 (exp -> INT .)


state 23

    (49) exp -> FLOAT .

    DEC             reduce using rule 49 (exp -> FLOAT .)
    INC             reduce using rule 49 (exp -> FLOAT .)
    PLUS            reduce using rule 49 (exp -> FLOAT .)
    MINUS           reduce using rule 49 (exp -> FLOAT .)
    MULTIPLY        reduce using rule 49 (exp -> FLOAT .)
    DIVIDE          reduce using rule 49 (exp -> FLOAT .)
    POWER           reduce using rule 49 (exp -> FLOAT .)
    MODULUS         reduce using rule 49 (exp -> FLOAT .)
    AND             reduce using rule 49 (exp -> FLOAT .)
    OR              reduce using rule 49 (exp -> FLOAT .)
    GT              reduce using rule 49 (exp -> FLOAT .)
    LT              reduce using rule 49 (exp -> FLOAT .)
    GTE             reduce using rule 49 (exp -> FLOAT .)
    LTE             reduce using rule 49 (exp -> FLOAT .)
    EE              reduce using rule 49 (exp -> FLOAT .)
    NE              reduce using rule 49 (exp -> FLOAT .)
    RPAREN          reduce using rule 49 (exp -> FLOAT .)
    SEMICOL         reduce using rule 49 (exp -> FLOAT .)
    THEN            reduce using rule 49 (exp -> FLOAT .)
    COMMA           reduce using rule 49 (exp -> FLOAT .)
    TO              reduce using rule 49 (exp -> FLOAT .)
    RBRACK          reduce using rule 49 (exp -> FLOAT .)
    SEP             reduce using rule 49 (exp -> FLOAT .)
    UNTIL           reduce using rule 49 (exp -> FLOAT .)
    LBRACE          reduce using rule 49 (exp -> FLOAT .)


state 24

    (54) exp -> NOT . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 67

state 25

    (55) exp -> TRUE .

    DEC             reduce using rule 55 (exp -> TRUE .)
    INC             reduce using rule 55 (exp -> TRUE .)
    PLUS            reduce using rule 55 (exp -> TRUE .)
    MINUS           reduce using rule 55 (exp -> TRUE .)
    MULTIPLY        reduce using rule 55 (exp -> TRUE .)
    DIVIDE          reduce using rule 55 (exp -> TRUE .)
    POWER           reduce using rule 55 (exp -> TRUE .)
    MODULUS         reduce using rule 55 (exp -> TRUE .)
    AND             reduce using rule 55 (exp -> TRUE .)
    OR              reduce using rule 55 (exp -> TRUE .)
    GT              reduce using rule 55 (exp -> TRUE .)
    LT              reduce using rule 55 (exp -> TRUE .)
    GTE             reduce using rule 55 (exp -> TRUE .)
    LTE             reduce using rule 55 (exp -> TRUE .)
    EE              reduce using rule 55 (exp -> TRUE .)
    NE              reduce using rule 55 (exp -> TRUE .)
    RPAREN          reduce using rule 55 (exp -> TRUE .)
    SEMICOL         reduce using rule 55 (exp -> TRUE .)
    THEN            reduce using rule 55 (exp -> TRUE .)
    COMMA           reduce using rule 55 (exp -> TRUE .)
    TO              reduce using rule 55 (exp -> TRUE .)
    RBRACK          reduce using rule 55 (exp -> TRUE .)
    SEP             reduce using rule 55 (exp -> TRUE .)
    UNTIL           reduce using rule 55 (exp -> TRUE .)
    LBRACE          reduce using rule 55 (exp -> TRUE .)


state 26

    (56) exp -> FALSE .

    DEC             reduce using rule 56 (exp -> FALSE .)
    INC             reduce using rule 56 (exp -> FALSE .)
    PLUS            reduce using rule 56 (exp -> FALSE .)
    MINUS           reduce using rule 56 (exp -> FALSE .)
    MULTIPLY        reduce using rule 56 (exp -> FALSE .)
    DIVIDE          reduce using rule 56 (exp -> FALSE .)
    POWER           reduce using rule 56 (exp -> FALSE .)
    MODULUS         reduce using rule 56 (exp -> FALSE .)
    AND             reduce using rule 56 (exp -> FALSE .)
    OR              reduce using rule 56 (exp -> FALSE .)
    GT              reduce using rule 56 (exp -> FALSE .)
    LT              reduce using rule 56 (exp -> FALSE .)
    GTE             reduce using rule 56 (exp -> FALSE .)
    LTE             reduce using rule 56 (exp -> FALSE .)
    EE              reduce using rule 56 (exp -> FALSE .)
    NE              reduce using rule 56 (exp -> FALSE .)
    RPAREN          reduce using rule 56 (exp -> FALSE .)
    SEMICOL         reduce using rule 56 (exp -> FALSE .)
    THEN            reduce using rule 56 (exp -> FALSE .)
    COMMA           reduce using rule 56 (exp -> FALSE .)
    TO              reduce using rule 56 (exp -> FALSE .)
    RBRACK          reduce using rule 56 (exp -> FALSE .)
    SEP             reduce using rule 56 (exp -> FALSE .)
    UNTIL           reduce using rule 56 (exp -> FALSE .)
    LBRACE          reduce using rule 56 (exp -> FALSE .)


state 27

    (57) exp -> STRING .

    DEC             reduce using rule 57 (exp -> STRING .)
    INC             reduce using rule 57 (exp -> STRING .)
    PLUS            reduce using rule 57 (exp -> STRING .)
    MINUS           reduce using rule 57 (exp -> STRING .)
    MULTIPLY        reduce using rule 57 (exp -> STRING .)
    DIVIDE          reduce using rule 57 (exp -> STRING .)
    POWER           reduce using rule 57 (exp -> STRING .)
    MODULUS         reduce using rule 57 (exp -> STRING .)
    AND             reduce using rule 57 (exp -> STRING .)
    OR              reduce using rule 57 (exp -> STRING .)
    GT              reduce using rule 57 (exp -> STRING .)
    LT              reduce using rule 57 (exp -> STRING .)
    GTE             reduce using rule 57 (exp -> STRING .)
    LTE             reduce using rule 57 (exp -> STRING .)
    EE              reduce using rule 57 (exp -> STRING .)
    NE              reduce using rule 57 (exp -> STRING .)
    RPAREN          reduce using rule 57 (exp -> STRING .)
    SEMICOL         reduce using rule 57 (exp -> STRING .)
    THEN            reduce using rule 57 (exp -> STRING .)
    COMMA           reduce using rule 57 (exp -> STRING .)
    TO              reduce using rule 57 (exp -> STRING .)
    RBRACK          reduce using rule 57 (exp -> STRING .)
    SEP             reduce using rule 57 (exp -> STRING .)
    UNTIL           reduce using rule 57 (exp -> STRING .)
    LBRACE          reduce using rule 57 (exp -> STRING .)


state 28

    (58) exp -> CHAR .

    DEC             reduce using rule 58 (exp -> CHAR .)
    INC             reduce using rule 58 (exp -> CHAR .)
    PLUS            reduce using rule 58 (exp -> CHAR .)
    MINUS           reduce using rule 58 (exp -> CHAR .)
    MULTIPLY        reduce using rule 58 (exp -> CHAR .)
    DIVIDE          reduce using rule 58 (exp -> CHAR .)
    POWER           reduce using rule 58 (exp -> CHAR .)
    MODULUS         reduce using rule 58 (exp -> CHAR .)
    AND             reduce using rule 58 (exp -> CHAR .)
    OR              reduce using rule 58 (exp -> CHAR .)
    GT              reduce using rule 58 (exp -> CHAR .)
    LT              reduce using rule 58 (exp -> CHAR .)
    GTE             reduce using rule 58 (exp -> CHAR .)
    LTE             reduce using rule 58 (exp -> CHAR .)
    EE              reduce using rule 58 (exp -> CHAR .)
    NE              reduce using rule 58 (exp -> CHAR .)
    RPAREN          reduce using rule 58 (exp -> CHAR .)
    SEMICOL         reduce using rule 58 (exp -> CHAR .)
    THEN            reduce using rule 58 (exp -> CHAR .)
    COMMA           reduce using rule 58 (exp -> CHAR .)
    TO              reduce using rule 58 (exp -> CHAR .)
    RBRACK          reduce using rule 58 (exp -> CHAR .)
    SEP             reduce using rule 58 (exp -> CHAR .)
    UNTIL           reduce using rule 58 (exp -> CHAR .)
    LBRACE          reduce using rule 58 (exp -> CHAR .)


state 29

    (1) uz -> line uz .

    $end            reduce using rule 1 (uz -> line uz .)


state 30

    (3) uz -> error SEMICOL .

    $end            reduce using rule 3 (uz -> error SEMICOL .)


state 31

    (2) line -> stmt SEMICOL .

    error           reduce using rule 2 (line -> stmt SEMICOL .)
    CALL            reduce using rule 2 (line -> stmt SEMICOL .)
    RETURN          reduce using rule 2 (line -> stmt SEMICOL .)
    FUNCTION        reduce using rule 2 (line -> stmt SEMICOL .)
    NAME            reduce using rule 2 (line -> stmt SEMICOL .)
    STRUCT          reduce using rule 2 (line -> stmt SEMICOL .)
    MAKE            reduce using rule 2 (line -> stmt SEMICOL .)
    IF              reduce using rule 2 (line -> stmt SEMICOL .)
    BREAK           reduce using rule 2 (line -> stmt SEMICOL .)
    CONTINUE        reduce using rule 2 (line -> stmt SEMICOL .)
    DO              reduce using rule 2 (line -> stmt SEMICOL .)
    FOR             reduce using rule 2 (line -> stmt SEMICOL .)
    PRINT           reduce using rule 2 (line -> stmt SEMICOL .)
    MINUS           reduce using rule 2 (line -> stmt SEMICOL .)
    INT             reduce using rule 2 (line -> stmt SEMICOL .)
    FLOAT           reduce using rule 2 (line -> stmt SEMICOL .)
    DEC             reduce using rule 2 (line -> stmt SEMICOL .)
    INC             reduce using rule 2 (line -> stmt SEMICOL .)
    NOT             reduce using rule 2 (line -> stmt SEMICOL .)
    TRUE            reduce using rule 2 (line -> stmt SEMICOL .)
    FALSE           reduce using rule 2 (line -> stmt SEMICOL .)
    STRING          reduce using rule 2 (line -> stmt SEMICOL .)
    CHAR            reduce using rule 2 (line -> stmt SEMICOL .)
    LPAREN          reduce using rule 2 (line -> stmt SEMICOL .)
    $end            reduce using rule 2 (line -> stmt SEMICOL .)


state 32

    (30) stmt -> CALL NAME . LPAREN optargs RPAREN

    LPAREN          shift and go to state 68


state 33

    (34) stmt -> NAME DOT . POP LPAREN exp RPAREN
    (35) stmt -> NAME DOT . PUSH LPAREN exp RPAREN
    (37) stmt -> NAME DOT . SLICE LPAREN exp COMMA exp RPAREN
    (44) stmt -> NAME DOT . NAME EQUAL exp
    (36) exp -> NAME DOT . INDEX LPAREN exp RPAREN
    (45) exp -> NAME DOT . NAME

    POP             shift and go to state 70
    PUSH            shift and go to state 71
    SLICE           shift and go to state 72
    NAME            shift and go to state 69
    INDEX           shift and go to state 73


state 34

    (29) exp -> NAME LPAREN . optargs RPAREN
    (10) optargs -> . args
    (11) optargs -> .
    (12) args -> . exp COMMA args
    (13) args -> . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    RPAREN          reduce using rule 11 (optargs -> .)
    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    optargs                        shift and go to state 74
    args                           shift and go to state 75
    exp                            shift and go to state 76

state 35

    (63) stmt -> NAME EQUAL . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 77

state 36

    (59) exp -> LPAREN exp . RPAREN
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    RPAREN          shift and go to state 78
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 37

    (28) exp -> NAME .
    (29) exp -> NAME . LPAREN optargs RPAREN
    (36) exp -> NAME . DOT INDEX LPAREN exp RPAREN
    (45) exp -> NAME . DOT NAME

    RPAREN          reduce using rule 28 (exp -> NAME .)
    PLUS            reduce using rule 28 (exp -> NAME .)
    MINUS           reduce using rule 28 (exp -> NAME .)
    MULTIPLY        reduce using rule 28 (exp -> NAME .)
    DIVIDE          reduce using rule 28 (exp -> NAME .)
    POWER           reduce using rule 28 (exp -> NAME .)
    MODULUS         reduce using rule 28 (exp -> NAME .)
    AND             reduce using rule 28 (exp -> NAME .)
    OR              reduce using rule 28 (exp -> NAME .)
    GT              reduce using rule 28 (exp -> NAME .)
    LT              reduce using rule 28 (exp -> NAME .)
    GTE             reduce using rule 28 (exp -> NAME .)
    LTE             reduce using rule 28 (exp -> NAME .)
    EE              reduce using rule 28 (exp -> NAME .)
    NE              reduce using rule 28 (exp -> NAME .)
    SEMICOL         reduce using rule 28 (exp -> NAME .)
    DEC             reduce using rule 28 (exp -> NAME .)
    INC             reduce using rule 28 (exp -> NAME .)
    THEN            reduce using rule 28 (exp -> NAME .)
    COMMA           reduce using rule 28 (exp -> NAME .)
    TO              reduce using rule 28 (exp -> NAME .)
    RBRACK          reduce using rule 28 (exp -> NAME .)
    SEP             reduce using rule 28 (exp -> NAME .)
    UNTIL           reduce using rule 28 (exp -> NAME .)
    LBRACE          reduce using rule 28 (exp -> NAME .)
    LPAREN          shift and go to state 34
    DOT             shift and go to state 79


state 38

    (31) stmt -> RETURN exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    SEMICOL         reduce using rule 31 (stmt -> RETURN exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 39

    (52) stmt -> exp DEC .

    SEMICOL         reduce using rule 52 (stmt -> exp DEC .)


state 40

    (53) stmt -> exp INC .

    SEMICOL         reduce using rule 53 (stmt -> exp INC .)


state 41

    (14) exp -> exp PLUS . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 80

state 42

    (15) exp -> exp MINUS . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 81

state 43

    (16) exp -> exp MULTIPLY . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 82

state 44

    (17) exp -> exp DIVIDE . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 83

state 45

    (18) exp -> exp POWER . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 84

state 46

    (19) exp -> exp MODULUS . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 85

state 47

    (20) exp -> exp AND . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 86

state 48

    (21) exp -> exp OR . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 87

state 49

    (22) exp -> exp GT . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 88

state 50

    (23) exp -> exp LT . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 89

state 51

    (24) exp -> exp GTE . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 90

state 52

    (25) exp -> exp LTE . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 91

state 53

    (26) exp -> exp EE . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 92

state 54

    (27) exp -> exp NE . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 93

state 55

    (32) stmt -> FUNCTION NAME . LPAREN optargs RPAREN stmtblock

    LPAREN          shift and go to state 94


state 56

    (38) stmt -> STRUCT NAME . SEP structargs SEP

    SEP             shift and go to state 95


state 57

    (43) stmt -> MAKE NAME . NAME
    (60) stmt -> MAKE NAME .
    (61) stmt -> MAKE NAME . EQUAL exp
    (62) stmt -> MAKE NAME . EQUAL list

    NAME            shift and go to state 96
    SEMICOL         reduce using rule 60 (stmt -> MAKE NAME .)
    EQUAL           shift and go to state 97


state 58

    (50) exp -> DEC exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    DEC             reduce using rule 50 (exp -> DEC exp .)
    INC             reduce using rule 50 (exp -> DEC exp .)
    POWER           reduce using rule 50 (exp -> DEC exp .)
    MODULUS         reduce using rule 50 (exp -> DEC exp .)
    RPAREN          reduce using rule 50 (exp -> DEC exp .)
    SEMICOL         reduce using rule 50 (exp -> DEC exp .)
    THEN            reduce using rule 50 (exp -> DEC exp .)
    COMMA           reduce using rule 50 (exp -> DEC exp .)
    TO              reduce using rule 50 (exp -> DEC exp .)
    RBRACK          reduce using rule 50 (exp -> DEC exp .)
    SEP             reduce using rule 50 (exp -> DEC exp .)
    UNTIL           reduce using rule 50 (exp -> DEC exp .)
    LBRACE          reduce using rule 50 (exp -> DEC exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54

  ! PLUS            [ reduce using rule 50 (exp -> DEC exp .) ]
  ! MINUS           [ reduce using rule 50 (exp -> DEC exp .) ]
  ! MULTIPLY        [ reduce using rule 50 (exp -> DEC exp .) ]
  ! DIVIDE          [ reduce using rule 50 (exp -> DEC exp .) ]
  ! AND             [ reduce using rule 50 (exp -> DEC exp .) ]
  ! OR              [ reduce using rule 50 (exp -> DEC exp .) ]
  ! GT              [ reduce using rule 50 (exp -> DEC exp .) ]
  ! LT              [ reduce using rule 50 (exp -> DEC exp .) ]
  ! GTE             [ reduce using rule 50 (exp -> DEC exp .) ]
  ! LTE             [ reduce using rule 50 (exp -> DEC exp .) ]
  ! EE              [ reduce using rule 50 (exp -> DEC exp .) ]
  ! NE              [ reduce using rule 50 (exp -> DEC exp .) ]
  ! POWER           [ shift and go to state 45 ]
  ! MODULUS         [ shift and go to state 46 ]


state 59

    (51) exp -> INC exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    DEC             reduce using rule 51 (exp -> INC exp .)
    INC             reduce using rule 51 (exp -> INC exp .)
    POWER           reduce using rule 51 (exp -> INC exp .)
    MODULUS         reduce using rule 51 (exp -> INC exp .)
    RPAREN          reduce using rule 51 (exp -> INC exp .)
    SEMICOL         reduce using rule 51 (exp -> INC exp .)
    THEN            reduce using rule 51 (exp -> INC exp .)
    COMMA           reduce using rule 51 (exp -> INC exp .)
    TO              reduce using rule 51 (exp -> INC exp .)
    RBRACK          reduce using rule 51 (exp -> INC exp .)
    SEP             reduce using rule 51 (exp -> INC exp .)
    UNTIL           reduce using rule 51 (exp -> INC exp .)
    LBRACE          reduce using rule 51 (exp -> INC exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54

  ! PLUS            [ reduce using rule 51 (exp -> INC exp .) ]
  ! MINUS           [ reduce using rule 51 (exp -> INC exp .) ]
  ! MULTIPLY        [ reduce using rule 51 (exp -> INC exp .) ]
  ! DIVIDE          [ reduce using rule 51 (exp -> INC exp .) ]
  ! AND             [ reduce using rule 51 (exp -> INC exp .) ]
  ! OR              [ reduce using rule 51 (exp -> INC exp .) ]
  ! GT              [ reduce using rule 51 (exp -> INC exp .) ]
  ! LT              [ reduce using rule 51 (exp -> INC exp .) ]
  ! GTE             [ reduce using rule 51 (exp -> INC exp .) ]
  ! LTE             [ reduce using rule 51 (exp -> INC exp .) ]
  ! EE              [ reduce using rule 51 (exp -> INC exp .) ]
  ! NE              [ reduce using rule 51 (exp -> INC exp .) ]
  ! POWER           [ shift and go to state 45 ]
  ! MODULUS         [ shift and go to state 46 ]


state 60

    (64) stmt -> IF exp . THEN stmtblock
    (65) stmt -> IF exp . THEN stmtblock elsif ELSE THEN stmtblock
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    THEN            shift and go to state 98
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 61

    (70) stmt -> DO stmtblock . WHILE exp

    WHILE           shift and go to state 99


state 62

    (5) stmtblock -> LBRACE . stmtS RBRACE
    (6) stmtblock -> LBRACE . error RBRACE
    (7) stmtS -> . stmt SEMICOL stmtS
    (8) stmtS -> . error SEMICOL stmtS
    (9) stmtS -> .
    (30) stmt -> . CALL NAME LPAREN optargs RPAREN
    (31) stmt -> . RETURN exp
    (32) stmt -> . FUNCTION NAME LPAREN optargs RPAREN stmtblock
    (34) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (35) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (37) stmt -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (38) stmt -> . STRUCT NAME SEP structargs SEP
    (43) stmt -> . MAKE NAME NAME
    (44) stmt -> . NAME DOT NAME EQUAL exp
    (52) stmt -> . exp DEC
    (53) stmt -> . exp INC
    (60) stmt -> . MAKE NAME
    (61) stmt -> . MAKE NAME EQUAL exp
    (62) stmt -> . MAKE NAME EQUAL list
    (63) stmt -> . NAME EQUAL exp
    (64) stmt -> . IF exp THEN stmtblock
    (65) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (68) stmt -> . BREAK
    (69) stmt -> . CONTINUE
    (70) stmt -> . DO stmtblock WHILE exp
    (71) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (74) stmt -> . PRINT LPAREN optargs RPAREN
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    error           shift and go to state 101
    RBRACE          reduce using rule 9 (stmtS -> .)
    CALL            shift and go to state 5
    RETURN          shift and go to state 8
    FUNCTION        shift and go to state 10
    NAME            shift and go to state 6
    STRUCT          shift and go to state 11
    MAKE            shift and go to state 12
    IF              shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PRINT           shift and go to state 20
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    stmtS                          shift and go to state 100
    stmt                           shift and go to state 102
    exp                            shift and go to state 9

state 63

    (71) stmt -> FOR NAME . EQUAL exp TO exp UNTIL step stmtblock

    EQUAL           shift and go to state 103


state 64

    (74) stmt -> PRINT LPAREN . optargs RPAREN
    (10) optargs -> . args
    (11) optargs -> .
    (12) args -> . exp COMMA args
    (13) args -> . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    RPAREN          reduce using rule 11 (optargs -> .)
    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    optargs                        shift and go to state 104
    args                           shift and go to state 75
    exp                            shift and go to state 76

state 65

    (46) exp -> MINUS INT .

    DEC             reduce using rule 46 (exp -> MINUS INT .)
    INC             reduce using rule 46 (exp -> MINUS INT .)
    PLUS            reduce using rule 46 (exp -> MINUS INT .)
    MINUS           reduce using rule 46 (exp -> MINUS INT .)
    MULTIPLY        reduce using rule 46 (exp -> MINUS INT .)
    DIVIDE          reduce using rule 46 (exp -> MINUS INT .)
    POWER           reduce using rule 46 (exp -> MINUS INT .)
    MODULUS         reduce using rule 46 (exp -> MINUS INT .)
    AND             reduce using rule 46 (exp -> MINUS INT .)
    OR              reduce using rule 46 (exp -> MINUS INT .)
    GT              reduce using rule 46 (exp -> MINUS INT .)
    LT              reduce using rule 46 (exp -> MINUS INT .)
    GTE             reduce using rule 46 (exp -> MINUS INT .)
    LTE             reduce using rule 46 (exp -> MINUS INT .)
    EE              reduce using rule 46 (exp -> MINUS INT .)
    NE              reduce using rule 46 (exp -> MINUS INT .)
    RPAREN          reduce using rule 46 (exp -> MINUS INT .)
    SEMICOL         reduce using rule 46 (exp -> MINUS INT .)
    THEN            reduce using rule 46 (exp -> MINUS INT .)
    COMMA           reduce using rule 46 (exp -> MINUS INT .)
    TO              reduce using rule 46 (exp -> MINUS INT .)
    RBRACK          reduce using rule 46 (exp -> MINUS INT .)
    SEP             reduce using rule 46 (exp -> MINUS INT .)
    UNTIL           reduce using rule 46 (exp -> MINUS INT .)
    LBRACE          reduce using rule 46 (exp -> MINUS INT .)


state 66

    (47) exp -> MINUS FLOAT .

    DEC             reduce using rule 47 (exp -> MINUS FLOAT .)
    INC             reduce using rule 47 (exp -> MINUS FLOAT .)
    PLUS            reduce using rule 47 (exp -> MINUS FLOAT .)
    MINUS           reduce using rule 47 (exp -> MINUS FLOAT .)
    MULTIPLY        reduce using rule 47 (exp -> MINUS FLOAT .)
    DIVIDE          reduce using rule 47 (exp -> MINUS FLOAT .)
    POWER           reduce using rule 47 (exp -> MINUS FLOAT .)
    MODULUS         reduce using rule 47 (exp -> MINUS FLOAT .)
    AND             reduce using rule 47 (exp -> MINUS FLOAT .)
    OR              reduce using rule 47 (exp -> MINUS FLOAT .)
    GT              reduce using rule 47 (exp -> MINUS FLOAT .)
    LT              reduce using rule 47 (exp -> MINUS FLOAT .)
    GTE             reduce using rule 47 (exp -> MINUS FLOAT .)
    LTE             reduce using rule 47 (exp -> MINUS FLOAT .)
    EE              reduce using rule 47 (exp -> MINUS FLOAT .)
    NE              reduce using rule 47 (exp -> MINUS FLOAT .)
    RPAREN          reduce using rule 47 (exp -> MINUS FLOAT .)
    SEMICOL         reduce using rule 47 (exp -> MINUS FLOAT .)
    THEN            reduce using rule 47 (exp -> MINUS FLOAT .)
    COMMA           reduce using rule 47 (exp -> MINUS FLOAT .)
    TO              reduce using rule 47 (exp -> MINUS FLOAT .)
    RBRACK          reduce using rule 47 (exp -> MINUS FLOAT .)
    SEP             reduce using rule 47 (exp -> MINUS FLOAT .)
    UNTIL           reduce using rule 47 (exp -> MINUS FLOAT .)
    LBRACE          reduce using rule 47 (exp -> MINUS FLOAT .)


state 67

    (54) exp -> NOT exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    DEC             reduce using rule 54 (exp -> NOT exp .)
    INC             reduce using rule 54 (exp -> NOT exp .)
    PLUS            reduce using rule 54 (exp -> NOT exp .)
    MINUS           reduce using rule 54 (exp -> NOT exp .)
    MULTIPLY        reduce using rule 54 (exp -> NOT exp .)
    DIVIDE          reduce using rule 54 (exp -> NOT exp .)
    POWER           reduce using rule 54 (exp -> NOT exp .)
    MODULUS         reduce using rule 54 (exp -> NOT exp .)
    AND             reduce using rule 54 (exp -> NOT exp .)
    OR              reduce using rule 54 (exp -> NOT exp .)
    GT              reduce using rule 54 (exp -> NOT exp .)
    LT              reduce using rule 54 (exp -> NOT exp .)
    GTE             reduce using rule 54 (exp -> NOT exp .)
    LTE             reduce using rule 54 (exp -> NOT exp .)
    EE              reduce using rule 54 (exp -> NOT exp .)
    NE              reduce using rule 54 (exp -> NOT exp .)
    RPAREN          reduce using rule 54 (exp -> NOT exp .)
    SEMICOL         reduce using rule 54 (exp -> NOT exp .)
    THEN            reduce using rule 54 (exp -> NOT exp .)
    COMMA           reduce using rule 54 (exp -> NOT exp .)
    TO              reduce using rule 54 (exp -> NOT exp .)
    RBRACK          reduce using rule 54 (exp -> NOT exp .)
    SEP             reduce using rule 54 (exp -> NOT exp .)
    UNTIL           reduce using rule 54 (exp -> NOT exp .)
    LBRACE          reduce using rule 54 (exp -> NOT exp .)

  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! MULTIPLY        [ shift and go to state 43 ]
  ! DIVIDE          [ shift and go to state 44 ]
  ! POWER           [ shift and go to state 45 ]
  ! MODULUS         [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! GT              [ shift and go to state 49 ]
  ! LT              [ shift and go to state 50 ]
  ! GTE             [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EE              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]


state 68

    (30) stmt -> CALL NAME LPAREN . optargs RPAREN
    (10) optargs -> . args
    (11) optargs -> .
    (12) args -> . exp COMMA args
    (13) args -> . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    RPAREN          reduce using rule 11 (optargs -> .)
    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    optargs                        shift and go to state 105
    args                           shift and go to state 75
    exp                            shift and go to state 76

state 69

    (44) stmt -> NAME DOT NAME . EQUAL exp
    (45) exp -> NAME DOT NAME .

    EQUAL           shift and go to state 106
    DEC             reduce using rule 45 (exp -> NAME DOT NAME .)
    INC             reduce using rule 45 (exp -> NAME DOT NAME .)
    PLUS            reduce using rule 45 (exp -> NAME DOT NAME .)
    MINUS           reduce using rule 45 (exp -> NAME DOT NAME .)
    MULTIPLY        reduce using rule 45 (exp -> NAME DOT NAME .)
    DIVIDE          reduce using rule 45 (exp -> NAME DOT NAME .)
    POWER           reduce using rule 45 (exp -> NAME DOT NAME .)
    MODULUS         reduce using rule 45 (exp -> NAME DOT NAME .)
    AND             reduce using rule 45 (exp -> NAME DOT NAME .)
    OR              reduce using rule 45 (exp -> NAME DOT NAME .)
    GT              reduce using rule 45 (exp -> NAME DOT NAME .)
    LT              reduce using rule 45 (exp -> NAME DOT NAME .)
    GTE             reduce using rule 45 (exp -> NAME DOT NAME .)
    LTE             reduce using rule 45 (exp -> NAME DOT NAME .)
    EE              reduce using rule 45 (exp -> NAME DOT NAME .)
    NE              reduce using rule 45 (exp -> NAME DOT NAME .)


state 70

    (34) stmt -> NAME DOT POP . LPAREN exp RPAREN

    LPAREN          shift and go to state 107


state 71

    (35) stmt -> NAME DOT PUSH . LPAREN exp RPAREN

    LPAREN          shift and go to state 108


state 72

    (37) stmt -> NAME DOT SLICE . LPAREN exp COMMA exp RPAREN

    LPAREN          shift and go to state 109


state 73

    (36) exp -> NAME DOT INDEX . LPAREN exp RPAREN

    LPAREN          shift and go to state 110


state 74

    (29) exp -> NAME LPAREN optargs . RPAREN

    RPAREN          shift and go to state 111


state 75

    (10) optargs -> args .

    RPAREN          reduce using rule 10 (optargs -> args .)
    RBRACK          reduce using rule 10 (optargs -> args .)


state 76

    (12) args -> exp . COMMA args
    (13) args -> exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    COMMA           shift and go to state 112
    RPAREN          reduce using rule 13 (args -> exp .)
    RBRACK          reduce using rule 13 (args -> exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 77

    (63) stmt -> NAME EQUAL exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    SEMICOL         reduce using rule 63 (stmt -> NAME EQUAL exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 78

    (59) exp -> LPAREN exp RPAREN .

    DEC             reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    INC             reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    MULTIPLY        reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    POWER           reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    MODULUS         reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    GT              reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    LT              reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    EE              reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    NE              reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    SEMICOL         reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    THEN            reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    TO              reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    RBRACK          reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    SEP             reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    UNTIL           reduce using rule 59 (exp -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 59 (exp -> LPAREN exp RPAREN .)


state 79

    (36) exp -> NAME DOT . INDEX LPAREN exp RPAREN
    (45) exp -> NAME DOT . NAME

    INDEX           shift and go to state 73
    NAME            shift and go to state 113


state 80

    (14) exp -> exp PLUS exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    DEC             reduce using rule 14 (exp -> exp PLUS exp .)
    INC             reduce using rule 14 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 14 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 14 (exp -> exp PLUS exp .)
    POWER           reduce using rule 14 (exp -> exp PLUS exp .)
    MODULUS         reduce using rule 14 (exp -> exp PLUS exp .)
    AND             reduce using rule 14 (exp -> exp PLUS exp .)
    OR              reduce using rule 14 (exp -> exp PLUS exp .)
    GT              reduce using rule 14 (exp -> exp PLUS exp .)
    LT              reduce using rule 14 (exp -> exp PLUS exp .)
    GTE             reduce using rule 14 (exp -> exp PLUS exp .)
    LTE             reduce using rule 14 (exp -> exp PLUS exp .)
    EE              reduce using rule 14 (exp -> exp PLUS exp .)
    NE              reduce using rule 14 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 14 (exp -> exp PLUS exp .)
    SEMICOL         reduce using rule 14 (exp -> exp PLUS exp .)
    THEN            reduce using rule 14 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 14 (exp -> exp PLUS exp .)
    TO              reduce using rule 14 (exp -> exp PLUS exp .)
    RBRACK          reduce using rule 14 (exp -> exp PLUS exp .)
    SEP             reduce using rule 14 (exp -> exp PLUS exp .)
    UNTIL           reduce using rule 14 (exp -> exp PLUS exp .)
    LBRACE          reduce using rule 14 (exp -> exp PLUS exp .)
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44

  ! MULTIPLY        [ reduce using rule 14 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 14 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! POWER           [ shift and go to state 45 ]
  ! MODULUS         [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! GT              [ shift and go to state 49 ]
  ! LT              [ shift and go to state 50 ]
  ! GTE             [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EE              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]


state 81

    (15) exp -> exp MINUS exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    DEC             reduce using rule 15 (exp -> exp MINUS exp .)
    INC             reduce using rule 15 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 15 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 15 (exp -> exp MINUS exp .)
    POWER           reduce using rule 15 (exp -> exp MINUS exp .)
    MODULUS         reduce using rule 15 (exp -> exp MINUS exp .)
    AND             reduce using rule 15 (exp -> exp MINUS exp .)
    OR              reduce using rule 15 (exp -> exp MINUS exp .)
    GT              reduce using rule 15 (exp -> exp MINUS exp .)
    LT              reduce using rule 15 (exp -> exp MINUS exp .)
    GTE             reduce using rule 15 (exp -> exp MINUS exp .)
    LTE             reduce using rule 15 (exp -> exp MINUS exp .)
    EE              reduce using rule 15 (exp -> exp MINUS exp .)
    NE              reduce using rule 15 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 15 (exp -> exp MINUS exp .)
    SEMICOL         reduce using rule 15 (exp -> exp MINUS exp .)
    THEN            reduce using rule 15 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 15 (exp -> exp MINUS exp .)
    TO              reduce using rule 15 (exp -> exp MINUS exp .)
    RBRACK          reduce using rule 15 (exp -> exp MINUS exp .)
    SEP             reduce using rule 15 (exp -> exp MINUS exp .)
    UNTIL           reduce using rule 15 (exp -> exp MINUS exp .)
    LBRACE          reduce using rule 15 (exp -> exp MINUS exp .)
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44

  ! MULTIPLY        [ reduce using rule 15 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 15 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! POWER           [ shift and go to state 45 ]
  ! MODULUS         [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! GT              [ shift and go to state 49 ]
  ! LT              [ shift and go to state 50 ]
  ! GTE             [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EE              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]


state 82

    (16) exp -> exp MULTIPLY exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    DEC             reduce using rule 16 (exp -> exp MULTIPLY exp .)
    INC             reduce using rule 16 (exp -> exp MULTIPLY exp .)
    PLUS            reduce using rule 16 (exp -> exp MULTIPLY exp .)
    MINUS           reduce using rule 16 (exp -> exp MULTIPLY exp .)
    MULTIPLY        reduce using rule 16 (exp -> exp MULTIPLY exp .)
    DIVIDE          reduce using rule 16 (exp -> exp MULTIPLY exp .)
    POWER           reduce using rule 16 (exp -> exp MULTIPLY exp .)
    MODULUS         reduce using rule 16 (exp -> exp MULTIPLY exp .)
    AND             reduce using rule 16 (exp -> exp MULTIPLY exp .)
    OR              reduce using rule 16 (exp -> exp MULTIPLY exp .)
    GT              reduce using rule 16 (exp -> exp MULTIPLY exp .)
    LT              reduce using rule 16 (exp -> exp MULTIPLY exp .)
    GTE             reduce using rule 16 (exp -> exp MULTIPLY exp .)
    LTE             reduce using rule 16 (exp -> exp MULTIPLY exp .)
    EE              reduce using rule 16 (exp -> exp MULTIPLY exp .)
    NE              reduce using rule 16 (exp -> exp MULTIPLY exp .)
    RPAREN          reduce using rule 16 (exp -> exp MULTIPLY exp .)
    SEMICOL         reduce using rule 16 (exp -> exp MULTIPLY exp .)
    THEN            reduce using rule 16 (exp -> exp MULTIPLY exp .)
    COMMA           reduce using rule 16 (exp -> exp MULTIPLY exp .)
    TO              reduce using rule 16 (exp -> exp MULTIPLY exp .)
    RBRACK          reduce using rule 16 (exp -> exp MULTIPLY exp .)
    SEP             reduce using rule 16 (exp -> exp MULTIPLY exp .)
    UNTIL           reduce using rule 16 (exp -> exp MULTIPLY exp .)
    LBRACE          reduce using rule 16 (exp -> exp MULTIPLY exp .)

  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! MULTIPLY        [ shift and go to state 43 ]
  ! DIVIDE          [ shift and go to state 44 ]
  ! POWER           [ shift and go to state 45 ]
  ! MODULUS         [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! GT              [ shift and go to state 49 ]
  ! LT              [ shift and go to state 50 ]
  ! GTE             [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EE              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]


state 83

    (17) exp -> exp DIVIDE exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    DEC             reduce using rule 17 (exp -> exp DIVIDE exp .)
    INC             reduce using rule 17 (exp -> exp DIVIDE exp .)
    PLUS            reduce using rule 17 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 17 (exp -> exp DIVIDE exp .)
    MULTIPLY        reduce using rule 17 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 17 (exp -> exp DIVIDE exp .)
    POWER           reduce using rule 17 (exp -> exp DIVIDE exp .)
    MODULUS         reduce using rule 17 (exp -> exp DIVIDE exp .)
    AND             reduce using rule 17 (exp -> exp DIVIDE exp .)
    OR              reduce using rule 17 (exp -> exp DIVIDE exp .)
    GT              reduce using rule 17 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 17 (exp -> exp DIVIDE exp .)
    GTE             reduce using rule 17 (exp -> exp DIVIDE exp .)
    LTE             reduce using rule 17 (exp -> exp DIVIDE exp .)
    EE              reduce using rule 17 (exp -> exp DIVIDE exp .)
    NE              reduce using rule 17 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 17 (exp -> exp DIVIDE exp .)
    SEMICOL         reduce using rule 17 (exp -> exp DIVIDE exp .)
    THEN            reduce using rule 17 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 17 (exp -> exp DIVIDE exp .)
    TO              reduce using rule 17 (exp -> exp DIVIDE exp .)
    RBRACK          reduce using rule 17 (exp -> exp DIVIDE exp .)
    SEP             reduce using rule 17 (exp -> exp DIVIDE exp .)
    UNTIL           reduce using rule 17 (exp -> exp DIVIDE exp .)
    LBRACE          reduce using rule 17 (exp -> exp DIVIDE exp .)

  ! PLUS            [ shift and go to state 41 ]
  ! MINUS           [ shift and go to state 42 ]
  ! MULTIPLY        [ shift and go to state 43 ]
  ! DIVIDE          [ shift and go to state 44 ]
  ! POWER           [ shift and go to state 45 ]
  ! MODULUS         [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! GT              [ shift and go to state 49 ]
  ! LT              [ shift and go to state 50 ]
  ! GTE             [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EE              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]


state 84

    (18) exp -> exp POWER exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    DEC             reduce using rule 18 (exp -> exp POWER exp .)
    INC             reduce using rule 18 (exp -> exp POWER exp .)
    RPAREN          reduce using rule 18 (exp -> exp POWER exp .)
    SEMICOL         reduce using rule 18 (exp -> exp POWER exp .)
    THEN            reduce using rule 18 (exp -> exp POWER exp .)
    COMMA           reduce using rule 18 (exp -> exp POWER exp .)
    TO              reduce using rule 18 (exp -> exp POWER exp .)
    RBRACK          reduce using rule 18 (exp -> exp POWER exp .)
    SEP             reduce using rule 18 (exp -> exp POWER exp .)
    UNTIL           reduce using rule 18 (exp -> exp POWER exp .)
    LBRACE          reduce using rule 18 (exp -> exp POWER exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54

  ! PLUS            [ reduce using rule 18 (exp -> exp POWER exp .) ]
  ! MINUS           [ reduce using rule 18 (exp -> exp POWER exp .) ]
  ! MULTIPLY        [ reduce using rule 18 (exp -> exp POWER exp .) ]
  ! DIVIDE          [ reduce using rule 18 (exp -> exp POWER exp .) ]
  ! POWER           [ reduce using rule 18 (exp -> exp POWER exp .) ]
  ! MODULUS         [ reduce using rule 18 (exp -> exp POWER exp .) ]
  ! AND             [ reduce using rule 18 (exp -> exp POWER exp .) ]
  ! OR              [ reduce using rule 18 (exp -> exp POWER exp .) ]
  ! GT              [ reduce using rule 18 (exp -> exp POWER exp .) ]
  ! LT              [ reduce using rule 18 (exp -> exp POWER exp .) ]
  ! GTE             [ reduce using rule 18 (exp -> exp POWER exp .) ]
  ! LTE             [ reduce using rule 18 (exp -> exp POWER exp .) ]
  ! EE              [ reduce using rule 18 (exp -> exp POWER exp .) ]
  ! NE              [ reduce using rule 18 (exp -> exp POWER exp .) ]


state 85

    (19) exp -> exp MODULUS exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for EE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    DEC             reduce using rule 19 (exp -> exp MODULUS exp .)
    INC             reduce using rule 19 (exp -> exp MODULUS exp .)
    RPAREN          reduce using rule 19 (exp -> exp MODULUS exp .)
    SEMICOL         reduce using rule 19 (exp -> exp MODULUS exp .)
    THEN            reduce using rule 19 (exp -> exp MODULUS exp .)
    COMMA           reduce using rule 19 (exp -> exp MODULUS exp .)
    TO              reduce using rule 19 (exp -> exp MODULUS exp .)
    RBRACK          reduce using rule 19 (exp -> exp MODULUS exp .)
    SEP             reduce using rule 19 (exp -> exp MODULUS exp .)
    UNTIL           reduce using rule 19 (exp -> exp MODULUS exp .)
    LBRACE          reduce using rule 19 (exp -> exp MODULUS exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54

  ! PLUS            [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! MINUS           [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! MULTIPLY        [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! DIVIDE          [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! POWER           [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! MODULUS         [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! AND             [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! OR              [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! GT              [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! LT              [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! GTE             [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! LTE             [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! EE              [ reduce using rule 19 (exp -> exp MODULUS exp .) ]
  ! NE              [ reduce using rule 19 (exp -> exp MODULUS exp .) ]


state 86

    (20) exp -> exp AND exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    DEC             reduce using rule 20 (exp -> exp AND exp .)
    INC             reduce using rule 20 (exp -> exp AND exp .)
    POWER           reduce using rule 20 (exp -> exp AND exp .)
    MODULUS         reduce using rule 20 (exp -> exp AND exp .)
    AND             reduce using rule 20 (exp -> exp AND exp .)
    OR              reduce using rule 20 (exp -> exp AND exp .)
    RPAREN          reduce using rule 20 (exp -> exp AND exp .)
    SEMICOL         reduce using rule 20 (exp -> exp AND exp .)
    THEN            reduce using rule 20 (exp -> exp AND exp .)
    COMMA           reduce using rule 20 (exp -> exp AND exp .)
    TO              reduce using rule 20 (exp -> exp AND exp .)
    RBRACK          reduce using rule 20 (exp -> exp AND exp .)
    SEP             reduce using rule 20 (exp -> exp AND exp .)
    UNTIL           reduce using rule 20 (exp -> exp AND exp .)
    LBRACE          reduce using rule 20 (exp -> exp AND exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54

  ! PLUS            [ reduce using rule 20 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 20 (exp -> exp AND exp .) ]
  ! MULTIPLY        [ reduce using rule 20 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 20 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 20 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 20 (exp -> exp AND exp .) ]
  ! GTE             [ reduce using rule 20 (exp -> exp AND exp .) ]
  ! LTE             [ reduce using rule 20 (exp -> exp AND exp .) ]
  ! EE              [ reduce using rule 20 (exp -> exp AND exp .) ]
  ! NE              [ reduce using rule 20 (exp -> exp AND exp .) ]
  ! POWER           [ shift and go to state 45 ]
  ! MODULUS         [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]


state 87

    (21) exp -> exp OR exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    DEC             reduce using rule 21 (exp -> exp OR exp .)
    INC             reduce using rule 21 (exp -> exp OR exp .)
    POWER           reduce using rule 21 (exp -> exp OR exp .)
    MODULUS         reduce using rule 21 (exp -> exp OR exp .)
    OR              reduce using rule 21 (exp -> exp OR exp .)
    RPAREN          reduce using rule 21 (exp -> exp OR exp .)
    SEMICOL         reduce using rule 21 (exp -> exp OR exp .)
    THEN            reduce using rule 21 (exp -> exp OR exp .)
    COMMA           reduce using rule 21 (exp -> exp OR exp .)
    TO              reduce using rule 21 (exp -> exp OR exp .)
    RBRACK          reduce using rule 21 (exp -> exp OR exp .)
    SEP             reduce using rule 21 (exp -> exp OR exp .)
    UNTIL           reduce using rule 21 (exp -> exp OR exp .)
    LBRACE          reduce using rule 21 (exp -> exp OR exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    AND             shift and go to state 47
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54

  ! PLUS            [ reduce using rule 21 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 21 (exp -> exp OR exp .) ]
  ! MULTIPLY        [ reduce using rule 21 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 21 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 21 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 21 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 21 (exp -> exp OR exp .) ]
  ! GTE             [ reduce using rule 21 (exp -> exp OR exp .) ]
  ! LTE             [ reduce using rule 21 (exp -> exp OR exp .) ]
  ! EE              [ reduce using rule 21 (exp -> exp OR exp .) ]
  ! NE              [ reduce using rule 21 (exp -> exp OR exp .) ]
  ! POWER           [ shift and go to state 45 ]
  ! MODULUS         [ shift and go to state 46 ]
  ! OR              [ shift and go to state 48 ]


state 88

    (22) exp -> exp GT exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    DEC             reduce using rule 22 (exp -> exp GT exp .)
    INC             reduce using rule 22 (exp -> exp GT exp .)
    POWER           reduce using rule 22 (exp -> exp GT exp .)
    MODULUS         reduce using rule 22 (exp -> exp GT exp .)
    AND             reduce using rule 22 (exp -> exp GT exp .)
    OR              reduce using rule 22 (exp -> exp GT exp .)
    GT              reduce using rule 22 (exp -> exp GT exp .)
    LT              reduce using rule 22 (exp -> exp GT exp .)
    GTE             reduce using rule 22 (exp -> exp GT exp .)
    LTE             reduce using rule 22 (exp -> exp GT exp .)
    EE              reduce using rule 22 (exp -> exp GT exp .)
    NE              reduce using rule 22 (exp -> exp GT exp .)
    RPAREN          reduce using rule 22 (exp -> exp GT exp .)
    SEMICOL         reduce using rule 22 (exp -> exp GT exp .)
    THEN            reduce using rule 22 (exp -> exp GT exp .)
    COMMA           reduce using rule 22 (exp -> exp GT exp .)
    TO              reduce using rule 22 (exp -> exp GT exp .)
    RBRACK          reduce using rule 22 (exp -> exp GT exp .)
    SEP             reduce using rule 22 (exp -> exp GT exp .)
    UNTIL           reduce using rule 22 (exp -> exp GT exp .)
    LBRACE          reduce using rule 22 (exp -> exp GT exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44

  ! PLUS            [ reduce using rule 22 (exp -> exp GT exp .) ]
  ! MINUS           [ reduce using rule 22 (exp -> exp GT exp .) ]
  ! MULTIPLY        [ reduce using rule 22 (exp -> exp GT exp .) ]
  ! DIVIDE          [ reduce using rule 22 (exp -> exp GT exp .) ]
  ! POWER           [ shift and go to state 45 ]
  ! MODULUS         [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! GT              [ shift and go to state 49 ]
  ! LT              [ shift and go to state 50 ]
  ! GTE             [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EE              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]


state 89

    (23) exp -> exp LT exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    DEC             reduce using rule 23 (exp -> exp LT exp .)
    INC             reduce using rule 23 (exp -> exp LT exp .)
    POWER           reduce using rule 23 (exp -> exp LT exp .)
    MODULUS         reduce using rule 23 (exp -> exp LT exp .)
    AND             reduce using rule 23 (exp -> exp LT exp .)
    OR              reduce using rule 23 (exp -> exp LT exp .)
    GT              reduce using rule 23 (exp -> exp LT exp .)
    LT              reduce using rule 23 (exp -> exp LT exp .)
    GTE             reduce using rule 23 (exp -> exp LT exp .)
    LTE             reduce using rule 23 (exp -> exp LT exp .)
    EE              reduce using rule 23 (exp -> exp LT exp .)
    NE              reduce using rule 23 (exp -> exp LT exp .)
    RPAREN          reduce using rule 23 (exp -> exp LT exp .)
    SEMICOL         reduce using rule 23 (exp -> exp LT exp .)
    THEN            reduce using rule 23 (exp -> exp LT exp .)
    COMMA           reduce using rule 23 (exp -> exp LT exp .)
    TO              reduce using rule 23 (exp -> exp LT exp .)
    RBRACK          reduce using rule 23 (exp -> exp LT exp .)
    SEP             reduce using rule 23 (exp -> exp LT exp .)
    UNTIL           reduce using rule 23 (exp -> exp LT exp .)
    LBRACE          reduce using rule 23 (exp -> exp LT exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44

  ! PLUS            [ reduce using rule 23 (exp -> exp LT exp .) ]
  ! MINUS           [ reduce using rule 23 (exp -> exp LT exp .) ]
  ! MULTIPLY        [ reduce using rule 23 (exp -> exp LT exp .) ]
  ! DIVIDE          [ reduce using rule 23 (exp -> exp LT exp .) ]
  ! POWER           [ shift and go to state 45 ]
  ! MODULUS         [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! GT              [ shift and go to state 49 ]
  ! LT              [ shift and go to state 50 ]
  ! GTE             [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EE              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]


state 90

    (24) exp -> exp GTE exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    DEC             reduce using rule 24 (exp -> exp GTE exp .)
    INC             reduce using rule 24 (exp -> exp GTE exp .)
    POWER           reduce using rule 24 (exp -> exp GTE exp .)
    MODULUS         reduce using rule 24 (exp -> exp GTE exp .)
    AND             reduce using rule 24 (exp -> exp GTE exp .)
    OR              reduce using rule 24 (exp -> exp GTE exp .)
    GT              reduce using rule 24 (exp -> exp GTE exp .)
    LT              reduce using rule 24 (exp -> exp GTE exp .)
    GTE             reduce using rule 24 (exp -> exp GTE exp .)
    LTE             reduce using rule 24 (exp -> exp GTE exp .)
    EE              reduce using rule 24 (exp -> exp GTE exp .)
    NE              reduce using rule 24 (exp -> exp GTE exp .)
    RPAREN          reduce using rule 24 (exp -> exp GTE exp .)
    SEMICOL         reduce using rule 24 (exp -> exp GTE exp .)
    THEN            reduce using rule 24 (exp -> exp GTE exp .)
    COMMA           reduce using rule 24 (exp -> exp GTE exp .)
    TO              reduce using rule 24 (exp -> exp GTE exp .)
    RBRACK          reduce using rule 24 (exp -> exp GTE exp .)
    SEP             reduce using rule 24 (exp -> exp GTE exp .)
    UNTIL           reduce using rule 24 (exp -> exp GTE exp .)
    LBRACE          reduce using rule 24 (exp -> exp GTE exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44

  ! PLUS            [ reduce using rule 24 (exp -> exp GTE exp .) ]
  ! MINUS           [ reduce using rule 24 (exp -> exp GTE exp .) ]
  ! MULTIPLY        [ reduce using rule 24 (exp -> exp GTE exp .) ]
  ! DIVIDE          [ reduce using rule 24 (exp -> exp GTE exp .) ]
  ! POWER           [ shift and go to state 45 ]
  ! MODULUS         [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! GT              [ shift and go to state 49 ]
  ! LT              [ shift and go to state 50 ]
  ! GTE             [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EE              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]


state 91

    (25) exp -> exp LTE exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    DEC             reduce using rule 25 (exp -> exp LTE exp .)
    INC             reduce using rule 25 (exp -> exp LTE exp .)
    POWER           reduce using rule 25 (exp -> exp LTE exp .)
    MODULUS         reduce using rule 25 (exp -> exp LTE exp .)
    AND             reduce using rule 25 (exp -> exp LTE exp .)
    OR              reduce using rule 25 (exp -> exp LTE exp .)
    GT              reduce using rule 25 (exp -> exp LTE exp .)
    LT              reduce using rule 25 (exp -> exp LTE exp .)
    GTE             reduce using rule 25 (exp -> exp LTE exp .)
    LTE             reduce using rule 25 (exp -> exp LTE exp .)
    EE              reduce using rule 25 (exp -> exp LTE exp .)
    NE              reduce using rule 25 (exp -> exp LTE exp .)
    RPAREN          reduce using rule 25 (exp -> exp LTE exp .)
    SEMICOL         reduce using rule 25 (exp -> exp LTE exp .)
    THEN            reduce using rule 25 (exp -> exp LTE exp .)
    COMMA           reduce using rule 25 (exp -> exp LTE exp .)
    TO              reduce using rule 25 (exp -> exp LTE exp .)
    RBRACK          reduce using rule 25 (exp -> exp LTE exp .)
    SEP             reduce using rule 25 (exp -> exp LTE exp .)
    UNTIL           reduce using rule 25 (exp -> exp LTE exp .)
    LBRACE          reduce using rule 25 (exp -> exp LTE exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44

  ! PLUS            [ reduce using rule 25 (exp -> exp LTE exp .) ]
  ! MINUS           [ reduce using rule 25 (exp -> exp LTE exp .) ]
  ! MULTIPLY        [ reduce using rule 25 (exp -> exp LTE exp .) ]
  ! DIVIDE          [ reduce using rule 25 (exp -> exp LTE exp .) ]
  ! POWER           [ shift and go to state 45 ]
  ! MODULUS         [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! GT              [ shift and go to state 49 ]
  ! LT              [ shift and go to state 50 ]
  ! GTE             [ shift and go to state 51 ]
  ! LTE             [ shift and go to state 52 ]
  ! EE              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]


state 92

    (26) exp -> exp EE exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    DEC             reduce using rule 26 (exp -> exp EE exp .)
    INC             reduce using rule 26 (exp -> exp EE exp .)
    POWER           reduce using rule 26 (exp -> exp EE exp .)
    MODULUS         reduce using rule 26 (exp -> exp EE exp .)
    AND             reduce using rule 26 (exp -> exp EE exp .)
    OR              reduce using rule 26 (exp -> exp EE exp .)
    EE              reduce using rule 26 (exp -> exp EE exp .)
    NE              reduce using rule 26 (exp -> exp EE exp .)
    RPAREN          reduce using rule 26 (exp -> exp EE exp .)
    SEMICOL         reduce using rule 26 (exp -> exp EE exp .)
    THEN            reduce using rule 26 (exp -> exp EE exp .)
    COMMA           reduce using rule 26 (exp -> exp EE exp .)
    TO              reduce using rule 26 (exp -> exp EE exp .)
    RBRACK          reduce using rule 26 (exp -> exp EE exp .)
    SEP             reduce using rule 26 (exp -> exp EE exp .)
    UNTIL           reduce using rule 26 (exp -> exp EE exp .)
    LBRACE          reduce using rule 26 (exp -> exp EE exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52

  ! PLUS            [ reduce using rule 26 (exp -> exp EE exp .) ]
  ! MINUS           [ reduce using rule 26 (exp -> exp EE exp .) ]
  ! MULTIPLY        [ reduce using rule 26 (exp -> exp EE exp .) ]
  ! DIVIDE          [ reduce using rule 26 (exp -> exp EE exp .) ]
  ! GT              [ reduce using rule 26 (exp -> exp EE exp .) ]
  ! LT              [ reduce using rule 26 (exp -> exp EE exp .) ]
  ! GTE             [ reduce using rule 26 (exp -> exp EE exp .) ]
  ! LTE             [ reduce using rule 26 (exp -> exp EE exp .) ]
  ! POWER           [ shift and go to state 45 ]
  ! MODULUS         [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! EE              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]


state 93

    (27) exp -> exp NE exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    DEC             reduce using rule 27 (exp -> exp NE exp .)
    INC             reduce using rule 27 (exp -> exp NE exp .)
    POWER           reduce using rule 27 (exp -> exp NE exp .)
    MODULUS         reduce using rule 27 (exp -> exp NE exp .)
    AND             reduce using rule 27 (exp -> exp NE exp .)
    OR              reduce using rule 27 (exp -> exp NE exp .)
    EE              reduce using rule 27 (exp -> exp NE exp .)
    NE              reduce using rule 27 (exp -> exp NE exp .)
    RPAREN          reduce using rule 27 (exp -> exp NE exp .)
    SEMICOL         reduce using rule 27 (exp -> exp NE exp .)
    THEN            reduce using rule 27 (exp -> exp NE exp .)
    COMMA           reduce using rule 27 (exp -> exp NE exp .)
    TO              reduce using rule 27 (exp -> exp NE exp .)
    RBRACK          reduce using rule 27 (exp -> exp NE exp .)
    SEP             reduce using rule 27 (exp -> exp NE exp .)
    UNTIL           reduce using rule 27 (exp -> exp NE exp .)
    LBRACE          reduce using rule 27 (exp -> exp NE exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52

  ! PLUS            [ reduce using rule 27 (exp -> exp NE exp .) ]
  ! MINUS           [ reduce using rule 27 (exp -> exp NE exp .) ]
  ! MULTIPLY        [ reduce using rule 27 (exp -> exp NE exp .) ]
  ! DIVIDE          [ reduce using rule 27 (exp -> exp NE exp .) ]
  ! GT              [ reduce using rule 27 (exp -> exp NE exp .) ]
  ! LT              [ reduce using rule 27 (exp -> exp NE exp .) ]
  ! GTE             [ reduce using rule 27 (exp -> exp NE exp .) ]
  ! LTE             [ reduce using rule 27 (exp -> exp NE exp .) ]
  ! POWER           [ shift and go to state 45 ]
  ! MODULUS         [ shift and go to state 46 ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! EE              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]


state 94

    (32) stmt -> FUNCTION NAME LPAREN . optargs RPAREN stmtblock
    (10) optargs -> . args
    (11) optargs -> .
    (12) args -> . exp COMMA args
    (13) args -> . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    RPAREN          reduce using rule 11 (optargs -> .)
    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    optargs                        shift and go to state 114
    args                           shift and go to state 75
    exp                            shift and go to state 76

state 95

    (38) stmt -> STRUCT NAME SEP . structargs SEP
    (39) structargs -> . structexp COMMA structargs
    (40) structargs -> . structexp
    (41) structexp -> . NAME
    (42) structexp -> . NAME EQUAL exp

    NAME            shift and go to state 115

    structargs                     shift and go to state 116
    structexp                      shift and go to state 117

state 96

    (43) stmt -> MAKE NAME NAME .

    SEMICOL         reduce using rule 43 (stmt -> MAKE NAME NAME .)


state 97

    (61) stmt -> MAKE NAME EQUAL . exp
    (62) stmt -> MAKE NAME EQUAL . list
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN
    (33) list -> . LBRACK optargs RBRACK

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7
    LBRACK          shift and go to state 120

    exp                            shift and go to state 118
    list                           shift and go to state 119

state 98

    (64) stmt -> IF exp THEN . stmtblock
    (65) stmt -> IF exp THEN . stmtblock elsif ELSE THEN stmtblock
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 62

    stmtblock                      shift and go to state 121

state 99

    (70) stmt -> DO stmtblock WHILE . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 122

state 100

    (5) stmtblock -> LBRACE stmtS . RBRACE

    RBRACE          shift and go to state 123


state 101

    (6) stmtblock -> LBRACE error . RBRACE
    (8) stmtS -> error . SEMICOL stmtS

    RBRACE          shift and go to state 124
    SEMICOL         shift and go to state 125


state 102

    (7) stmtS -> stmt . SEMICOL stmtS

    SEMICOL         shift and go to state 126


state 103

    (71) stmt -> FOR NAME EQUAL . exp TO exp UNTIL step stmtblock
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 127

state 104

    (74) stmt -> PRINT LPAREN optargs . RPAREN

    RPAREN          shift and go to state 128


state 105

    (30) stmt -> CALL NAME LPAREN optargs . RPAREN

    RPAREN          shift and go to state 129


state 106

    (44) stmt -> NAME DOT NAME EQUAL . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 130

state 107

    (34) stmt -> NAME DOT POP LPAREN . exp RPAREN
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 131

state 108

    (35) stmt -> NAME DOT PUSH LPAREN . exp RPAREN
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 132

state 109

    (37) stmt -> NAME DOT SLICE LPAREN . exp COMMA exp RPAREN
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 133

state 110

    (36) exp -> NAME DOT INDEX LPAREN . exp RPAREN
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 134

state 111

    (29) exp -> NAME LPAREN optargs RPAREN .

    DEC             reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    INC             reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    PLUS            reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    MINUS           reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    MULTIPLY        reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    DIVIDE          reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    POWER           reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    MODULUS         reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    AND             reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    OR              reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    GT              reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    LT              reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    GTE             reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    LTE             reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    EE              reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    NE              reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    RPAREN          reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    SEMICOL         reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    THEN            reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    COMMA           reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    TO              reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    RBRACK          reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    SEP             reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    UNTIL           reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)
    LBRACE          reduce using rule 29 (exp -> NAME LPAREN optargs RPAREN .)


state 112

    (12) args -> exp COMMA . args
    (12) args -> . exp COMMA args
    (13) args -> . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 76
    args                           shift and go to state 135

state 113

    (45) exp -> NAME DOT NAME .

    RPAREN          reduce using rule 45 (exp -> NAME DOT NAME .)
    PLUS            reduce using rule 45 (exp -> NAME DOT NAME .)
    MINUS           reduce using rule 45 (exp -> NAME DOT NAME .)
    MULTIPLY        reduce using rule 45 (exp -> NAME DOT NAME .)
    DIVIDE          reduce using rule 45 (exp -> NAME DOT NAME .)
    POWER           reduce using rule 45 (exp -> NAME DOT NAME .)
    MODULUS         reduce using rule 45 (exp -> NAME DOT NAME .)
    AND             reduce using rule 45 (exp -> NAME DOT NAME .)
    OR              reduce using rule 45 (exp -> NAME DOT NAME .)
    GT              reduce using rule 45 (exp -> NAME DOT NAME .)
    LT              reduce using rule 45 (exp -> NAME DOT NAME .)
    GTE             reduce using rule 45 (exp -> NAME DOT NAME .)
    LTE             reduce using rule 45 (exp -> NAME DOT NAME .)
    EE              reduce using rule 45 (exp -> NAME DOT NAME .)
    NE              reduce using rule 45 (exp -> NAME DOT NAME .)
    SEMICOL         reduce using rule 45 (exp -> NAME DOT NAME .)
    DEC             reduce using rule 45 (exp -> NAME DOT NAME .)
    INC             reduce using rule 45 (exp -> NAME DOT NAME .)
    THEN            reduce using rule 45 (exp -> NAME DOT NAME .)
    COMMA           reduce using rule 45 (exp -> NAME DOT NAME .)
    TO              reduce using rule 45 (exp -> NAME DOT NAME .)
    RBRACK          reduce using rule 45 (exp -> NAME DOT NAME .)
    SEP             reduce using rule 45 (exp -> NAME DOT NAME .)
    UNTIL           reduce using rule 45 (exp -> NAME DOT NAME .)
    LBRACE          reduce using rule 45 (exp -> NAME DOT NAME .)


state 114

    (32) stmt -> FUNCTION NAME LPAREN optargs . RPAREN stmtblock

    RPAREN          shift and go to state 136


state 115

    (41) structexp -> NAME .
    (42) structexp -> NAME . EQUAL exp

    COMMA           reduce using rule 41 (structexp -> NAME .)
    SEP             reduce using rule 41 (structexp -> NAME .)
    EQUAL           shift and go to state 137


state 116

    (38) stmt -> STRUCT NAME SEP structargs . SEP

    SEP             shift and go to state 138


state 117

    (39) structargs -> structexp . COMMA structargs
    (40) structargs -> structexp .

    COMMA           shift and go to state 139
    SEP             reduce using rule 40 (structargs -> structexp .)


state 118

    (61) stmt -> MAKE NAME EQUAL exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    SEMICOL         reduce using rule 61 (stmt -> MAKE NAME EQUAL exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 119

    (62) stmt -> MAKE NAME EQUAL list .

    SEMICOL         reduce using rule 62 (stmt -> MAKE NAME EQUAL list .)


state 120

    (33) list -> LBRACK . optargs RBRACK
    (10) optargs -> . args
    (11) optargs -> .
    (12) args -> . exp COMMA args
    (13) args -> . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    RBRACK          reduce using rule 11 (optargs -> .)
    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    optargs                        shift and go to state 140
    args                           shift and go to state 75
    exp                            shift and go to state 76

state 121

    (64) stmt -> IF exp THEN stmtblock .
    (65) stmt -> IF exp THEN stmtblock . elsif ELSE THEN stmtblock
    (66) elsif -> . ELIF exp THEN stmtblock elsif
    (67) elsif -> .

    SEMICOL         reduce using rule 64 (stmt -> IF exp THEN stmtblock .)
    ELIF            shift and go to state 142
    ELSE            reduce using rule 67 (elsif -> .)

    elsif                          shift and go to state 141

state 122

    (70) stmt -> DO stmtblock WHILE exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    SEMICOL         reduce using rule 70 (stmt -> DO stmtblock WHILE exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 123

    (5) stmtblock -> LBRACE stmtS RBRACE .

    WHILE           reduce using rule 5 (stmtblock -> LBRACE stmtS RBRACE .)
    ELIF            reduce using rule 5 (stmtblock -> LBRACE stmtS RBRACE .)
    ELSE            reduce using rule 5 (stmtblock -> LBRACE stmtS RBRACE .)
    SEMICOL         reduce using rule 5 (stmtblock -> LBRACE stmtS RBRACE .)


state 124

    (6) stmtblock -> LBRACE error RBRACE .

    WHILE           reduce using rule 6 (stmtblock -> LBRACE error RBRACE .)
    ELIF            reduce using rule 6 (stmtblock -> LBRACE error RBRACE .)
    ELSE            reduce using rule 6 (stmtblock -> LBRACE error RBRACE .)
    SEMICOL         reduce using rule 6 (stmtblock -> LBRACE error RBRACE .)


state 125

    (8) stmtS -> error SEMICOL . stmtS
    (7) stmtS -> . stmt SEMICOL stmtS
    (8) stmtS -> . error SEMICOL stmtS
    (9) stmtS -> .
    (30) stmt -> . CALL NAME LPAREN optargs RPAREN
    (31) stmt -> . RETURN exp
    (32) stmt -> . FUNCTION NAME LPAREN optargs RPAREN stmtblock
    (34) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (35) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (37) stmt -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (38) stmt -> . STRUCT NAME SEP structargs SEP
    (43) stmt -> . MAKE NAME NAME
    (44) stmt -> . NAME DOT NAME EQUAL exp
    (52) stmt -> . exp DEC
    (53) stmt -> . exp INC
    (60) stmt -> . MAKE NAME
    (61) stmt -> . MAKE NAME EQUAL exp
    (62) stmt -> . MAKE NAME EQUAL list
    (63) stmt -> . NAME EQUAL exp
    (64) stmt -> . IF exp THEN stmtblock
    (65) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (68) stmt -> . BREAK
    (69) stmt -> . CONTINUE
    (70) stmt -> . DO stmtblock WHILE exp
    (71) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (74) stmt -> . PRINT LPAREN optargs RPAREN
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    error           shift and go to state 143
    RBRACE          reduce using rule 9 (stmtS -> .)
    CALL            shift and go to state 5
    RETURN          shift and go to state 8
    FUNCTION        shift and go to state 10
    NAME            shift and go to state 6
    STRUCT          shift and go to state 11
    MAKE            shift and go to state 12
    IF              shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PRINT           shift and go to state 20
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    stmtS                          shift and go to state 144
    stmt                           shift and go to state 102
    exp                            shift and go to state 9

state 126

    (7) stmtS -> stmt SEMICOL . stmtS
    (7) stmtS -> . stmt SEMICOL stmtS
    (8) stmtS -> . error SEMICOL stmtS
    (9) stmtS -> .
    (30) stmt -> . CALL NAME LPAREN optargs RPAREN
    (31) stmt -> . RETURN exp
    (32) stmt -> . FUNCTION NAME LPAREN optargs RPAREN stmtblock
    (34) stmt -> . NAME DOT POP LPAREN exp RPAREN
    (35) stmt -> . NAME DOT PUSH LPAREN exp RPAREN
    (37) stmt -> . NAME DOT SLICE LPAREN exp COMMA exp RPAREN
    (38) stmt -> . STRUCT NAME SEP structargs SEP
    (43) stmt -> . MAKE NAME NAME
    (44) stmt -> . NAME DOT NAME EQUAL exp
    (52) stmt -> . exp DEC
    (53) stmt -> . exp INC
    (60) stmt -> . MAKE NAME
    (61) stmt -> . MAKE NAME EQUAL exp
    (62) stmt -> . MAKE NAME EQUAL list
    (63) stmt -> . NAME EQUAL exp
    (64) stmt -> . IF exp THEN stmtblock
    (65) stmt -> . IF exp THEN stmtblock elsif ELSE THEN stmtblock
    (68) stmt -> . BREAK
    (69) stmt -> . CONTINUE
    (70) stmt -> . DO stmtblock WHILE exp
    (71) stmt -> . FOR NAME EQUAL exp TO exp UNTIL step stmtblock
    (74) stmt -> . PRINT LPAREN optargs RPAREN
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    error           shift and go to state 143
    RBRACE          reduce using rule 9 (stmtS -> .)
    CALL            shift and go to state 5
    RETURN          shift and go to state 8
    FUNCTION        shift and go to state 10
    NAME            shift and go to state 6
    STRUCT          shift and go to state 11
    MAKE            shift and go to state 12
    IF              shift and go to state 15
    BREAK           shift and go to state 16
    CONTINUE        shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PRINT           shift and go to state 20
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    stmt                           shift and go to state 102
    stmtS                          shift and go to state 145
    exp                            shift and go to state 9

state 127

    (71) stmt -> FOR NAME EQUAL exp . TO exp UNTIL step stmtblock
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    TO              shift and go to state 146
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 128

    (74) stmt -> PRINT LPAREN optargs RPAREN .

    SEMICOL         reduce using rule 74 (stmt -> PRINT LPAREN optargs RPAREN .)


state 129

    (30) stmt -> CALL NAME LPAREN optargs RPAREN .

    SEMICOL         reduce using rule 30 (stmt -> CALL NAME LPAREN optargs RPAREN .)


state 130

    (44) stmt -> NAME DOT NAME EQUAL exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    SEMICOL         reduce using rule 44 (stmt -> NAME DOT NAME EQUAL exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 131

    (34) stmt -> NAME DOT POP LPAREN exp . RPAREN
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    RPAREN          shift and go to state 147
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 132

    (35) stmt -> NAME DOT PUSH LPAREN exp . RPAREN
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    RPAREN          shift and go to state 148
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 133

    (37) stmt -> NAME DOT SLICE LPAREN exp . COMMA exp RPAREN
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    COMMA           shift and go to state 149
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 134

    (36) exp -> NAME DOT INDEX LPAREN exp . RPAREN
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    RPAREN          shift and go to state 150
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 135

    (12) args -> exp COMMA args .

    RPAREN          reduce using rule 12 (args -> exp COMMA args .)
    RBRACK          reduce using rule 12 (args -> exp COMMA args .)


state 136

    (32) stmt -> FUNCTION NAME LPAREN optargs RPAREN . stmtblock
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 62

    stmtblock                      shift and go to state 151

state 137

    (42) structexp -> NAME EQUAL . exp
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 152

state 138

    (38) stmt -> STRUCT NAME SEP structargs SEP .

    SEMICOL         reduce using rule 38 (stmt -> STRUCT NAME SEP structargs SEP .)


state 139

    (39) structargs -> structexp COMMA . structargs
    (39) structargs -> . structexp COMMA structargs
    (40) structargs -> . structexp
    (41) structexp -> . NAME
    (42) structexp -> . NAME EQUAL exp

    NAME            shift and go to state 115

    structexp                      shift and go to state 117
    structargs                     shift and go to state 153

state 140

    (33) list -> LBRACK optargs . RBRACK

    RBRACK          shift and go to state 154


state 141

    (65) stmt -> IF exp THEN stmtblock elsif . ELSE THEN stmtblock

    ELSE            shift and go to state 155


state 142

    (66) elsif -> ELIF . exp THEN stmtblock elsif
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 156

state 143

    (8) stmtS -> error . SEMICOL stmtS

    SEMICOL         shift and go to state 125


state 144

    (8) stmtS -> error SEMICOL stmtS .

    RBRACE          reduce using rule 8 (stmtS -> error SEMICOL stmtS .)


state 145

    (7) stmtS -> stmt SEMICOL stmtS .

    RBRACE          reduce using rule 7 (stmtS -> stmt SEMICOL stmtS .)


state 146

    (71) stmt -> FOR NAME EQUAL exp TO . exp UNTIL step stmtblock
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 157

state 147

    (34) stmt -> NAME DOT POP LPAREN exp RPAREN .

    SEMICOL         reduce using rule 34 (stmt -> NAME DOT POP LPAREN exp RPAREN .)


state 148

    (35) stmt -> NAME DOT PUSH LPAREN exp RPAREN .

    SEMICOL         reduce using rule 35 (stmt -> NAME DOT PUSH LPAREN exp RPAREN .)


state 149

    (37) stmt -> NAME DOT SLICE LPAREN exp COMMA . exp RPAREN
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 158

state 150

    (36) exp -> NAME DOT INDEX LPAREN exp RPAREN .

    DEC             reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    INC             reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    PLUS            reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    MINUS           reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    MULTIPLY        reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    POWER           reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    MODULUS         reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    AND             reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    OR              reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    GT              reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    LT              reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    GTE             reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    LTE             reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    EE              reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    NE              reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    RPAREN          reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    SEMICOL         reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    THEN            reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    COMMA           reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    TO              reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    RBRACK          reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    SEP             reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    UNTIL           reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)
    LBRACE          reduce using rule 36 (exp -> NAME DOT INDEX LPAREN exp RPAREN .)


state 151

    (32) stmt -> FUNCTION NAME LPAREN optargs RPAREN stmtblock .

    SEMICOL         reduce using rule 32 (stmt -> FUNCTION NAME LPAREN optargs RPAREN stmtblock .)


state 152

    (42) structexp -> NAME EQUAL exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    COMMA           reduce using rule 42 (structexp -> NAME EQUAL exp .)
    SEP             reduce using rule 42 (structexp -> NAME EQUAL exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 153

    (39) structargs -> structexp COMMA structargs .

    SEP             reduce using rule 39 (structargs -> structexp COMMA structargs .)


state 154

    (33) list -> LBRACK optargs RBRACK .

    SEMICOL         reduce using rule 33 (list -> LBRACK optargs RBRACK .)


state 155

    (65) stmt -> IF exp THEN stmtblock elsif ELSE . THEN stmtblock

    THEN            shift and go to state 159


state 156

    (66) elsif -> ELIF exp . THEN stmtblock elsif
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    THEN            shift and go to state 160
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 157

    (71) stmt -> FOR NAME EQUAL exp TO exp . UNTIL step stmtblock
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    UNTIL           shift and go to state 161
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 158

    (37) stmt -> NAME DOT SLICE LPAREN exp COMMA exp . RPAREN
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    RPAREN          shift and go to state 162
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 159

    (65) stmt -> IF exp THEN stmtblock elsif ELSE THEN . stmtblock
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 62

    stmtblock                      shift and go to state 163

state 160

    (66) elsif -> ELIF exp THEN . stmtblock elsif
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 62

    stmtblock                      shift and go to state 164

state 161

    (71) stmt -> FOR NAME EQUAL exp TO exp UNTIL . step stmtblock
    (72) step -> . exp
    (73) step -> .
    (14) exp -> . exp PLUS exp
    (15) exp -> . exp MINUS exp
    (16) exp -> . exp MULTIPLY exp
    (17) exp -> . exp DIVIDE exp
    (18) exp -> . exp POWER exp
    (19) exp -> . exp MODULUS exp
    (20) exp -> . exp AND exp
    (21) exp -> . exp OR exp
    (22) exp -> . exp GT exp
    (23) exp -> . exp LT exp
    (24) exp -> . exp GTE exp
    (25) exp -> . exp LTE exp
    (26) exp -> . exp EE exp
    (27) exp -> . exp NE exp
    (28) exp -> . NAME
    (29) exp -> . NAME LPAREN optargs RPAREN
    (36) exp -> . NAME DOT INDEX LPAREN exp RPAREN
    (45) exp -> . NAME DOT NAME
    (46) exp -> . MINUS INT
    (47) exp -> . MINUS FLOAT
    (48) exp -> . INT
    (49) exp -> . FLOAT
    (50) exp -> . DEC exp
    (51) exp -> . INC exp
    (54) exp -> . NOT exp
    (55) exp -> . TRUE
    (56) exp -> . FALSE
    (57) exp -> . STRING
    (58) exp -> . CHAR
    (59) exp -> . LPAREN exp RPAREN

    LBRACE          reduce using rule 73 (step -> .)
    NAME            shift and go to state 37
    MINUS           shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    DEC             shift and go to state 13
    INC             shift and go to state 14
    NOT             shift and go to state 24
    TRUE            shift and go to state 25
    FALSE           shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    LPAREN          shift and go to state 7

    exp                            shift and go to state 165
    step                           shift and go to state 166

state 162

    (37) stmt -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .

    SEMICOL         reduce using rule 37 (stmt -> NAME DOT SLICE LPAREN exp COMMA exp RPAREN .)


state 163

    (65) stmt -> IF exp THEN stmtblock elsif ELSE THEN stmtblock .

    SEMICOL         reduce using rule 65 (stmt -> IF exp THEN stmtblock elsif ELSE THEN stmtblock .)


state 164

    (66) elsif -> ELIF exp THEN stmtblock . elsif
    (66) elsif -> . ELIF exp THEN stmtblock elsif
    (67) elsif -> .

    ELIF            shift and go to state 142
    ELSE            reduce using rule 67 (elsif -> .)

    elsif                          shift and go to state 167

state 165

    (72) step -> exp .
    (14) exp -> exp . PLUS exp
    (15) exp -> exp . MINUS exp
    (16) exp -> exp . MULTIPLY exp
    (17) exp -> exp . DIVIDE exp
    (18) exp -> exp . POWER exp
    (19) exp -> exp . MODULUS exp
    (20) exp -> exp . AND exp
    (21) exp -> exp . OR exp
    (22) exp -> exp . GT exp
    (23) exp -> exp . LT exp
    (24) exp -> exp . GTE exp
    (25) exp -> exp . LTE exp
    (26) exp -> exp . EE exp
    (27) exp -> exp . NE exp

    LBRACE          reduce using rule 72 (step -> exp .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    MULTIPLY        shift and go to state 43
    DIVIDE          shift and go to state 44
    POWER           shift and go to state 45
    MODULUS         shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    GT              shift and go to state 49
    LT              shift and go to state 50
    GTE             shift and go to state 51
    LTE             shift and go to state 52
    EE              shift and go to state 53
    NE              shift and go to state 54


state 166

    (71) stmt -> FOR NAME EQUAL exp TO exp UNTIL step . stmtblock
    (5) stmtblock -> . LBRACE stmtS RBRACE
    (6) stmtblock -> . LBRACE error RBRACE

    LBRACE          shift and go to state 62

    stmtblock                      shift and go to state 168

state 167

    (66) elsif -> ELIF exp THEN stmtblock elsif .

    ELSE            reduce using rule 66 (elsif -> ELIF exp THEN stmtblock elsif .)


state 168

    (71) stmt -> FOR NAME EQUAL exp TO exp UNTIL step stmtblock .

    SEMICOL         reduce using rule 71 (stmt -> FOR NAME EQUAL exp TO exp UNTIL step stmtblock .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 84 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 84 resolved as shift
WARNING: shift/reduce conflict for POWER in state 84 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 84 resolved as shift
WARNING: shift/reduce conflict for AND in state 84 resolved as shift
WARNING: shift/reduce conflict for OR in state 84 resolved as shift
WARNING: shift/reduce conflict for GT in state 84 resolved as shift
WARNING: shift/reduce conflict for LT in state 84 resolved as shift
WARNING: shift/reduce conflict for GTE in state 84 resolved as shift
WARNING: shift/reduce conflict for LTE in state 84 resolved as shift
WARNING: shift/reduce conflict for EE in state 84 resolved as shift
WARNING: shift/reduce conflict for NE in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 85 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 85 resolved as shift
WARNING: shift/reduce conflict for POWER in state 85 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 85 resolved as shift
WARNING: shift/reduce conflict for AND in state 85 resolved as shift
WARNING: shift/reduce conflict for OR in state 85 resolved as shift
WARNING: shift/reduce conflict for GT in state 85 resolved as shift
WARNING: shift/reduce conflict for LT in state 85 resolved as shift
WARNING: shift/reduce conflict for GTE in state 85 resolved as shift
WARNING: shift/reduce conflict for LTE in state 85 resolved as shift
WARNING: shift/reduce conflict for EE in state 85 resolved as shift
WARNING: shift/reduce conflict for NE in state 85 resolved as shift
